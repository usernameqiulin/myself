'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var Button = function (_Component) {
    _inherits(Button, _Component);

    function Button() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Button);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Button.__proto__ || Object.getPrototypeOf(Button)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            pressing: false,
            subPressing: false
        }, _this.$onSubPressIn = function () {

            _this.setState({
                subPressing: true
            });
        }, _this.$onSubPressOut = function () {

            _this.setState({
                subPressing: false
            });
        }, _this.$onPressIn = function () {

            _this.setState({
                pressing: true
            });
        }, _this.$onPressOut = function () {

            _this.setState({
                pressing: false
            });
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Button, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }
    }, {
        key: '$renderSubButton',
        value: function $renderSubButton() {

            if (!('subText' in this.props)) {

                return null;
            }

            var _props = this.props,
                themeColor = _props.themeColor,
                subText = _props.subText,
                onSubPress = _props.onSubPress,
                disabled = _props.disabled;
            var subPressing = this.state.subPressing;


            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                    style: { flex: 1, marginRight: 10 },
                    activeOpacity: 1,
                    disabled: disabled,
                    onPressIn: this.$onSubPressIn,
                    onPressOut: this.$onSubPressOut,
                    onPress: onSubPress
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.subButton },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [styles.subButtonBody, { borderColor: themeColor }] },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [styles.subButtonText, { color: themeColor }] },
                            subText
                        )
                    ),
                    subPressing || disabled ? _react2.default.createElement(_reactNative.View, { style: [styles.cover, subPressing ? { backgroundColor: 'rgba(0, 0, 0, 0.1)' } : null, disabled ? { backgroundColor: 'rgba(255, 255, 255, 0.6)' } : null] }) : null,
                    _react2.default.createElement(_reactNative.View, null)
                )
            );
        }
    }, {
        key: '$renderButton',
        value: function $renderButton() {

            if (!('text' in this.props)) {

                return null;
            }

            var _props2 = this.props,
                themeColor = _props2.themeColor,
                text = _props2.text,
                onPress = _props2.onPress,
                disabled = _props2.disabled,
                isEqual = _props2.isEqual;
            var pressing = this.state.pressing;


            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                    style: { flex: isEqual ? 1 : 2, marginRight: 10 },
                    activeOpacity: 1,
                    disabled: disabled,
                    onPressIn: this.$onPressIn,
                    onPressOut: this.$onPressOut,
                    onPress: onPress
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.button },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [styles.buttonBody, { backgroundColor: themeColor }] },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: styles.buttonText },
                            text
                        )
                    ),
                    pressing || disabled ? _react2.default.createElement(_reactNative.View, { style: [styles.cover, pressing ? { backgroundColor: 'rgba(0, 0, 0, 0.1)' } : null, disabled ? { backgroundColor: 'rgba(255, 255, 255, 0.6)' } : null] }) : null,
                    _react2.default.createElement(_reactNative.View, null)
                )
            );
        }
    }, {
        key: 'render',
        value: function render() {

            // 组件容器样式，只支持有限定制
            var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(this.props.style || {}),
                _StyleSheet$flatten$m = _StyleSheet$flatten.marginTop,
                marginTop = _StyleSheet$flatten$m === undefined ? 0 : _StyleSheet$flatten$m,
                _StyleSheet$flatten$m2 = _StyleSheet$flatten.marginBottom,
                marginBottom = _StyleSheet$flatten$m2 === undefined ? 0 : _StyleSheet$flatten$m2,
                _StyleSheet$flatten$b = _StyleSheet$flatten.borderTopWidth,
                borderTopWidth = _StyleSheet$flatten$b === undefined ? 0 : _StyleSheet$flatten$b,
                _StyleSheet$flatten$b2 = _StyleSheet$flatten.borderBottomWidth,
                borderBottomWidth = _StyleSheet$flatten$b2 === undefined ? 0 : _StyleSheet$flatten$b2,
                borderColor = _StyleSheet$flatten.borderColor,
                borderTopColor = _StyleSheet$flatten.borderTopColor,
                borderBottomColor = _StyleSheet$flatten.borderBottomColor;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, {
                        marginTop: marginTop, marginBottom: marginBottom,
                        borderTopWidth: borderTopWidth, borderBottomWidth: borderBottomWidth,
                        borderColor: borderColor, borderTopColor: borderTopColor, borderBottomColor: borderBottomColor
                    }] },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.container },
                    this.$renderSubButton(),
                    this.$renderButton()
                )
            );
        }
    }]);

    return Button;
}(_react.Component);

Button.propTypes = {
    themeColor: _propTypes2.default.string, // 主题色
    text: _propTypes2.default.string, // 主要按钮文字，不指定则不渲染
    onPress: _propTypes2.default.func, // 主要按钮触摸回调
    subText: _propTypes2.default.string, // 次要按钮文字，不指定则不渲染
    onSubPress: _propTypes2.default.func, // 次要按钮触摸回调
    disabled: _propTypes2.default.bool, // 是否禁用，这里会禁用全部按钮
    isEqual: _propTypes2.default.bool // 主次按钮占位是否均分
};
Button.defaultProps = {
    themeColor: '#1fc8a2',
    onPress: noop,
    onSubPress: noop,
    disabled: false,
    isEqual: false
};
exports.default = Button;


var styles = _reactNative.StyleSheet.create({
    body: {
        height: 80,
        paddingTop: 16,
        paddingRight: 6,
        paddingBottom: 16,
        paddingLeft: 16,
        backgroundColor: '#fff'
    },
    container: {
        flex: 1,
        flexDirection: 'row'
    },

    subButton: {
        position: 'relative',
        flex: 1
    },
    subButtonBody: {
        flex: 1,
        borderWidth: 1,
        borderColor: '#1fc8a2',
        borderRadius: 24,
        alignItems: 'center',
        justifyContent: 'center'
    },
    subButtonText: {
        fontSize: 16,
        fontWeight: 'bold',
        color: '#1fc8a2'
    },

    button: {
        position: 'relative',
        flex: 1
    },
    buttonBody: {
        flex: 1,
        backgroundColor: '#1fc8a2',
        borderRadius: 24,
        alignItems: 'center',
        justifyContent: 'center'
    },
    buttonText: {
        fontSize: 16,
        fontWeight: 'bold',
        color: '#fff'
    },

    cover: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        borderRadius: 24
    }
});