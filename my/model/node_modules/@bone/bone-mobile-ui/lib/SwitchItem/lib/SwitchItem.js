'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _Switch = require('./Switch');

var _Switch2 = _interopRequireDefault(_Switch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var SwitchItem = function (_Component) {
    _inherits(SwitchItem, _Component);

    function SwitchItem() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, SwitchItem);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SwitchItem.__proto__ || Object.getPrototypeOf(SwitchItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            value: !!_this.props.value,
            pressing: false
        }, _this.$onPressIn = function () {

            _this.setState({
                pressing: true
            });
        }, _this.$onPressOut = function () {

            _this.setState({
                pressing: false
            });
        }, _this.$onPress = function () {
            var _this$props = _this.props,
                disabled = _this$props.disabled,
                onBeforeChange = _this$props.onBeforeChange,
                changed = _this$props.changed;


            if (disabled) {

                return;
            }

            var value = !_this.state.value;

            if (onBeforeChange && onBeforeChange(value) === false) {

                return;
            }

            // 保持原来的方式，不管开发者是否指定 value，内部状态都发生变化
            _this.setState({ value: value });

            changed(value);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(SwitchItem, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {

            if ('value' in nextProps) {

                this.setState({
                    value: nextProps.value
                });
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                _props$style = _props.style,
                style = _props$style === undefined ? {} : _props$style,
                themeColor = _props.themeColor,
                disabled = _props.disabled,
                title = _props.title,
                subTitle = _props.subTitle,
                subTitleColor = _props.subTitleColor;
            var _state = this.state,
                value = _state.value,
                pressing = _state.pressing;

            // 组件容器样式，只支持有限定制

            var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(style),
                _StyleSheet$flatten$m = _StyleSheet$flatten.marginTop,
                marginTop = _StyleSheet$flatten$m === undefined ? 0 : _StyleSheet$flatten$m,
                _StyleSheet$flatten$m2 = _StyleSheet$flatten.marginBottom,
                marginBottom = _StyleSheet$flatten$m2 === undefined ? 0 : _StyleSheet$flatten$m2,
                _StyleSheet$flatten$b = _StyleSheet$flatten.borderTopWidth,
                borderTopWidth = _StyleSheet$flatten$b === undefined ? 0 : _StyleSheet$flatten$b,
                _StyleSheet$flatten$b2 = _StyleSheet$flatten.borderBottomWidth,
                borderBottomWidth = _StyleSheet$flatten$b2 === undefined ? 0 : _StyleSheet$flatten$b2,
                borderColor = _StyleSheet$flatten.borderColor,
                borderTopColor = _StyleSheet$flatten.borderTopColor,
                borderBottomColor = _StyleSheet$flatten.borderBottomColor;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, {
                        height: subTitle ? 82 : 50,
                        marginTop: marginTop,
                        marginBottom: marginBottom
                    }] },
                _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        style: styles.touch,
                        activeOpacity: 1,
                        disabled: disabled,
                        onPressIn: this.$onPressIn,
                        onPressOut: this.$onPressOut,
                        onPress: this.$onPress
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.container },
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: [styles.content, {
                                    borderTopWidth: borderTopWidth, borderBottomWidth: borderBottomWidth,
                                    borderColor: borderColor, borderTopColor: borderTopColor, borderBottomColor: borderBottomColor
                                }] },
                            _react2.default.createElement(
                                _reactNative.View,
                                null,
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    { style: styles.title },
                                    title || ' '
                                ),
                                subTitle ? _react2.default.createElement(
                                    _reactNative.Text,
                                    { style: [styles.subTitle, { color: subTitleColor }] },
                                    subTitle
                                ) : null
                            ),
                            _react2.default.createElement(_Switch2.default, {
                                themeColor: themeColor,
                                checked: value
                            })
                        ),
                        pressing || disabled ? _react2.default.createElement(_reactNative.View, { style: [styles.cover, pressing ? { backgroundColor: 'rgba(0, 0, 0, 0.1)' } : null, disabled ? { backgroundColor: 'rgba(255, 255, 255, 0.6)' } : null] }) : null
                    )
                )
            );
        }
    }]);

    return SwitchItem;
}(_react.Component);

SwitchItem.propTypes = {
    themeColor: _propTypes.PropTypes.string, // 新增接口，主题色
    value: _propTypes.PropTypes.bool, // false，关闭；true，开启
    disabled: _propTypes.PropTypes.bool, // 是否禁用
    // leftIcon: PropTypes.shape({ // 此接口，在新的设计中已废弃
    //     style: PropTypes.object,
    //     iconFont: PropTypes.string.isRequired
    // }),
    title: _propTypes.PropTypes.string,
    subTitle: _propTypes.PropTypes.string,
    subTitleColor: _propTypes.PropTypes.string, // 新增属性，subTitle 颜色
    // customStyle: PropTypes.object, // 此接口废弃
    onBeforeChange: _propTypes.PropTypes.func, // 新增接口，返回 false，则点击不会发生变化
    changed: _propTypes.PropTypes.func
};
SwitchItem.defaultProps = {
    themeColor: '#1fc8a2',
    // value 不指定默认值，开发者未指定，则状态变化只发生在内部
    // 开发者若指定 value，则必须在 changed 回调中同步组件内外部状态
    // 其实很想 follow AntDesign，增加 defaultValue 属性，但还是尽量保持接口逻辑和 ^1.0.0 版本一样吧，增量接口最好不要影响内部逻辑
    disabled: false,
    title: '',
    subTitle: '',
    subTitleColor: '#999',
    changed: noop
};
exports.default = SwitchItem;


var styles = _reactNative.StyleSheet.create({
    body: {
        height: 50,
        backgroundColor: '#fff'
    },
    touch: {
        flex: 1
    },
    container: {
        position: 'relative',
        flex: 1
    },

    content: {
        flex: 1,
        paddingLeft: 16,
        paddingRight: 16,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between'
    },
    title: {
        height: 20,
        lineHeight: 20,
        fontSize: 14,
        fontWeight: 'bold',
        color: '#333',
        overflow: 'hidden'
    },
    subTitle: {
        height: 17,
        marginTop: 6,
        lineHeight: 17,
        fontSize: 12,
        color: '#999',
        overflow: 'hidden'
    },

    cover: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    }
});