/**
 * @akModule AKToast
 * @desciption
 * @aliplus.com
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp2;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RecyclerViewAndroid = (0, _reactNative.requireNativeComponent)('BoneRecyclerView', null);
var RecyclerCellViewAndroid = (0, _reactNative.requireNativeComponent)('BoneRecyclerViewCell', null);

var RecyclerViewManagerModule = _reactNative.NativeModules.BoneRecyclerViewModule;
var UIManager = _reactNative.NativeModules.UIManager;

var RecyclerView = function (_Component) {
    _inherits(RecyclerView, _Component);

    function RecyclerView(props) {
        _classCallCheck(this, RecyclerView);

        var _this = _possibleConstructorReturn(this, (RecyclerView.__proto__ || Object.getPrototypeOf(RecyclerView)).call(this, props));

        _this.state = {
            rows: _this._renderRows(_this.props)
        };
        return _this;
    }

    _createClass(RecyclerView, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.dataSource == null || this.props.dataSource.length == 0) {
                return null;
            }
            RecyclerViewManagerModule && RecyclerViewManagerModule.notifyDataSetChanged(_reactNative2.default.findNodeHandle(this));
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            if (this.props.dataSource == null || this.props.dataSource.length == 0) {
                return null;
            }
            RecyclerViewManagerModule && RecyclerViewManagerModule.notifyDataSetChanged(_reactNative2.default.findNodeHandle(this));
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var state = this._stateFromProps(nextProps);
            if (state.rows.length > 0) {
                this.setState(state);
            }

            var scrollConfig = nextProps.scrollConfig || {};
            var isWork = !!scrollConfig.isWork;
            if (isWork && this.androidHandle) {
                var x = parseInt(scrollConfig.x, 10) || 0;
                var y = parseInt(scrollConfig.y, 10) || 0;
                var animated = !!scrollConfig.animated;
                UIManager.dispatchViewManagerCommand(_reactNative2.default.findNodeHandle(this.androidHandle), 1, [x, y, animated]);
            } else if (state.rows.length === 0) {
                this.setState(state);
            }
        }
    }, {
        key: '_stateFromProps',
        value: function _stateFromProps(props) {
            return {
                rows: this._renderRows(props)
            };
        }
    }, {
        key: '_renderRowsContent',
        value: function _renderRowsContent(sectionIndex, rowIndex, rowData) {
            var _this2 = this;

            var content = this.props.renderRow(rowData, sectionIndex, rowIndex, this._onRowHighlighted);
            var editConfig = content.props.editConfig || {};
            return _react2.default.createElement(
                _reactNative.TouchableWithoutFeedback,
                {
                    onLongPress: function onLongPress(event) {
                        _this2._onLongPress(event, sectionIndex, rowIndex, editConfig);
                    } },
                _react2.default.createElement(
                    _reactNative.View,
                    null,
                    content
                )
            );
        }
    }, {
        key: '_onClick',
        value: function _onClick(event) {
            var data = event.nativeEvent;
            var selectedSection = data.section;
            var selectedIndex = data.row;

            if (this.props.onClick) {
                this.props.onClick({ selectedSection: selectedSection, selectedIndex: selectedIndex });
            }
            event.stopPropagation();
        }
    }, {
        key: '_onLongPress',
        value: function _onLongPress(event, sectionIndex, rowIndex, editConfig) {
            this.props.onLongClick(event, sectionIndex, rowIndex, editConfig, function (callback) {
                callback(dataSource);
            });
        }
    }, {
        key: '_renderRowItem',
        value: function _renderRowItem(cellData, rowData, sectionIndex, rowIndex) {
            var _this3 = this;

            var contentView = this._renderRowsContent(sectionIndex, rowIndex, rowData);
            var content = this.props.renderRow(rowData, sectionIndex, rowIndex, this._onRowHighlighted);
            var rowGuid = this.props.rowGuid ? this.props.rowGuid(rowData, sectionIndex, rowIndex) : this._defaultRowGuid(rowData);

            var self = this;

            return _react2.default.createElement(AKCell, {
                key: rowGuid,
                indexPath: { section: sectionIndex, item: rowIndex },
                style: {
                    height: content.props.size ? content.props.size.height : this.props.layout.cellHeight,
                    width: content.props.size ? content.props.size.width : this.props.layout.cellWidth
                },
                content: contentView,
                ref: function ref(row) {
                    if (row) {
                        PrivateMethods.captureReferenceFor(cellData, row);
                    }
                },
                onCellClick: function onCellClick(event) {
                    _this3._onClick(event);
                }
            });
        }
    }, {
        key: '_renderRows',
        value: function _renderRows(props) {
            if (this.props.dataSource == null || this.props.dataSource.length == 0) {
                return null;
            }
            var dataSource = props.dataSource;
            var cellData = this.cellData = {};
            var rows = [];
            for (var sectionIndex = 0; sectionIndex < dataSource.length; sectionIndex++) {
                var section = dataSource[sectionIndex];
                for (var rowIndex = 0; rowIndex < section.length; rowIndex++) {
                    var rowData = section[rowIndex];
                    var row = this._renderRowItem(cellData, rowData, sectionIndex, rowIndex);
                    rows.push(row);
                }
            }
            return rows;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this4 = this;

            if (this.props.dataSource == null || this.props.dataSource.length == 0) {
                return null;
            }
            return _react2.default.createElement(
                RecyclerViewAndroid,
                {
                    ref: function ref(r) {
                        _this4.androidHandle = r;
                    },
                    style: [this.props.style, { top: 0 }],
                    layout: this.props.layout
                },
                this.state.rows
            );
        }
    }, {
        key: '_onRowHighlighted',
        value: function _onRowHighlighted(sectionID, rowID) {
            this.setState({ highlightedRow: { sectionID: sectionID, rowID: rowID } });
        }
    }]);

    return RecyclerView;
}(_react.Component);

RecyclerView.defaultProps = {
    scrollConfig: {
        isWork: false,
        x: 0,
        y: 0,
        animated: true
    }
};
exports.default = RecyclerView;
;

var PrivateMethods = {
    captureReferenceFor: function captureReferenceFor(cellData, row) {
        var sectionId = row.props.indexPath.section;
        var rowId = row.props.indexPath.item;
        if (cellData[sectionId] === undefined) {
            cellData[sectionId] = {};
        }

        cellData[sectionId][rowId] = row; // Capture the reference
    }
};

RecyclerView.Cell = (_temp2 = _class = function (_Component2) {
    _inherits(RecyclerViewCell, _Component2);

    function RecyclerViewCell() {
        var _ref;

        var _temp, _this5, _ret;

        _classCallCheck(this, RecyclerViewCell);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this5 = _possibleConstructorReturn(this, (_ref = RecyclerViewCell.__proto__ || Object.getPrototypeOf(RecyclerViewCell)).call.apply(_ref, [this].concat(args))), _this5), _this5.state = {
            visibility: true
        }, _temp), _possibleConstructorReturn(_this5, _ret);
    }

    _createClass(RecyclerViewCell, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
            this.viewProperties = {
                width: 0,
                height: 0
            };
        }
    }, {
        key: 'render',
        value: function render() {
            var _this6 = this;

            if (this.state.visibility === false) {
                return _react2.default.createElement(RecyclerCellViewAndroid, _extends({ size: this.props.content.props.size, style: { width: this.viewProperties.width, height: this.viewProperties.height } }, this.props));
            }
            return _react2.default.createElement(
                RecyclerCellViewAndroid,
                _extends({ onLayout: function onLayout(evt) {
                        return _this6.onLayout(evt);
                    }, size: this.props.content.props.size }, this.props),
                this.props.content
            );
        }
    }, {
        key: 'onLayout',
        value: function onLayout(evt) {
            // When the cell has actually been layed out, record the rendered width & height
            this.viewProperties.width = evt.nativeEvent.layout.width;
            this.viewProperties.height = evt.nativeEvent.layout.height;
        }
    }, {
        key: 'setVisibility',
        value: function setVisibility(visibility) {
            if (this.state.visibility == visibility) {
                return;
            }

            if (visibility == true) {
                this.setState({ visibility: true });
            } else {
                this.setState({ visibility: false });
            }
        }
    }]);

    return RecyclerViewCell;
}(_react.Component), _class.propTypes = {
    content: _react2.default.PropTypes.element.isRequired
}, _temp2);
var AKCell = RecyclerView.Cell;