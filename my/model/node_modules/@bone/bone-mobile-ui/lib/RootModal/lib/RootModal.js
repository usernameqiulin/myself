'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ToastContainer = exports.PopupContainer = exports.AlertContainer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _RootSiblings = require('../../RootSiblings');

var _RootSiblings2 = _interopRequireDefault(_RootSiblings);

var _AlertContainer = require('./containers/AlertContainer');

var _AlertContainer2 = _interopRequireDefault(_AlertContainer);

var _PopupContainer = require('./containers/PopupContainer');

var _PopupContainer2 = _interopRequireDefault(_PopupContainer);

var _ToastContainer = require('./containers/ToastContainer');

var _ToastContainer2 = _interopRequireDefault(_ToastContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var RootModal = function (_Component) {
    _inherits(RootModal, _Component);

    function RootModal() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, RootModal);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = RootModal.__proto__ || Object.getPrototypeOf(RootModal)).call.apply(_ref, [this].concat(args))), _this), _this.$modal = null, _temp), _possibleConstructorReturn(_this, _ret);
    }

    // RootSiblings 实例


    _createClass(RootModal, [{
        key: 'componentWillMount',
        value: function componentWillMount() {

            // 老版本传递了所有的属性 {...this.props}
            // 其实真正有用的只有这三个：visible, onBackgroundPress & children
            var _props = this.props,
                visible = _props.visible,
                onBackgroundPress = _props.onBackgroundPress,
                children = _props.children;


            this.$modal = new _RootSiblings2.default(_react2.default.createElement(this.$Container, {
                visible: visible,
                onBackgroundPress: onBackgroundPress,
                children: children
            }));
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var visible = nextProps.visible,
                onBackgroundPress = nextProps.onBackgroundPress,
                children = nextProps.children;


            this.$modal.update(_react2.default.createElement(this.$Container, {
                visible: visible,
                onBackgroundPress: onBackgroundPress,
                children: children
            }));
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {

            this.$modal.destroy();
        }
    }, {
        key: 'render',
        value: function render() {

            return null;
        }
    }, {
        key: '$Container',


        // 获取 Container 类
        get: function get() {

            switch (this.props.containerType) {

                case 'alert':

                    return _AlertContainer2.default;

                case 'popup':

                    return _PopupContainer2.default;

                case 'toast':

                    return _ToastContainer2.default;

                default:

                    return _PopupContainer2.default;
            }
        }
    }]);

    return RootModal;
}(_react.Component);

RootModal.propTypes = {
    // 容器类型，枚举
    // 更新时，需要同步更新 Modal 组件的 containerType
    containerType: _propTypes2.default.oneOf(['alert', 'popup', 'toast']),
    visible: _propTypes2.default.bool, // 是否显示
    onBackgroundPress: _propTypes2.default.func // 触摸背景区块时执行的函数
};
RootModal.defaultProps = {
    containerType: 'popup', // 默认是 popup，slider-up 动画
    visible: false,
    onBackgroundPress: noop
};
exports.default = RootModal;
exports.AlertContainer = _AlertContainer2.default;
exports.PopupContainer = _PopupContainer2.default;
exports.ToastContainer = _ToastContainer2.default;