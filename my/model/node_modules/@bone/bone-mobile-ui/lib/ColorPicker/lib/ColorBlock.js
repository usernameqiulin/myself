'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _tinycolor = require('tinycolor2');

var _tinycolor2 = _interopRequireDefault(_tinycolor);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ColorBlock = function (_Component) {
    _inherits(ColorBlock, _Component);

    function ColorBlock(props) {
        _classCallCheck(this, ColorBlock);

        var _this = _possibleConstructorReturn(this, (ColorBlock.__proto__ || Object.getPrototypeOf(ColorBlock)).call(this, props));

        _this.$onTouchStart = function (_ref) {
            var x0 = _ref.x0,
                y0 = _ref.y0;
            var _this$state$color = _this.state.color,
                s = _this$state$color.s,
                v = _this$state$color.v;


            _this.$startX = x0, _this.$startY = y0;

            _this.$startS = s, _this.$startV = v;
        };

        _this.$onTouchMove = function (_ref2) {
            var moveX = _ref2.moveX,
                x0 = _ref2.x0,
                moveY = _ref2.moveY,
                y0 = _ref2.y0;
            var _this$props = _this.props,
                size = _this$props.size,
                onColorChange = _this$props.onColorChange;
            var _this$state$color2 = _this.state.color,
                h = _this$state$color2.h,
                s = _this$state$color2.s,
                v = _this$state$color2.v;


            moveX = moveX || x0, moveY = moveY || y0;

            s = _this.$startS + (moveX - _this.$startX) / size;

            v = _this.$startV - (moveY - _this.$startY) / size;

            if (s < 0) {

                s = 0;
            } else if (s > 1) {

                s = 1;
            }

            if (v < 0) {

                v = 0;
            } else if (v > 1) {

                v = 1;
            }

            var color = { h: h, s: s, v: v };

            if (!('color' in _this.props)) {

                _this.setState({ color: color });
            }

            onColorChange(color);
        };

        _this.$onTouchEnd = function (gestureState) {
            return _this.$onTouchMove(gestureState);
        };

        _this.$panHandlers = (0, _util.createPanResponder)({
            onTouchStart: _this.$onTouchStart,
            onTouchMove: _this.$onTouchMove,
            onTouchEnd: _this.$onTouchEnd
        }).panHandlers;


        if ('color' in props) {

            _this.state = {
                color: (0, _util.calHSV)(props.color)
            };
        } else {

            _this.state = {
                color: {
                    h: 0,
                    s: 1,
                    v: 1
                }
            };
        }
        return _this;
    }

    _createClass(ColorBlock, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {

            if ('color' in nextProps) {

                this.setState({
                    color: (0, _util.calHSV)(nextProps.color)
                });
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }

        // 实例化 panHandlers，只初始化一次

    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                size = _props.size,
                _props$style = _props.style,
                style = _props$style === undefined ? {} : _props$style;
            var color = this.state.color;
            var h = color.h,
                s = color.s,
                v = color.v;


            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, { width: size, height: size }, style] },
                _react2.default.createElement(_reactNative.View, { style: [styles.background, { width: size, height: size, backgroundColor: (0, _tinycolor2.default)({ h: h, s: 1, v: 1 }).toHexString() }] }),
                _react2.default.createElement(_reactNative.Image, { style: [styles.image, { width: size, height: size }], source: { uri: 'https://img.alicdn.com/tfs/TB1OzU1fnvI8KJjSspjXXcgjXXa-444-444.png' } }),
                _react2.default.createElement(
                    _reactNative.View,
                    _extends({
                        style: [styles.touch, {
                            top: size * (1 - v) - 20,
                            left: size * s - 20
                        }]
                    }, this.$panHandlers),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.touchOuterCircle },
                        _react2.default.createElement(_reactNative.View, { style: [styles.touchInnerCircle, { backgroundColor: (0, _tinycolor2.default)(color).toHexString() }] })
                    )
                )
            );
        }
    }]);

    return ColorBlock;
}(_react.Component);

ColorBlock.propTypes = {
    size: _propTypes2.default.number,
    color: _propTypes2.default.shape({
        h: _propTypes2.default.number, // 色调，0 - 360
        s: _propTypes2.default.number, // 饱和度，0 - 1
        v: _propTypes2.default.number // 明度，0 - 1
    }),
    onColorChange: _propTypes2.default.func
};
ColorBlock.defaultProps = {
    size: 148,
    onColorChange: _util.fn
};
exports.default = ColorBlock;


var styles = _reactNative.StyleSheet.create({
    body: {
        position: 'relative',
        overflow: 'visible'
    },
    background: {
        position: 'absolute',
        top: 0,
        left: 0
    },
    image: {
        position: 'absolute',
        top: 0,
        left: 0
    },
    touch: {
        position: 'absolute',
        width: 40,
        height: 40,
        alignItems: 'center',
        justifyContent: 'center'
    },
    touchOuterCircle: {
        width: 38,
        height: 38,
        borderWidth: 1,
        borderColor: '#dadada',
        borderRadius: 19,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center'
    },
    touchInnerCircle: {
        width: 32,
        height: 32,
        borderRadius: 16
    }
});