'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var windowInnerWidth = _reactNative.Dimensions.get('window').width;

// iOS 下，减少右滑退出页面的触碰概率，增加12的左右边距
var deltaPaddingWidth = _reactNative.Platform.OS === 'ios' ? 12 : 0;

var outerDistance = windowInnerWidth - (16 + deltaPaddingWidth) * 2 - 2 * 2; // 外长度，减去左右边距，减去最左右两点的半径

// const innerDistance = outerDistance - 24 + 2 * 2; // 内长度（可滑动长度），减去触摸圆形直径，保留注释

var translateLimit = windowInnerWidth / 2 - 16; // 用来判断当前滑动值的显示是否超出边界

var SliderPick = function (_Component) {
    _inherits(SliderPick, _Component);

    function SliderPick() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, SliderPick);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SliderPick.__proto__ || Object.getPrototypeOf(SliderPick)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            index: _this.$getIndex(_this.props),
            pressing: false
        }, _this.$startX = 0, _this.$startIndex = 0, _this.$lastIndex = 0, _this.$onTouchStart = function (_ref2) {
            var x0 = _ref2.x0;


            _this.$startX = x0, _this.$lastIndex = _this.$startIndex = _this.state.index;

            _this.setState({
                pressing: true
            });
        }, _this.$onTouchMove = function (_ref3) {
            var moveX = _ref3.moveX,
                x0 = _ref3.x0;
            var _this$props = _this.props,
                items = _this$props.items,
                disabled = _this$props.disabled,
                onValueChange = _this$props.onValueChange;


            if (disabled) {

                return;
            }

            moveX = moveX || x0;

            var length = items.length - 1;

            var positionX = outerDistance * _this.$startIndex / length + moveX - _this.$startX;

            var index = Math.round(positionX / outerDistance * length);

            if (index < 0) {

                index = 0;
            } else if (index > length) {

                index = length;
            }

            if (index !== _this.$lastIndex) {

                _this.setState({ index: index });

                onValueChange(index);
            }

            _this.$lastIndex = index;

            return index;
        }, _this.$onTouchEnd = function (gestureState) {

            _this.setState({
                pressing: false
            });

            var _this$props2 = _this.props,
                disabled = _this$props2.disabled,
                onSlidingComplete = _this$props2.onSlidingComplete;


            if (disabled) {

                return;
            }

            onSlidingComplete(_this.$onTouchMove(gestureState));
        }, _this.$panHandlers = (0, _util.createPanResponder)({
            onTouchStart: _this.$onTouchStart,
            onTouchMove: _this.$onTouchMove,
            onTouchEnd: _this.$onTouchEnd
        }).panHandlers, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(SliderPick, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {

            var index = this.$getIndex(nextProps);

            if (index === this.state.index) {

                return;
            }

            var onValueChange = nextProps.onValueChange;


            this.setState({ index: index });

            onValueChange(index);
        }
    }, {
        key: '$getIndex',
        value: function $getIndex(props) {
            var items = props.items,
                length = items.length;

            if ('value' in props) {
                var value = props.value;


                var index = 0;

                for (; index < length; ++index) {

                    if (items[index].value === value) {

                        return index;
                    }
                }
            }

            return parseInt(length / 2);
        }

        // 点的分布按照 outerDistance 均匀分布
        // 但是 touch 圆形的位置在最左和最右时需要调整

    }, {
        key: '$getExactPositionX',
        value: function $getExactPositionX(startX, index) {
            var delta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12 - 2;


            // items 的 length 必须大于 1，小于等于 1 的情况不做错误处理
            var length = this.props.items.length - 1;

            startX += outerDistance * index / length;

            // 最左和最右，向内收缩半径的距离，不超过 innertDistance 的滑动区域
            if (index === 0) {

                startX += delta;
            } else if (index === length) {

                startX -= delta;
            }

            return startX;
        }
    }, {
        key: '$renderTitle',
        value: function $renderTitle() {
            var uiTitle = this.props.uiTitle;


            if (!uiTitle) {

                return null;
            }

            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.title },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.titleText },
                    uiTitle
                )
            );
        }
    }, {
        key: '$renderSliderValue',
        value: function $renderSliderValue() {
            var _props = this.props,
                themeColor = _props.themeColor,
                items = _props.items;
            var _state = this.state,
                index = _state.index,
                pressing = _state.pressing;


            var sliderValue = items[index].label;

            // 滑动值显示的一半长度，估算
            var sliderValueWidth = sliderValue.length * 16 / 2;

            // 跟随滑动计算出位移
            var translateX = this.$getExactPositionX(-outerDistance / 2, index);

            // 确保位移不超出限制
            if (translateX + sliderValueWidth > translateLimit) {

                translateX = translateLimit - sliderValueWidth;
            } else if (translateX - sliderValueWidth < -translateLimit) {

                translateX = -translateLimit + sliderValueWidth;
            }

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.sliderValue, {
                        transform: [{ translateX: translateX }],
                        opacity: pressing ? 1 : 0
                    }] },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.sliderValueText, { color: themeColor }] },
                    sliderValue
                )
            );
        }

        // 实例化 panHandlers，只初始化一次

    }, {
        key: '$onDotPress',
        value: function $onDotPress(index) {
            var _props2 = this.props,
                disabled = _props2.disabled,
                onValueChange = _props2.onValueChange,
                onSlidingComplete = _props2.onSlidingComplete;


            if (disabled) {

                return;
            }

            var lastIndex = this.state.index;


            if (index !== lastIndex) {

                this.setState({ index: index });

                onValueChange(index);
            }

            onSlidingComplete(index);
        }
    }, {
        key: '$renderSliderBar',
        value: function $renderSliderBar() {
            var _this2 = this;

            var _props3 = this.props,
                themeColor = _props3.themeColor,
                disabled = _props3.disabled,
                items = _props3.items;
            var _state2 = this.state,
                index = _state2.index,
                pressing = _state2.pressing;

            // 计算出可触摸范围

            var touchWidth = Math.round((translateLimit * 2 - deltaPaddingWidth * 2 - 24) / (items.length - 1));

            // 可触摸范围宽度，最小 40，最大 80
            if (touchWidth < 40) {

                touchWidth = 40;
            } else if (touchWidth > 80) {

                touchWidth = 80;
            }

            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.sliderBar },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.barBody },
                    items.map(function (item, index) {
                        return _react2.default.createElement(_reactNative.View, { key: index, style: styles.barBodyDot });
                    }),
                    disabled ? _react2.default.createElement(_reactNative.View, { style: styles.barBodyCover }) : null
                ),
                items.map(function (item, index) {
                    return _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            key: index,
                            style: [styles.barDotTouch, {
                                width: touchWidth,
                                left: _this2.$getExactPositionX(-2 + deltaPaddingWidth, index) - (touchWidth - 40) / 2
                            }],
                            activeOpacity: 1,
                            onPress: function onPress() {
                                return _this2.$onDotPress(index);
                            }
                        },
                        _react2.default.createElement(_reactNative.View, { style: styles.barDotTouchContent })
                    );
                }),
                _react2.default.createElement(
                    _reactNative.View,
                    _extends({ style: [styles.barTouch, {
                            width: touchWidth,
                            left: this.$getExactPositionX(-2 + deltaPaddingWidth, index) - (touchWidth - 40) / 2
                        }] }, this.$panHandlers),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.barTouchContent },
                        _react2.default.createElement(_reactNative.View, { style: [styles.barTouchCircle, { backgroundColor: themeColor }] }),
                        pressing || disabled ? _react2.default.createElement(_reactNative.View, { style: [styles.barTouchCover, pressing ? { backgroundColor: 'rgba(0, 0, 0, 0.1)' } : null, disabled ? { backgroundColor: 'rgba(255, 255, 255, 0.6)' } : null] }) : null
                    )
                )
            );
        }
    }, {
        key: '$renderSliderDesc',
        value: function $renderSliderDesc() {
            var _this3 = this;

            var _props4 = this.props,
                themeColor = _props4.themeColor,
                items = _props4.items;
            var selectedIndex = this.state.index;


            var length = items.length - 1;

            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.sliderDesc },
                items.map(function (item, index) {
                    return _react2.default.createElement(
                        _reactNative.View,
                        { key: index, style: [styles.sliderDescItem, index === 0 ? { left: 16 + deltaPaddingWidth, alignItems: 'flex-start' } : null, index === length ? { right: 16 + deltaPaddingWidth, alignItems: 'flex-end' } : null, index !== 0 && index !== length ? { left: _this3.$getExactPositionX(16 + deltaPaddingWidth + 2 - 100 / 2, index) } : null] },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [styles.sliderDescText, index === selectedIndex ? {
                                    fontSize: 12,
                                    fontWeight: 'bold',
                                    color: themeColor
                                } : null] },
                            item.label
                        )
                    );
                })
            );
        }
    }, {
        key: 'render',
        value: function render() {

            // 组件容器样式，只支持有限定制
            var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(this.props.style || {}),
                _StyleSheet$flatten$m = _StyleSheet$flatten.marginTop,
                marginTop = _StyleSheet$flatten$m === undefined ? 0 : _StyleSheet$flatten$m,
                _StyleSheet$flatten$m2 = _StyleSheet$flatten.marginBottom,
                marginBottom = _StyleSheet$flatten$m2 === undefined ? 0 : _StyleSheet$flatten$m2,
                _StyleSheet$flatten$b = _StyleSheet$flatten.borderTopWidth,
                borderTopWidth = _StyleSheet$flatten$b === undefined ? 0 : _StyleSheet$flatten$b,
                _StyleSheet$flatten$b2 = _StyleSheet$flatten.borderBottomWidth,
                borderBottomWidth = _StyleSheet$flatten$b2 === undefined ? 0 : _StyleSheet$flatten$b2,
                borderColor = _StyleSheet$flatten.borderColor,
                borderTopColor = _StyleSheet$flatten.borderTopColor,
                borderBottomColor = _StyleSheet$flatten.borderBottomColor;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, {
                        marginTop: marginTop, marginBottom: marginBottom,
                        borderTopWidth: borderTopWidth, borderBottomWidth: borderBottomWidth,
                        borderColor: borderColor, borderTopColor: borderTopColor, borderBottomColor: borderBottomColor
                    }] },
                this.$renderTitle(),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.slider },
                    this.$renderSliderValue(),
                    this.$renderSliderBar(),
                    this.$renderSliderDesc()
                )
            );
        }
    }]);

    return SliderPick;
}(_react.Component);

SliderPick.propTypes = {
    themeColor: _propTypes2.default.string, // 主题色
    uiTitle: _propTypes2.default.string, // 标题
    disabled: _propTypes2.default.bool, // 是否禁用

    // 每个档位的 value 值和 label
    // 必传，且长度要大于 1
    items: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
        label: _propTypes2.default.string.isRequired
    })).isRequired,

    value: _propTypes2.default.oneOfType([// 当前选择的档位值
    _propTypes2.default.number, _propTypes2.default.string]),
    onValueChange: _propTypes2.default.func, // 新增属性，滑动中，或者点击时触发
    onSlidingComplete: _propTypes2.default.func // 结束滑动，或者点击后触发
    // style 相关的属性全部废弃
};
SliderPick.defaultProps = {
    themeColor: '#1fc8a2',
    uiTitle: '',
    disabled: false,
    onValueChange: noop,
    onSlidingComplete: noop
};
exports.default = SliderPick;


var styles = _reactNative.StyleSheet.create({
    body: {
        backgroundColor: '#fff'
    },

    title: {
        height: 33,
        paddingTop: 12,
        paddingLeft: 16
    },
    titleText: {
        height: 20,
        lineHeight: 20,
        fontSize: 14,
        fontWeight: 'bold',
        color: '#333'
    },

    slider: {
        height: 100,
        paddingTop: 12
    },

    sliderValue: {
        height: 22,
        alignItems: 'center',
        justifyContent: 'center'
    },
    sliderValueText: {
        fontSize: 16,
        color: '#1fc8a2'
    },

    sliderBar: {
        position: 'relative',
        height: 30,
        marginTop: 3,
        paddingRight: 16 + deltaPaddingWidth,
        paddingLeft: 16 + deltaPaddingWidth,
        justifyContent: 'center'
    },

    barBody: {
        position: 'relative',
        height: 4,
        borderRadius: 2,
        backgroundColor: '#ededed',
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between'
    },
    barBodyDot: {
        width: 4,
        height: 4,
        borderRadius: 2,
        backgroundColor: '#ccc'
    },
    barBodyCover: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        borderRadius: 2,
        backgroundColor: 'rgba(255, 255, 255, 0.6)'
    },

    barDotTouch: {
        position: 'absolute',
        top: 0,
        left: 8,
        width: 40,
        height: 30
    },
    barDotTouchContent: {
        flex: 1
    },

    barTouch: {
        position: 'absolute',
        top: 0,
        left: 8,
        width: 40,
        height: 30,
        alignItems: 'center',
        justifyContent: 'center'
    },
    barTouchContent: {
        position: 'relative',
        width: 24,
        height: 24,
        borderRadius: 12,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center'
    },
    barTouchCircle: {
        width: 20,
        height: 20,
        borderRadius: 10,
        backgroundColor: '#1fc8a2'
    },
    barTouchCover: {
        position: 'absolute',
        top: 2,
        right: 2,
        bottom: 2,
        left: 2,
        borderRadius: 10
    },

    sliderDesc: {
        position: 'relative',
        height: 14,
        marginTop: 3
    },
    sliderDescItem: {
        position: 'absolute',
        top: 0,
        width: 100,
        height: 14,
        alignItems: 'center',
        justifyContent: 'center',
        overflow: 'hidden'
    },
    sliderDescText: {
        fontSize: 10,
        color: '#333'
    }
});