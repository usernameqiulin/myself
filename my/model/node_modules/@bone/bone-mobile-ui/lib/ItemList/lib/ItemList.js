'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ItemView = require('./ItemView');

var _ItemView2 = _interopRequireDefault(_ItemView);

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// 新设计中，leftCheck 废弃，leftCheck 与 rightCheck 一致
var typeCheckable = {
    list: false,
    leftCheck: true,
    rightCheck: true
};

var ItemList = function (_Component) {
    _inherits(ItemList, _Component);

    function ItemList() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ItemList);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ItemList.__proto__ || Object.getPrototypeOf(ItemList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            dataSource: _this.$getDataSource(_this.props)
        }, _this.$onItemPress = function (data) {
            var _this$props = _this.props,
                disabled = _this$props.disabled,
                onClickBefore = _this$props.onClickBefore,
                onItemClick = _this$props.onItemClick;

            // 其实在 ItemView 中，已经判断了是否禁用
            // 这里再做判断，这样以后如果换人维护，出错的可能性会降低些许

            if (disabled || data.status === -1) {

                return;
            }

            // 参数仿照 ^1.0.0 版本 数据结构
            // 询问是否要响应点击，并改变状态
            // ^1.0.0 这里是返回 true，则禁用点击响应...
            if (onClickBefore && onClickBefore(new _Item2.default(data), _this.$getHighLightData()) === true) {

                return;
            }

            // 改变状态
            var newData = _this.$getStatusUpdatedData(data);

            // 参数仿照 ^1.0.0 版本 数据结构
            onItemClick && onItemClick(new _Item2.default(newData), _this.$getHighLightData());
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ItemList, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {

            this.setState({
                dataSource: this.$getDataSource(nextProps)
            });
        }

        // 是否支持选择

    }, {
        key: '$getDataSource',


        // 根据 dataSource，status，type & isMultiple 属性重组 dataSource
        // 再赋予至 state
        value: function $getDataSource(props) {
            var status = props.status,
                dataSource = props.dataSource;


            var isMultiple = !!props.isMultiple,
                checkable = this.$checkable;

            var itemStatus = void 0,
                oneActivated = false;

            return dataSource.map(function (item, index) {

                if (status[index] !== undefined) {

                    itemStatus = status[index];
                } else if (item.status !== undefined) {

                    itemStatus = item.status;
                } else {

                    itemStatus = 0;
                }

                // 可选择情况，需要注意单选的特例
                if (checkable) {

                    // 单选情况下，只允许一个 status 为 1
                    if (!isMultiple && oneActivated && itemStatus === 1) {

                        itemStatus = 0;
                    }

                    // 标记已有 status 为 1 的项
                    if (itemStatus === 1) {

                        oneActivated = true;
                    }
                }
                // 不可选择，则只有 -1 有禁用效果
                else {

                        itemStatus = itemStatus === -1 ? itemStatus : 0;
                    }

                return _extends({}, item, {
                    status: itemStatus,
                    key: index,
                    index: index,
                    checkable: checkable
                });
            });
        }
    }, {
        key: '$getStatusUpdatedData',


        // 根据点击项的数据，改变状态，并返回新数据
        value: function $getStatusUpdatedData(data) {
            var dataSource = this.state.dataSource;


            var isMultiple = !!this.props.isMultiple,
                checkable = this.$checkable;

            var newData = _extends({}, data),
                newDataSource = [];

            // 不可选择，组件本身状态不会发生变化
            if (!checkable) {

                return newData;
            }

            if (data.status === 0) {

                newData.status = 1;
            } else if (data.status === 1) {

                newData.status = 0;
            }

            dataSource.forEach(function (item) {

                if (item.index === newData.index) {

                    newDataSource.push(newData);
                } else {

                    var newItem = _extends({}, item);

                    if (!isMultiple && newData.status === 1 && newItem.status !== -1) {

                        newItem.status = 0;
                    }

                    newDataSource.push(newItem);
                }
            });

            // 更新所有 item 的 status
            this.setState({
                dataSource: newDataSource
            });

            return newData;
        }

        // 获取当前所有的高亮项的数据

    }, {
        key: '$getHighLightData',
        value: function $getHighLightData() {
            var dataSource = this.state.dataSource;


            var result = {};

            dataSource.forEach(function (item) {

                if (item.status === 1) {

                    result[item.key] = new _Item2.default(item); // 仿照 ^1.0.0 版本 数据结构
                }
            });

            return result;
        }
    }, {
        key: '$renderListItems',
        value: function $renderListItems() {
            var _this2 = this;

            var _props = this.props,
                themeColor = _props.themeColor,
                disabled = _props.disabled,
                checkIcon = _props.checkIcon,
                uncheckIcon = _props.uncheckIcon;
            var dataSource = this.state.dataSource;


            var length = dataSource.length;

            return dataSource.map(function (data, index) {
                return _react2.default.createElement(_ItemView2.default, {
                    key: index,
                    data: data,
                    disabled: disabled,
                    themeColor: themeColor,
                    onPress: _this2.$onItemPress,
                    hasBorder: index !== length - 1,
                    checkIcon: checkIcon,
                    uncheckIcon: uncheckIcon
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {

            // 组件容器样式，只支持有限定制
            var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(this.props.style || {}),
                _StyleSheet$flatten$m = _StyleSheet$flatten.marginTop,
                marginTop = _StyleSheet$flatten$m === undefined ? 0 : _StyleSheet$flatten$m,
                _StyleSheet$flatten$m2 = _StyleSheet$flatten.marginBottom,
                marginBottom = _StyleSheet$flatten$m2 === undefined ? 0 : _StyleSheet$flatten$m2,
                _StyleSheet$flatten$b = _StyleSheet$flatten.borderTopWidth,
                borderTopWidth = _StyleSheet$flatten$b === undefined ? 0 : _StyleSheet$flatten$b,
                _StyleSheet$flatten$b2 = _StyleSheet$flatten.borderBottomWidth,
                borderBottomWidth = _StyleSheet$flatten$b2 === undefined ? 0 : _StyleSheet$flatten$b2,
                borderColor = _StyleSheet$flatten.borderColor,
                borderTopColor = _StyleSheet$flatten.borderTopColor,
                borderBottomColor = _StyleSheet$flatten.borderBottomColor;

            return _react2.default.createElement(
                _reactNative.View,
                { style: {
                        marginTop: marginTop, marginBottom: marginBottom,
                        borderTopWidth: borderTopWidth, borderBottomWidth: borderBottomWidth,
                        borderColor: borderColor, borderTopColor: borderTopColor, borderBottomColor: borderBottomColor
                    } },
                this.$renderListItems()
            );
        }
    }, {
        key: '$checkable',
        get: function get() {
            var type = this.props.type;

            // 开发者未指定 isMultiple，type 只能是 list

            if (!('isMultiple' in this.props)) {

                type = 'list';
            }

            return typeCheckable[type];
        }
    }]);

    return ItemList;
}(_react.Component);

ItemList.propTypes = {
    themeColor: _propTypes2.default.string, // 新属性，主题色，只生效于列表可选择时，选择按钮的颜色
    // uiTitle 废弃
    disabled: _propTypes2.default.bool, // 是否全局禁用
    isMultiple: _propTypes2.default.bool, // 是否是多选，只有此属性指定，type 属性才生效，否则 type 只能是 list
    type: _propTypes2.default.oneOf([// 列表类型，纯列表或者可选择
    'list', 'leftCheck', // 新设计中，leftCheck 废弃，设置成和 rightCheck 一致
    'rightCheck']),
    checkIcon: _propTypes2.default.string, // 列表可选择时，选中状态显示的图标
    uncheckIcon: _propTypes2.default.string, // 列表可选择时，未选中状态显示的图标
    status: _propTypes2.default.arrayOf(_propTypes2.default.oneOf([-1, 0, 1])), // 所有列表项的状态
    dataSource: _propTypes2.default.arrayOf(_propTypes2.default.shape({ // 列表项的数据源
        name: _propTypes2.default.string, // 主标题
        subtitle: _propTypes2.default.string, // 副标题
        subTitleColor: _propTypes2.default.string, // 新属性，副标题颜色，默认 #999
        rightTitle: _propTypes2.default.string, // 右侧注释标题
        rightTitleColor: _propTypes2.default.string, // 新属性，右侧注释标题颜色，默认 #999
        leftIcon: _propTypes2.default.string, // 新设计中，leftIcon 废弃，设置成 rightIcon
        rightIcon: _propTypes2.default.string, // 右侧 icon，优先级高于 leftIcon
        value: _propTypes2.default.oneOfType([// 开发者指定的 value 值
        _propTypes2.default.string, _propTypes2.default.number]),
        status: _propTypes2.default.oneOf([-1, 0, 1]) // 列表项的状态
    })),
    // return true，则阻止默认点击响应
    // 老组件这里的设计竟然不一致啊... 有些是 return false，有些是 return true
    // 好吧，真是心疼使用组件的开发者，但是为了保持接口不变，只能沿用 return true 了...
    onClickBefore: _propTypes2.default.func,
    onItemClick: _propTypes2.default.func
};
ItemList.defaultProps = {
    themeColor: '#1fc8a2',
    disabled: false,
    // isMultiple 不能有默认值，要根据是否指定做一些判断...
    type: 'list',
    checkIcon: '&#x3071;',
    uncheckIcon: '&#x3081;',
    status: [],
    dataSource: []
};
exports.default = ItemList;