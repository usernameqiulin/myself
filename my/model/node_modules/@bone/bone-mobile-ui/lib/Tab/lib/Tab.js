'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _TabItem = require('./TabItem');

var _TabItem2 = _interopRequireDefault(_TabItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var Tab = function (_Component) {
    _inherits(Tab, _Component);

    function Tab() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Tab);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tab.__proto__ || Object.getPrototypeOf(Tab)).call.apply(_ref, [this].concat(args))), _this), _this.$onTabItemPress = function (value) {
            var _this$props = _this.props,
                selectedIndex = _this$props.selectedIndex,
                values = _this$props.values,
                disabled = _this$props.disabled,
                onTabChange = _this$props.onTabChange;

            // 这里虽然在 TabItem 组件里已经判断过了，再判断一次，去除耦合，方便以后其他人维护

            if (disabled) {

                return;
            }

            var index = values.indexOf(value);

            // 这里同样也在 TabItem 组件里判断过了，也是去除耦合，方便以后其他人维护
            if (index === selectedIndex) {

                return;
            }

            // 这里沿用 ^1.0.0 版本的接口定义，虽然设计的不是很合理...
            // 参数是 value 值（而非 index 或者 key 之类的）...
            // 最终决定，做参数增量，增加 index 参数
            // onTabChange 只会在触摸其它未选中的 Tab 时触发
            onTabChange(value, index);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Tab, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps));
        }
    }, {
        key: '$renderTabs',
        value: function $renderTabs() {
            var _props = this.props,
                themeColor = _props.themeColor,
                selectedIndex = _props.selectedIndex,
                values = _props.values,
                disabled = _props.disabled;


            var i = 0,
                length = values.length,
                tabEls = [];

            for (; i < length; ++i) {

                tabEls.push(_react2.default.createElement(_TabItem2.default, {
                    key: i // 这里由于 values 结构过于简单（使用 ^1.0.0 设计，不会去改变），key 使用 index，而不是 value
                    , style: styles.tabItem,
                    themeColor: themeColor,
                    value: values[i],
                    disabled: disabled,
                    onPress: this.$onTabItemPress,
                    selected: selectedIndex === i,
                    index: i,
                    totalItemCount: length
                }));
            }

            return tabEls;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                _props2$style = _props2.style,
                style = _props2$style === undefined ? {} : _props2$style,
                disabled = _props2.disabled;

            // 组件容器样式，只支持有限定制

            var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(style),
                _StyleSheet$flatten$m = _StyleSheet$flatten.marginTop,
                marginTop = _StyleSheet$flatten$m === undefined ? 0 : _StyleSheet$flatten$m,
                _StyleSheet$flatten$m2 = _StyleSheet$flatten.marginBottom,
                marginBottom = _StyleSheet$flatten$m2 === undefined ? 0 : _StyleSheet$flatten$m2,
                _StyleSheet$flatten$b = _StyleSheet$flatten.borderTopWidth,
                borderTopWidth = _StyleSheet$flatten$b === undefined ? 0 : _StyleSheet$flatten$b,
                _StyleSheet$flatten$b2 = _StyleSheet$flatten.borderBottomWidth,
                borderBottomWidth = _StyleSheet$flatten$b2 === undefined ? 0 : _StyleSheet$flatten$b2,
                borderColor = _StyleSheet$flatten.borderColor,
                borderTopColor = _StyleSheet$flatten.borderTopColor,
                borderBottomColor = _StyleSheet$flatten.borderBottomColor;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, {
                        marginTop: marginTop, marginBottom: marginBottom,
                        borderTopWidth: borderTopWidth, borderBottomWidth: borderBottomWidth,
                        borderColor: borderColor, borderTopColor: borderTopColor, borderBottomColor: borderBottomColor
                    }] },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.container },
                    this.$renderTabs()
                )
            );
        }
    }]);

    return Tab;
}(_react.Component);

Tab.propTypes = {
    themeColor: _propTypes2.default.string, // 主题色
    selectedIndex: _propTypes2.default.number, // 选中 Tab index
    values: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired, // Tab 内容
    disabled: _propTypes2.default.bool, // 新增属性，是否禁用
    onTabChange: _propTypes2.default.func // 切换 Tab 时的回调
    // tintColor & customStyle 属性废弃
};
Tab.defaultProps = {
    themeColor: '#1fc8a2',
    selectedIndex: 0,
    disabled: false,
    onTabChange: noop
};
exports.default = Tab;


var styles = _reactNative.StyleSheet.create({
    body: {
        height: 66,
        paddingLeft: 16,
        paddingRight: 16,
        backgroundColor: '#fff',
        justifyContent: 'center'
    },
    container: {
        position: 'relative',
        height: 34,
        flexDirection: 'row'
    },
    tabItem: {
        flex: 1
    }
});