/**
 * @akModule AKToast
 * @desciption
 * @aliplus.com
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import cx from 'classnames';

var TextRow = function (_React$Component) {
    _inherits(TextRow, _React$Component);

    function TextRow() {
        _classCallCheck(this, TextRow);

        return _possibleConstructorReturn(this, (TextRow.__proto__ || Object.getPrototypeOf(TextRow)).apply(this, arguments));
    }

    _createClass(TextRow, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                maxHeight = _props.maxHeight,
                color = _props.color,
                invisible = _props.invisible,
                style = _props.style;


            var defaultStyle = {
                width: _reactNative.Dimensions.get('window').width,
                height: 8,
                backgroundColor: color || "#F0F0F0"
            };

            var Aflex = style.flex || 1;
            var Bflex = 1 - Aflex;
            var opacity = invisible ? 1 : 0;
            // console.log(Aflex, Bflex, opacity);
            if (!invisible) {
                return _react2.default.createElement(_reactNative.View, { style: {
                        opacity: 1,
                        height: 8,
                        flexDirection: 'row',
                        backgroundColor: 'transparent'
                    } });
            }
            return _react2.default.createElement(
                _reactNative.View,
                { style: {
                        // width: invisible ? 0 : (style.width || defaultStyle.width),
                        opacity: invisible ? 1 : 0,
                        height: 8,
                        flexDirection: 'row',
                        backgroundColor: 'transparent'
                    } },
                _react2.default.createElement(_reactNative.View, { style: {
                        // width: invisible ? 0 : (style.width || defaultStyle.width),
                        // opacity : invisible ? 1 : 0,
                        flex: Aflex,
                        height: 8,
                        backgroundColor: defaultStyle.backgroundColor
                    } }),
                _react2.default.createElement(_reactNative.View, { style: {
                        // width: invisible ? 0 : (style.width || defaultStyle.width),
                        // opacity : invisible ? 1 : 0,
                        flex: Bflex,
                        height: 8,
                        backgroundColor: 'transparent'
                    } })
            )
            //   <div
            //     className={cx('text-row', className, { invisible })}
            //     style={{
            //       ...defaultStyle,
            //       ...style,
            //       width: invisible ? 0 : (style.width || defaultStyle.width)
            //     }}
            //   />
            ;
        }
    }]);

    return TextRow;
}(_react2.default.Component);

/**
Example:

<AKPlaceholder
    ready={false}
    type='textRow'
    invisible={true}
    style={{ marginTop: 10}}
    color='#CC0000'>
    <View><Text>aaaa</Text></View>
</AKPlaceholder>

*/


TextRow.propTypes = {
    invisible: _react2.default.PropTypes.bool,
    color: _react2.default.PropTypes.string
};
TextRow.defaultProps = {
    style: {}
};
exports.default = TextRow;