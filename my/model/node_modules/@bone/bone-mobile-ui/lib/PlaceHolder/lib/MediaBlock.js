/**
 * @akModule AKToast
 * @desciption
 * @aliplus.com
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _TextBlock = require('./TextBlock');

var _TextBlock2 = _interopRequireDefault(_TextBlock);

var _RoundShape = require('./RoundShape');

var _RoundShape2 = _interopRequireDefault(_RoundShape);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MediaBlock = function (_React$Component) {
    _inherits(MediaBlock, _React$Component);

    function MediaBlock() {
        _classCallCheck(this, MediaBlock);

        return _possibleConstructorReturn(this, (MediaBlock.__proto__ || Object.getPrototypeOf(MediaBlock)).apply(this, arguments));
    }

    _createClass(MediaBlock, [{
        key: 'renderRow',
        value: function renderRow(rowIdx, width, color, itemRow) {
            var key = 'akps-media-' + rowIdx;
            return _react2.default.createElement(
                _reactNative.View,
                {
                    key: key,
                    style: [{
                        flex: 1,
                        flexDirection: 'row'
                    }] },
                _react2.default.createElement(_RoundShape2.default, { color: color, width: width, style: {
                        marginLeft: 10,
                        width: width
                    } }),
                _react2.default.createElement(_TextBlock2.default, { color: color, rows: itemRow, style: {
                        flex: 1
                    } })
            );
        }
    }, {
        key: 'getRows',
        value: function getRows() {
            var _props = this.props,
                width = _props.width,
                style = _props.style,
                color = _props.color,
                rows = _props.rows,
                itemRow = _props.itemRow;

            var self = this;

            var range = Array.apply(null, { length: rows });
            return range.map(function (x, rowIdx) {
                return self.renderRow(rowIdx, width, color, itemRow);
            });
            // return rowsElement;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                width = _props2.width,
                style = _props2.style,
                color = _props2.color,
                rows = _props2.rows,
                itemRow = _props2.itemRow;


            return _react2.default.createElement(
                _reactNative.View,
                { style: [style, {
                        flex: 1,
                        flexDirection: 'column'
                    }] },
                this.getRows()
            );
        }
    }]);

    return MediaBlock;
}(_react2.default.Component);

/**

Example:

<AKPlaceholder
    ready={false}
    type='media'
    width={100}
    rows={4}
    style={{ marginTop: 10}}
    color='#F0F0F0'
>
    <View><Text>aaaa</Text></View>
</AKPlaceholder>

*/


MediaBlock.propTypes = {
    rows: _react2.default.PropTypes.number,
    color: _react2.default.PropTypes.string,
    itemRow: _react2.default.PropTypes.number,
    width: _react2.default.PropTypes.number
};
MediaBlock.defaultProps = {
    color: "#F0F0F0",
    itemRow: 4,
    rows: 1,
    width: 55
};
exports.default = MediaBlock;