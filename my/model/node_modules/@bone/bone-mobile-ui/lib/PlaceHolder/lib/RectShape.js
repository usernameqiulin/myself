/**
 * @akModule AKToast
 * @desciption
 * @aliplus.com
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RectShape = function (_React$Component) {
  _inherits(RectShape, _React$Component);

  function RectShape() {
    _classCallCheck(this, RectShape);

    return _possibleConstructorReturn(this, (RectShape.__proto__ || Object.getPrototypeOf(RectShape)).apply(this, arguments));
  }

  _createClass(RectShape, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          width = _props.width,
          style = _props.style,
          color = _props.color;


      var _width = width || 80;
      var defaultStyles = {
        backgroundColor: color || "#F0F0F0",
        marginRight: 10
      };

      return _react2.default.createElement(_reactNative.View, { style: _extends({}, defaultStyles, style, {
          width: _width,
          height: _width
        }) });
    }
  }]);

  return RectShape;
}(_react2.default.Component);

/**

<AKPlaceholder
    ready={false}
    type='rect'
    width={100}
    style={{ marginLeft: 10, marginTop: 10 }}
    color='#F0F0F0'
>
    <View><Text>aaaa</Text></View>
</AKPlaceholder>

*/


RectShape.propTypes = {
  color: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};
exports.default = RectShape;