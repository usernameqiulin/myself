'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _LocaleProvider = require('../../LocaleProvider');

var _LocaleProvider2 = _interopRequireDefault(_LocaleProvider);

var _StaticContainer = require('./StaticContainer');

var _StaticContainer2 = _interopRequireDefault(_StaticContainer);

var _SiblingsUpdater = require('./SiblingsUpdater');

var _SiblingsUpdater2 = _interopRequireDefault(_SiblingsUpdater);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = _reactNative.StyleSheet.create({
    container: {
        position: 'relative',
        flex: 1,
        height: _reactNative.Dimensions.get('window').height // 解决 Web 上的样式问题
    }
});

var updater = _reactNative.AppRegistry.rootSiblingsUpdater;

if (!(updater instanceof _SiblingsUpdater2.default)) {

    updater = new _SiblingsUpdater2.default();

    // inject modals into app entry component
    var originRegister = _reactNative.AppRegistry.registerComponent;

    _reactNative.AppRegistry.registerComponent = function (appKey, getAppComponent) {

        var siblings = new Map();

        var updates = new Set();

        return originRegister(appKey, function () {
            var _class, _temp2;

            var OriginAppComponent = getAppComponent();

            return _temp2 = _class = function (_Component) {
                _inherits(_class, _Component);

                function _class() {
                    var _ref;

                    var _temp, _this, _ret;

                    _classCallCheck(this, _class);

                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this.$update = function (id, element, callback) {

                        if (siblings.has(id) && !element) {

                            siblings.delete(id);
                        } else {

                            siblings.set(id, element);
                        }

                        updates.add(id);

                        _this.forceUpdate(callback);
                    }, _temp), _possibleConstructorReturn(_this, _ret);
                }

                _createClass(_class, [{
                    key: 'componentWillMount',
                    value: function componentWillMount() {

                        updater.onUpdate = this.$update;
                    }
                }, {
                    key: 'componentWillUnmount',
                    value: function componentWillUnmount() {

                        updater.onUpdate = null;

                        siblings.clear();

                        updates.clear();
                    }
                }, {
                    key: 'render',
                    value: function render() {

                        var elements = [];

                        siblings.forEach(function (element, id) {
                            return elements.push(_react2.default.createElement(
                                _StaticContainer2.default,
                                {
                                    key: 'root-sibling-' + id,
                                    shouldUpdate: updates.has(id)
                                },
                                element
                            ));
                        });

                        updates.clear();

                        return _react2.default.createElement(
                            _LocaleProvider2.default,
                            null,
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: styles.container },
                                _react2.default.createElement(
                                    _StaticContainer2.default,
                                    { shouldUpdate: false },
                                    _react2.default.createElement(OriginAppComponent, this.props)
                                ),
                                elements
                            )
                        );
                    }
                }]);

                return _class;
            }(_react.Component), _class.displayName = 'Root(' + appKey + ')', _temp2;
        });
    };

    _reactNative.AppRegistry.rootSiblingsUpdater = updater;
}

exports.default = updater;