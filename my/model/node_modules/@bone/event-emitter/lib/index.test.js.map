{"version":3,"sources":["../src/index.test.js"],"names":["beforeEach","target","Object","assign","test","expect","assertions","cb","arg1","arg2","toBe","on","emit","off","length","noexist","listeners","Array","isArray","toBeTruthy","listenerCount","one","twolisteners","input","sth","arg"],"mappings":"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","file":"index.test.js","sourcesContent":["import EventEmitter from './';\n\nbeforeEach(()=>{\n  const target = Object.assign({}, EventEmitter);\n})\n\ntest('test event-emitter: basic usage', ()=>{\n  const target = Object.assign({}, EventEmitter);\n\n  expect.assertions(2);\n\n  // basic event emit\n  const cb = (arg1, arg2)=>{\n    expect(arg1).toBe('arg1');\n    expect(arg2).toBe('arg2');\n  };\n  \n  target.on('test', cb);\n\n  target.emit('test', 'arg1', 'arg2');\n\n  target.off('test', cb);\n\n  target.emit('test', 'arg1', 'arg2');\n});\n\ntest('test event-emitter: off all callbacks', ()=>{\n  const target = Object.assign({}, EventEmitter);\n\n  expect.assertions(4);\n\n  const cb = (arg1, arg2)=>{\n    expect(arg1).toBe('arg1');\n    expect(arg2).toBe('arg2');\n  };\n  \n  target.on('test', cb);\n  target.on('test', cb);\n\n  target.emit('test', 'arg1', 'arg2');\n\n  target.off('test');\n\n  target.emit('test', 'arg1', 'arg2');\n});\n\ntest('test event-emitter: emit with no arg', ()=>{\n  const target = Object.assign({}, EventEmitter);\n\n  const cb = (...args)=>{\n    expect(args.length).toBe(0);\n  };\n\n  target.on('test', cb);\n  target.emit('test');\n});\n\ntest('test event-emitter: off/emit when queue is empty', ()=>{\n  const target = Object.assign({}, EventEmitter);\n\n  expect.assertions(0);\n  \n  target.emit('noexist', 'arg');\n  target.off('noexist');\n});\n\ntest('test event-emitter: listeners & listenersCount', ()=>{\n  const target = Object.assign({}, EventEmitter);\n\n  const noexist = target.listeners('noexist');\n  expect(Array.isArray(noexist)).toBeTruthy();\n  expect(noexist.length).toBe(0);\n  expect(target.listenerCount('noexist')).toBe(0);\n  \n  target.on('twolisteners', ()=>{});\n  target.one('twolisteners', ()=>{});\n  let twolisteners = target.listeners('twolisteners');\n  expect(Array.isArray(twolisteners)).toBeTruthy();\n  expect(twolisteners.length).toBe(2);\n  expect(target.listenerCount('twolisteners')).toBe(2);\n  \n  // emit once, one listener should be removed automatically\n  target.emit('twolisteners', 'arg');\n  expect(target.listenerCount('twolisteners')).toBe(1);\n\n  // emit twice, nothing changed\n  target.emit('twolisteners', 'arg');\n  expect(target.listenerCount('twolisteners')).toBe(1);\n\n  // remove all\n  target.off('twolisteners');\n  twolisteners = target.listeners('twolisteners');\n  expect(Array.isArray(twolisteners)).toBeTruthy();\n  expect(twolisteners.length).toBe(0);\n  expect(target.listenerCount('twolisteners')).toBe(0);\n});\n\ntest('test event-emitter: one', ()=>{\n  const target = Object.assign({}, EventEmitter);\n\n  expect.assertions(2);\n\n  // the original queue may change during the emitting\n  // e.g. \n  //  target.one(evt, callback1);\n  //  target.on(evt, callback2);\n  //  target.emit(evt) // may lead to error\n  const input = { sth: 'something' };\n  target.one('one', (arg)=>{\n    expect(arg).toBe(input);\n  });\n  \n  target.on('one', (arg)=>{\n    expect(arg).toBe(input);\n  });\n  \n  target.emit('one', input);\n});"]}