'use strict';

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

beforeEach(function () {
  var target = Object.assign({}, _2.default);
});

test('test event-emitter: basic usage', function () {
  var target = Object.assign({}, _2.default);

  expect.assertions(2);

  // basic event emit
  var cb = function cb(arg1, arg2) {
    expect(arg1).toBe('arg1');
    expect(arg2).toBe('arg2');
  };

  target.on('test', cb);

  target.emit('test', 'arg1', 'arg2');

  target.off('test', cb);

  target.emit('test', 'arg1', 'arg2');
});

test('test event-emitter: off all callbacks', function () {
  var target = Object.assign({}, _2.default);

  expect.assertions(4);

  var cb = function cb(arg1, arg2) {
    expect(arg1).toBe('arg1');
    expect(arg2).toBe('arg2');
  };

  target.on('test', cb);
  target.on('test', cb);

  target.emit('test', 'arg1', 'arg2');

  target.off('test');

  target.emit('test', 'arg1', 'arg2');
});

test('test event-emitter: emit with no arg', function () {
  var target = Object.assign({}, _2.default);

  var cb = function cb() {
    expect(arguments.length).toBe(0);
  };

  target.on('test', cb);
  target.emit('test');
});

test('test event-emitter: off/emit when queue is empty', function () {
  var target = Object.assign({}, _2.default);

  expect.assertions(0);

  target.emit('noexist', 'arg');
  target.off('noexist');
});

test('test event-emitter: listeners & listenersCount', function () {
  var target = Object.assign({}, _2.default);

  var noexist = target.listeners('noexist');
  expect(Array.isArray(noexist)).toBeTruthy();
  expect(noexist.length).toBe(0);
  expect(target.listenerCount('noexist')).toBe(0);

  target.on('twolisteners', function () {});
  target.one('twolisteners', function () {});
  var twolisteners = target.listeners('twolisteners');
  expect(Array.isArray(twolisteners)).toBeTruthy();
  expect(twolisteners.length).toBe(2);
  expect(target.listenerCount('twolisteners')).toBe(2);

  // emit once, one listener should be removed automatically
  target.emit('twolisteners', 'arg');
  expect(target.listenerCount('twolisteners')).toBe(1);

  // emit twice, nothing changed
  target.emit('twolisteners', 'arg');
  expect(target.listenerCount('twolisteners')).toBe(1);

  // remove all
  target.off('twolisteners');
  twolisteners = target.listeners('twolisteners');
  expect(Array.isArray(twolisteners)).toBeTruthy();
  expect(twolisteners.length).toBe(0);
  expect(target.listenerCount('twolisteners')).toBe(0);
});

test('test event-emitter: one', function () {
  var target = Object.assign({}, _2.default);

  expect.assertions(2);

  // the original queue may change during the emitting
  // e.g. 
  //  target.one(evt, callback1);
  //  target.on(evt, callback2);
  //  target.emit(evt) // may lead to error
  var input = { sth: 'something' };
  target.one('one', function (arg) {
    expect(arg).toBe(input);
  });

  target.on('one', function (arg) {
    expect(arg).toBe(input);
  });

  target.emit('one', input);
});
//# sourceMappingURL=index.test.js.map