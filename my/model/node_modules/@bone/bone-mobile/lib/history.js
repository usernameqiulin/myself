'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHistory = createHistory;
exports.removeHistory = removeHistory;
exports.createHistoryAPI = createHistoryAPI;

var _reactRouterRedux = require('react-router-redux');

var _history2 = require('history');

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _logger = require('@bone/logger');

var _logger2 = _interopRequireDefault(_logger);

var _globals = require('./globals');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _logger2.default)('bone-mobile', {
  label: ['framework', 'framework/history']
});

// singleton
var history = null;
var action = 'INIT';

/**
 * @param {String} historyMode  history模式
 * @param {String} initialEntry  默认入口
 */
function createHistory() {
  var historyMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hash';
  var initialEntry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';

  // history is singleton
  (0, _invariant2.default)(!history, 'history has been created already');

  var mode = historyMode;

  // react-native use memory history only
  if (_globals.isRN) {
    mode = 'memory';
  }

  // create history
  switch (mode) {
    case 'browser':
      history = (0, _history2.createBrowserHistory)();
      break;
    case 'memory':
      history = (0, _history2.createMemoryHistory)({
        initialEntries: [initialEntry]
      });
      break;
    case 'hash':
    default:
      history = (0, _history2.createHashHistory)();
  }

  history.mode = mode;

  log.info('history has been created, mode is ' + mode + ', initialEntry is ' + initialEntry);
  return history;
}

// only works in test env
function removeHistory() {
  log.warn('removing history');

  if (_globals.env === 'test') {
    history = null;
  }
}

function createHistoryAPI(store) {
  return {
    get length() {
      return history.length;
    },

    get location() {
      return history.location;
    },

    get action() {
      return action;
    },

    createHref: function createHref() {
      var _history;

      return (_history = history).createHref.apply(_history, arguments);
    },
    push: function push() {
      action = 'PUSH';
      store.dispatch(_reactRouterRedux.push.apply(undefined, arguments));
    },
    replace: function replace() {
      action = 'REPLACE';
      store.dispatch(_reactRouterRedux.replace.apply(undefined, arguments));
    },
    go: function go() {
      action = 'POP';
      store.dispatch(_reactRouterRedux.go.apply(undefined, arguments));
    },
    goBack: function goBack() {
      action = 'POP';
      store.dispatch(_reactRouterRedux.goBack.apply(undefined, arguments));
    },
    goForward: function goForward() {
      action = 'PUSH';
      store.dispatch(_reactRouterRedux.goForward.apply(undefined, arguments));
    }
  };
}