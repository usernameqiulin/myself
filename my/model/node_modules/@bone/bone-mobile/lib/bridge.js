'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BatchedBridge = require('react-native/Libraries/BatchedBridge/BatchedBridge');

var _BatchedBridge2 = _interopRequireDefault(_BatchedBridge);

var _reactNative = require('react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

var _logger = require('@bone/logger');

var _logger2 = _interopRequireDefault(_logger);

var _eventEmitter = require('@bone/event-emitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _globals = require('./globals');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var log = _logger2.default.create({
  module: 'bone-mobile',
  label: ['framework', 'framework/bridge']
});

var NATIVE_BRIDGE_SYMBOL = Symbol('nativeBridge');
var NativeModules = _reactNative2.default.NativeModules;

var VISIBILITY_VISIBLE = 'visible';
var VISIBILITY_HIDDEN = 'hidden';

var RNBridge = function () {
  function RNBridge() {
    _classCallCheck(this, RNBridge);

    this[NATIVE_BRIDGE_SYMBOL] = NativeModules.BoneBridge;

    // mixin event for bridge events
    Object.assign(this, _eventEmitter2.default);

    // 注册 Native 事件方法名和事件回调
    var method = '  boneEvent_' + String(Date.now()).substr(0, 6);
    var BoneEvent = _defineProperty({}, method, this.emit.bind(this));

    // 注册事件的回调方法名
    this[NATIVE_BRIDGE_SYMBOL] ? this[NATIVE_BRIDGE_SYMBOL].registerEventEntry(method) : log.warn('Can not Find NativeModules.BoneBridge');
    // 注册事件的回调模块
    _BatchedBridge2.default && _BatchedBridge2.default.registerCallableModule('BoneEvent', BoneEvent);
  }

  _createClass(RNBridge, [{
    key: 'call',
    value: function call(moduleName, methodName) {
      var _this = this;

      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var callback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};

      // @todo
      // native log appender would cause dead loop
      // const sn = Logger.sn();
      // log.debug(`module '${moduleName}' method'${methodName}' call(${sn})：`, args);
      var resCallback = function resCallback(err, res) {
        var error = err && err.extra ? err.extra : err;

        // log.debug(`[module '${moduleName}' method'${methodName}' res(${sn})：`, error || res);
        callback && callback.call(_this, error, error ? null : parser(moduleName, methodName, res));
      };
      this[NATIVE_BRIDGE_SYMBOL].call(moduleName, methodName, args, resCallback);
    }
  }, {
    key: 'ready',
    value: function ready() {
      try {
        var BoneBootStrap = NativeModules.BoneBootStrap;
        BoneBootStrap && BoneBootStrap.onSDKLoadCompleted();
      } catch (e) {
        throw new Error('sdk load error..');
      }
    }
  }]);

  return RNBridge;
}();

function parser(moduleName, methodName, res) {
  var parsers = {};

  return !parsers[moduleName] || !parsers[moduleName][methodName] ? res : parsers[moduleName][methodName](res);
}

var WebBridge = function () {
  function WebBridge() {
    _classCallCheck(this, WebBridge);

    this[NATIVE_BRIDGE_SYMBOL] = window.AlipayJSBridge;

    // mixin event for bridge events
    Object.assign(this, _eventEmitter2.default);
  }

  _createClass(WebBridge, [{
    key: 'call',
    value: function call(moduleName, methodName) {
      if (_globals.isAlipay && moduleName === 'BoneApp' && methodName === 'exit') {
        this[NATIVE_BRIDGE_SYMBOL].call('exitApp');
      }

      // do nothing in other containers
    }
  }, {
    key: 'ready',
    value: function ready() {
      var _this2 = this;

      // do event bindings

      // didResume & willPause
      var lastVisibilityState = document.visibilityState;

      document.addEventListener('visibilitychange', function () {
        var state = document.visibilityState;

        // check last state to prevent first render
        if (state === VISIBILITY_VISIBLE && lastVisibilityState === VISIBILITY_HIDDEN) {
          _this2.emit('didResume');
          lastVisibilityState = state;
        } else if (state === VISIBILITY_HIDDEN) {
          _this2.emit('willPause');
        }
      });
    }
  }]);

  return WebBridge;
}();

var bridge = _globals.isRN ? new RNBridge() : new WebBridge();

exports.default = bridge;