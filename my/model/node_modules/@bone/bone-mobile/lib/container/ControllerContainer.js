'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _boneMv = require('@bone/bone-mv');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ControllerContainer = function (_View) {
  _inherits(ControllerContainer, _View);

  function ControllerContainer() {
    _classCallCheck(this, ControllerContainer);

    return _possibleConstructorReturn(this, (ControllerContainer.__proto__ || Object.getPrototypeOf(ControllerContainer)).apply(this, arguments));
  }

  _createClass(ControllerContainer, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        parentView: this,
        page: this
      };
    }
  }]);

  return ControllerContainer;
}(_boneMv.View);

// patch for react.component
// expose controller/model properties & methods


ControllerContainer.childContextTypes = {
  parentView: _propTypes2.default.object,

  // page ref
  page: _propTypes2.default.object
};
exports.default = ControllerContainer;
(function () {
  var proto = _react.Component.prototype;
  var SYMBOl_MODEL = Symbol('model');

  _react.Component.contextTypes = {
    // @todo model shape
    parentView: _propTypes2.default.object
  };

  Object.defineProperty(proto, 'parentView', {
    get: function get() {
      return this.context.parentView;
    }
  });

  Object.defineProperty(proto, 'model', {
    get: function get() {
      return this[SYMBOl_MODEL] || this.parentView.model || this.props.model;
    },
    set: function set(model) {
      this[SYMBOl_MODEL] = model;
    }
  });

  Object.defineProperty(proto, 'actions', {
    get: function get() {
      return this.parentView.actions;
    }
  });

  Object.defineProperty(proto, 'page', {
    get: function get() {
      return this.parentView;
    }
  });

  proto.getState = function () {
    var _parentView;

    return (_parentView = this.parentView).getState.apply(_parentView, arguments);
  };
})();