'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _ControllerContainer2 = require('./ControllerContainer');

var _ControllerContainer3 = _interopRequireDefault(_ControllerContainer2);

var _navigation = require('../navigation');

var _navigation2 = _interopRequireDefault(_navigation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PageContainer = function (_ControllerContainer) {
  _inherits(PageContainer, _ControllerContainer);

  function PageContainer(props) {
    var _ref;

    _classCallCheck(this, PageContainer);

    for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = PageContainer.__proto__ || Object.getPrototypeOf(PageContainer)).call.apply(_ref, [this, props].concat(rest)));

    (0, _invariant2.default)(props, 'props is required when call super() in ' + _this.constructor.name);

    // 更新navigation current page
    // @todo 感觉还要优化navigation
    _navigation2.default.setCurrentPage(props.location.pathname, _this);
    return _this;
  }

  _createClass(PageContainer, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate() {
      var _this2 = this;

      var pageStack = _navigation2.default.stack;

      var renderPage = pageStack.find(function (item) {
        return item.page === _this2;
      });

      // 每次数据更新，只有栈顶的页面更新.
      // push 时，新页面实例缓存中还没有，无法判断navigation.currentPage，需检查当前Page实例是否在栈顶.
      if (pageStack.indexOf(renderPage) >= 0 && pageStack.indexOf(renderPage) !== pageStack.length - 1) {
        return false;
      }

      // pop 时，避免页面再退出前rerender
      if (_navigation2.default.currentPage && _navigation2.default.currentPage !== this) {
        return false;
      }

      return true;
    }

    // @todo 生命周期

  }, {
    key: 'pageWillLeave',
    value: function pageWillLeave() {} // 容器内通信，页面离开

  }, {
    key: 'pageDidBack',
    value: function pageDidBack() {} // 容器内通信，页面返回

  }, {
    key: 'willPause',
    value: function willPause() {}
  }, {
    key: 'didResume',
    value: function didResume() {}
  }, {
    key: 'location',
    get: function get() {
      return this.props.location;
    }
  }, {
    key: 'app',
    get: function get() {
      return this.props.app;
    }
  }, {
    key: 'navigation',
    get: function get() {
      return _navigation2.default;
    }
  }]);

  return PageContainer;
}(_ControllerContainer3.default);

exports.default = PageContainer;