'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactRouter = require('react-router');

var _reactRedux = require('react-redux');

var _reactNative = require('react-native');

var _typeDetect = require('type-detect');

var _typeDetect2 = _interopRequireDefault(_typeDetect);

var _navigation = require('../navigation');

var _navigation2 = _interopRequireDefault(_navigation);

var _Transition = require('../component/Transition');

var _Transition2 = _interopRequireDefault(_Transition);

var _constants = require('../config/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CachedRoute = function (_Component) {
  _inherits(CachedRoute, _Component);

  function CachedRoute(props, context) {
    _classCallCheck(this, CachedRoute);

    var _this = _possibleConstructorReturn(this, (CachedRoute.__proto__ || Object.getPrototypeOf(CachedRoute)).call(this, props, context));

    var _context$router = context.router,
        curRoute = _context$router.route,
        history = _context$router.history;

    var location = props.location || curRoute.location;

    var match = null;
    _this.routeMap = {};
    _this.pageInsts = {};
    props.routes.forEach(function (route) {
      // 遍历路由转化成Map
      _this.routeMap[route.path] = route;
      var path = route.path,
          strict = route.strict,
          sensitive = route.sensitive;

      var exact = route.exact !== undefined ? route.exact : true; // 默认为 true
      if (!match) {
        match = (0, _reactRouter.matchPath)(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive });
      }
    });

    if (match) {
      _this.state = {
        items: [{
          key: match.url,
          path: match.path,
          props: {
            location: location,
            history: history,
            match: match || {}
          }
        }]
      };
    } else {
      _this.state = {
        items: [{
          key: _constants.notFoundPath,
          path: _constants.notFoundPath,
          props: {
            location: location,
            history: history,
            match: match || {}
          }
        }]
      };
      _navigation2.default.notFound(_navigation2.default.params);
    }
    return _this;
  }

  _createClass(CachedRoute, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var items = this.state.items;
      var history = this.context.router.history;


      switch (history.action) {
        case 'PUSH':
          this.push(nextProps, items);break;
        case 'POP':
          this.pop(nextProps, items);break;
        case 'REPLACE':
          this.replace(nextProps, items);break;
        default:
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      // PUSH 动画
      var history = this.context.router.history;
      var items = this.state.items;
      var key = items[items.length - 1].key;


      if (history.action === 'PUSH') {
        this.pageInsts[key].show();
      } else if (history.action === 'REPLACE') {
        this.pageInsts[key].show(true);
      }
    }
  }, {
    key: 'push',
    value: function push(nextProps, items) {
      // PUSH
      var location = nextProps.location;
      var history = this.context.router.history;
      var _props = this.props,
          routes = _props.routes,
          lastLocation = _props.location;


      var match = null;

      routes.forEach(function (routeItem) {
        var path = routeItem.path,
            strict = routeItem.strict,
            sensitive = routeItem.sensitive;

        var exact = routeItem.exact !== undefined ? routeItem.exact : true; // 默认为 true
        if (!match) {
          match = routeItem.path ? (0, _reactRouter.matchPath)(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }) : null;
        }
      });

      if (match) {
        if (lastLocation.pathname === location.pathname) return; // 无法push自己

        // 此时 navigation.stack 已更新，页面未更新。
        // const lastPageIndex = navigation.stack.length - 2;
        // const currentPage = lastPageIndex >= 0 ? navigation.stack[lastPageIndex].page : null;
        // currentPage.pageWillLeave();

        this.setState({
          items: [].concat(_toConsumableArray(items)).concat([{ key: match.url, path: match.path, props: { location: location, history: history, match: match } }])
        });
      } else {
        // 重定向到错误页
        this.state.items.push({ key: _constants.notFoundPath, path: _constants.notFoundPath, props: { location: location, history: history, match: match } });
        _navigation2.default.notFound(_navigation2.default.params);
      }
    }
  }, {
    key: 'pop',
    value: function pop(nextProps, items) {
      var _this2 = this;

      var target = items.find(function (item) {
        return item.key === nextProps.location.pathname;
      });
      if (target) {
        var index = items.indexOf(target);
        if (index === items.length - 1) {
          return;
        }

        var step = items.length - 1 - index;

        if (step > 1) {
          // popTo 回退对个页面时，先将中间页面动画移出，避免界面闪动
          for (var ind = index + 1; ind < items.length - 1; ind++) {
            this.pageInsts[items[ind].key].hide(null, true);
          }
        }
        var location = _navigation2.default.currentPage.props.location;
        var popState = _navigation2.default.stack.length ? _navigation2.default.stack[_navigation2.default.stack.length - 1].popState : {};
        location.state = popState; // 只返回 pop 传递的未merge 的 state,
        _navigation2.default.currentPage && _navigation2.default.currentPage.pageDidBack(location);

        this.pageInsts[items[items.length - 1].key].hide(function () {
          _this2.setState({
            items: items.slice(0, index + 1)
          });
        });
      }
    }
  }, {
    key: 'replace',
    value: function replace(nextProps, items) {
      var location = nextProps.location;
      var history = this.context.router.history;
      var _props2 = this.props,
          routes = _props2.routes,
          lastLocation = _props2.location;


      var match = null;
      routes.forEach(function (routeItem) {
        var path = routeItem.path,
            strict = routeItem.strict,
            sensitive = routeItem.sensitive;

        var exact = routeItem.exact !== undefined ? routeItem.exact : true; // 默认为 true
        if (!match) {
          match = routeItem.path ? (0, _reactRouter.matchPath)(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }) : null;
        }
      });

      if (match) {
        if (lastLocation.pathname === location.pathname) return; // 无法replace自己
        this.setState({
          items: items.slice(0, items.length - 1).concat([{ key: match.url, path: match.path, props: { location: location, history: history, match: match } }])
        });
      } else {
        this.state.items.push({ key: _constants.notFoundPath, path: _constants.notFoundPath, props: { location: location, history: history, match: match } });
        _navigation2.default.notFound(_navigation2.default.params);
      }
    }
  }, {
    key: 'mapAnimationConf',
    value: function mapAnimationConf(animationProp) {
      if ((0, _typeDetect2.default)(animationProp) === 'Object') {
        return {
          animation: animationProp.type,
          duration: animationProp.duration
        };
      } else if ((0, _typeDetect2.default)(animationProp) === 'string') {
        return {
          animation: animationProp
        };
      }
      return {};
    }
  }, {
    key: 'queryParse',
    value: function queryParse(search) {
      if (!search) return {};
      var query = {};
      var querys = search.replace(/^\?/, '').split('&');
      querys.forEach(function (item) {
        var kv = item.split('=');
        query[kv[0]] = kv[1] ? decodeURIComponent(kv[1]) : '';
      });
      return query;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var items = this.state.items;


      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.fullscreen },
        items.map(function (item, index) {
          var animationProp = _this3.routeMap[item.path].animation;
          var animationConf = _this3.mapAnimationConf(animationProp);
          var navState = _navigation2.default.stack[index] && _navigation2.default.stack[index].state;
          var originLocation = item.props.location;
          var match = item.props.match || {};
          var location = {
            hash: originLocation.hash || '',
            search: originLocation.search || '',
            pathname: originLocation.pathname,
            params: match.params,
            query: _this3.queryParse(originLocation.search),
            state: navState || originLocation.state
          };

          return _react2.default.createElement(
            _Transition2.default,
            _extends({
              key: item.key,
              ref: function ref(page) {
                _this3.pageInsts[item.key] = page;
              },
              home: index === 0
            }, animationConf, {
              style: { zIndex: index * 10 }
            }),
            _react2.default.createElement(_this3.routeMap[item.path].page, {
              app: _this3.props.app,
              location: location
            })
          );
        })
      );
    }
  }]);

  return CachedRoute;
}(_react.Component);

CachedRoute.contextTypes = {
  router: _propTypes2.default.shape({
    route: _propTypes2.default.object.isRequired
  }).isRequired
};
CachedRoute.propTypes = {
  app: _propTypes2.default.object.isRequired,
  routes: _propTypes2.default.array.isRequired,
  location: _propTypes2.default.object.isRequired
};


var mapStateToProps = function mapStateToProps(state) {
  return { location: state.router.location };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps)(CachedRoute);


var styles = _reactNative.StyleSheet.create({
  fullscreen: {
    flex: 1,
    height: _reactNative.Dimensions.get('window').height
  }
});