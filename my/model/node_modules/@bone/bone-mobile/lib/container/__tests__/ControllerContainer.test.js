'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _enzyme = require('enzyme');

var _enzymeAdapterReact = require('enzyme-adapter-react-15.4');

var _enzymeAdapterReact2 = _interopRequireDefault(_enzymeAdapterReact);

var _jsdom = require('jsdom');

var _jsdom2 = _interopRequireDefault(_jsdom);

var _boneMv = require('@bone/bone-mv');

var _ControllerContainer2 = require('../ControllerContainer');

var _ControllerContainer3 = _interopRequireDefault(_ControllerContainer2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// setup file
var doc = _jsdom2.default.jsdom('<!doctype html><html><body></body></html>');
global.document = doc;
global.window = doc.defaultView;
(0, _enzyme.configure)({ adapter: new _enzymeAdapterReact2.default() });

describe('ControllerContainer', function () {
  test('basic usage', function () {
    expect.assertions(18);

    var WrapperModel = function (_Model) {
      _inherits(WrapperModel, _Model);

      function WrapperModel() {
        _classCallCheck(this, WrapperModel);

        return _possibleConstructorReturn(this, (WrapperModel.__proto__ || Object.getPrototypeOf(WrapperModel)).apply(this, arguments));
      }

      _createClass(WrapperModel, [{
        key: 'add',
        value: function add(params) {
          return {
            value: this.state.value + (params || 1)
          };
        }
      }, {
        key: 'minus',
        value: function minus(params) {
          return {
            value: this.state.value - (params || 1)
          };
        }
      }]);

      return WrapperModel;
    }(_boneMv.Model);

    // check controller itself


    WrapperModel.initialState = {
      value: 0
    };

    var Wrapper = function (_ControllerContainer) {
      _inherits(Wrapper, _ControllerContainer);

      function Wrapper() {
        _classCallCheck(this, Wrapper);

        return _possibleConstructorReturn(this, (Wrapper.__proto__ || Object.getPrototypeOf(Wrapper)).apply(this, arguments));
      }

      _createClass(Wrapper, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          // definition check for properties & method
          expect(this.model).toBeDefined();
          expect(this.actions).toBeDefined();
          expect(this.actions.add).toBeDefined();
          expect(this.getState).toBeDefined();

          // test redux methods
          expect(this.getState().value).toEqual(0);

          // add
          this.actions.add();
          expect(this.getState().value).toEqual(1);
          this.actions.add(2);
          expect(this.getState().value).toEqual(3);

          // minus
          this.actions.minus();
          expect(this.getState().value).toEqual(2);
          this.actions.minus(2);
          expect(this.getState().value).toEqual(0);
        }
      }, {
        key: 'render',
        value: function render() {
          return this.props.children;
        }
      }]);

      return Wrapper;
    }(_ControllerContainer3.default);

    var ConnectedWrapper = (0, _boneMv.connect)(Wrapper, WrapperModel);

    // check child component

    var Child = function (_Component) {
      _inherits(Child, _Component);

      function Child() {
        _classCallCheck(this, Child);

        return _possibleConstructorReturn(this, (Child.__proto__ || Object.getPrototypeOf(Child)).apply(this, arguments));
      }

      _createClass(Child, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          // definition check for properties & method
          expect(this.model).toBeDefined();
          expect(this.actions).toBeDefined();
          expect(this.actions.add).toBeDefined();
          expect(this.getState).toBeDefined();

          // test redux methods
          expect(this.getState().value).toEqual(0);

          // add
          this.actions.add();
          expect(this.getState().value).toEqual(1);
          this.actions.add(2);
          expect(this.getState().value).toEqual(3);

          // minus
          this.actions.minus();
          expect(this.getState().value).toEqual(2);
          this.actions.minus(2);
          expect(this.getState().value).toEqual(0);
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(
            'div',
            null,
            'child'
          );
        }
      }]);

      return Child;
    }(_react.Component);

    // should not createStore until all controller ready


    var store = (0, _boneMv.createStore)(function (state) {
      return state;
    });

    (0, _enzyme.mount)(_react2.default.createElement(
      _reactRedux.Provider,
      { store: store },
      _react2.default.createElement(
        ConnectedWrapper,
        null,
        _react2.default.createElement(Child, null)
      )
    ));
  });
});