'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _enzyme = require('enzyme');

var _boneMv = require('@bone/bone-mv');

var _RouterContainer = require('../RouterContainer');

var _RouterContainer2 = _interopRequireDefault(_RouterContainer);

var _history = require('../../history');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('test router container', function () {
  var createRouter = null;

  beforeEach(function () {
    createRouter = function createRouter() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var history = (0, _history.createHistory)(params.historyMode || 'hash');

      var store = (0, _boneMv.createStore)(function (state) {
        return state;
      }, {}, [], history);

      var historyAPI = (0, _history.createHistoryAPI)(store);

      var page = function page(content) {
        return function () {
          return _react2.default.createElement(
            'div',
            null,
            content
          );
        };
      };

      var routes = params.routes || [{
        // 精确匹配
        path: '/',
        page: page('Home'),
        exact: true,
        initialProps: {
          // navbar params
          // page specified params
        }
      }, {
        // 精确匹配
        path: '/test',
        page: page('Test'),
        exact: true,
        initialProps: {
          // navbar params
          // page specified params
        }
      }, {
        // noMatch
        page: page('not found')
      }];

      var provider = (0, _enzyme.mount)(_react2.default.createElement(
        _reactRedux.Provider,
        { store: store },
        _react2.default.createElement(_RouterContainer2.default, { routes: routes, history: history })
      ));

      return {
        provider: provider,
        store: store,
        history: historyAPI
      };
    };
  });

  afterEach(function () {
    var _createRouter = createRouter(),
        provider = _createRouter.provider,
        history = _createRouter.history;

    provider.unmount();

    // manually restore history
    history.go(history.length);

    global.createRouter = global.provider = null;

    (0, _history.removeHistory)();
  });

  test('basic usage', function () {
    var _createRouter2 = createRouter(),
        provider = _createRouter2.provider,
        history = _createRouter2.history;

    expect(provider.html()).toEqual('<div>Home</div>');

    history.push('/test');
    expect(provider.html()).toEqual('<div>Test</div>');

    history.push('/no_match_page');
    expect(provider.html()).toEqual('<div>not found</div>');
  });

  test('browser history', function () {
    var _createRouter3 = createRouter({
      historyMode: 'browser'
    }),
        provider = _createRouter3.provider,
        history = _createRouter3.history;

    history.push('/');
    expect(provider.html()).toEqual('<div>Home</div>');

    history.push('/test');
    expect(provider.html()).toEqual('<div>Test</div>');

    history.push('/no_match_page');
    expect(provider.html()).toEqual('<div>not found</div>');
  });

  // test('memory history', ()=>{
  //   const { provider, store } = createRouter({
  //     historyMode: 'memory'
  //   });

  //   expect(provider.html()).toEqual('<div>Home Page</div>');

  //   store.dispatch(push('/test'));
  //   expect(provider.html()).toEqual('<div>Test Page</div>');

  //   store.dispatch(push('/no_match_page'));
  //   expect(provider.html()).toEqual('<div>No Match Page</div>');
  // });

  // @todo do we need default route?
  // test('default route', ()=>{
  //   const { provider, store } = createRouter({
  //     routes: [
  //       {
  //         // 精确匹配
  //         path: '/',
  //         exact: true,
  //         page: ()=>{
  //           // @todo use RN basic component to replace div
  //           return <div>Home Page</div>
  //         },
  //         isPrivate: true,
  //         initialProps: {
  //           // navbar params
  //           // page specified params
  //         }
  //       },

  //       {
  //         // 精确匹配
  //         path: '/test',
  //         exact: true,
  //         page: ()=>{
  //           // @todo use RN basic component to replace div
  //           return <div>Test Page</div>
  //         },
  //         isPrivate: true,
  //         initialProps: {
  //           // navbar params
  //           // page specified params
  //         }
  //       }
  //     ],

  //     defaultRoute: '/test'
  //   });

  //   expect(provider.html()).toEqual('<div>Test Page</div>');

  //   store.dispatch(push('/'));
  //   expect(provider.html()).toEqual('<div>Home Page</div>');

  //   store.dispatch(push('/no_match_page'));
  //   expect(provider.html()).toEqual('<div>No Match Page</div>');
  // });
});