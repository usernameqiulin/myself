'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Interface = require('./Interface');

var _Interface2 = _interopRequireDefault(_Interface);

var _WebImplement = require('./WebImplement');

var _WebImplement2 = _interopRequireDefault(_WebImplement);

var _eventEmitter = require('@bone/event-emitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// 构造bridge
var FakeBridge = function () {
    function FakeBridge() {
        var _this = this;

        _classCallCheck(this, FakeBridge);

        Object.assign(this, _eventEmitter2.default);

        var channel = this.channel = new _WebImplement2.default({
            bridge: this
        });

        // delegate event
        channel.on(_constants.CHANNEL_CONNECT_STATUS_CHANGE, function () {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            _this.emit.apply(_this, [_constants.CHANNEL_CONNECT_STATUS_CHANGE].concat(args));
        });
    }

    _createClass(FakeBridge, [{
        key: 'call',
        value: function call(module, method, args, callback) {
            this.channel[method](args, callback);
        }
    }]);

    return FakeBridge;
}();

exports.default = new _Interface2.default({
    bridge: new FakeBridge()
});