'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _constants = require('./constants');

var _eventEmitter = require('@bone/event-emitter');

var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

var _logger = require('@bone/logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var log = _logger2.default.create({
    module: 'ChannelNativeBridge',
    label: ['channel', 'bridge']
});

var ChannelNativeBridge = function () {
    function ChannelNativeBridge(_ref) {
        var bridge = _ref.bridge,
            nativeBridge = _ref.nativeBridge;

        _classCallCheck(this, ChannelNativeBridge);

        // mixin event-emitter for event dispatching
        Object.assign(this, _eventEmitter2.default);
        this.bridge = bridge;
        this.nativeBridge = nativeBridge;

        // dispatch native events
        bridge.on(_constants.CHANNEL_NA_DOWSTREAM, onMessageArried.bind(this));
        bridge.on(_constants.CHANNEL_NA_CONNECT_STATUS_CHANGE, onConnectStatusChange.bind(this));
    }

    // fake ready
    // it's useful for web initialization


    _createClass(ChannelNativeBridge, [{
        key: 'ready',
        value: function ready(args, callback) {
            // ignore conf cause connection has been established by app
            setTimeout(callback, 0);
        }
    }, {
        key: 'subscribe',
        value: function subscribe(_ref2, callback) {
            var _ref3 = _slicedToArray(_ref2, 1),
                topic = _ref3[0];

            // listen to local event dispatcher
            // message will be sent through native event CHANNEL_NA_DOWSTREAM
            this.on(topic, callback);

            if (this.listenerCount(topic) > 1) {
                return;
            }

            // if it's the first listener
            // subscribe to native
            // so that the topic will be passed through native filter
            this.nativeBridge.call(_constants.CHANNEL, 'subscribe', [topic], function (err) {
                if (err) {
                    log.warn('subscribe ' + topic + ' failed:', err);
                    throw err;
                }
            });
        }
    }, {
        key: 'unsubscribe',
        value: function unsubscribe(_ref4, callback) {
            var _ref5 = _slicedToArray(_ref4, 1),
                topic = _ref5[0];

            this.off(topic, callback);

            if (this.listenerCount(topic) > 0) {
                return;
            }

            // if listener queue is empty, unsubscribe from native
            this.nativeBridge.call(_constants.CHANNEL, 'unsubscribe', [topic], function (err) {
                if (err) {
                    log.warn('unsubscribe ' + topic + ' failed:', err);
                    throw err;
                }
            });
        }
    }, {
        key: 'publish',
        value: function publish(_ref6, callback) {
            var _ref7 = _slicedToArray(_ref6, 2),
                topic = _ref7[0],
                payload = _ref7[1];

            this.nativeBridge.call(_constants.CHANNEL, 'publish', [topic, payload], callback);
        }
    }, {
        key: 'request',
        value: function request(_ref8, callback) {
            var _ref9 = _slicedToArray(_ref8, 2),
                topic = _ref9[0],
                payload = _ref9[1];

            this.nativeBridge.call(_constants.CHANNEL, 'request', [topic, payload], callback);
        }
    }]);

    return ChannelNativeBridge;
}();

ChannelNativeBridge.MODULE_NAME = _constants.CHANNEL;


function onMessageArried(msg) {
    // dispatch events
    // with err=null
    this.emit(msg.topic, msg);
}

function onConnectStatusChange(statusType) {
    this.emit(_constants.CHANNEL_CONNECT_STATUS_CHANGE, statusType.status);
}

exports.default = ChannelNativeBridge;