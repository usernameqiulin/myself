'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var openAnimationParams = {
    toValue: 1,
    duration: 300,
    easing: _reactNative.Easing.easeOut
};

var closeAnimationParams = {
    toValue: 0,
    duration: 300,
    easing: _reactNative.Easing.easeOut
};

var Switch = function (_Component) {
    _inherits(Switch, _Component);

    function Switch() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Switch);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Switch.__proto__ || Object.getPrototypeOf(Switch)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            color: new _reactNative.Animated.Value(_this.props.checked ? 1 : 0),
            translateX: new _reactNative.Animated.Value(_this.props.checked ? 1 : 0)
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Switch, [{
        key: '$stopAnimate',
        value: function $stopAnimate() {
            var _state = this.state,
                color = _state.color,
                translateX = _state.translateX;


            color.stopAnimation();

            translateX.stopAnimation();
        }
    }, {
        key: '$open',
        value: function $open() {
            var _state2 = this.state,
                color = _state2.color,
                translateX = _state2.translateX;


            this.$stopAnimate();

            _reactNative.Animated.parallel([_reactNative.Animated.timing(color, openAnimationParams), _reactNative.Animated.timing(translateX, openAnimationParams)]).start();
        }
    }, {
        key: '$close',
        value: function $close() {
            var _state3 = this.state,
                color = _state3.color,
                translateX = _state3.translateX;


            this.$stopAnimate();

            _reactNative.Animated.parallel([_reactNative.Animated.timing(color, closeAnimationParams), _reactNative.Animated.timing(translateX, closeAnimationParams)]).start();
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var checked = nextProps.checked;


            if (this.props.checked !== checked) {

                checked ? this.$open() : this.$close();
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }
    }, {
        key: 'render',
        value: function render() {
            var themeColor = this.props.themeColor;
            var _state4 = this.state,
                color = _state4.color,
                translateX = _state4.translateX;


            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.body },
                _react2.default.createElement(
                    _reactNative.Animated.View,
                    { style: [styles.container, {
                            backgroundColor: color.interpolate({
                                inputRange: [0, 1],
                                outputRange: ['#cfcfcf', themeColor]
                            })
                        }] },
                    _react2.default.createElement(_reactNative.Animated.View, { style: [styles.switch, {
                            transform: [{
                                translateX: translateX.interpolate({
                                    inputRange: [0, 1],
                                    outputRange: [0, 20]
                                })
                            }]
                        }] })
                ),
                _react2.default.createElement(_reactNative.View, { style: styles.cover })
            );
        }
    }]);

    return Switch;
}(_react.Component);

Switch.propTypes = {
    themeColor: _propTypes2.default.string,
    checked: _propTypes2.default.bool
};
Switch.defaultProps = {
    themeColor: '#1fc8a2',
    checked: false
};
exports.default = Switch;


var styles = _reactNative.StyleSheet.create({
    body: {
        position: 'relative',
        width: 50,
        height: 30
    },
    container: {
        position: 'relative',
        width: 50,
        height: 30,
        borderRadius: 15.5,
        backgroundColor: '#cfcfcf'
    },
    switch: {
        position: 'absolute',
        top: 1,
        left: 1,
        width: 28,
        height: 28,
        borderRadius: 14,
        backgroundColor: '#fff'
    },
    cover: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        borderRadius: 15.5,
        borderWidth: 0.5,
        borderColor: 'rgba(0, 0, 0, 0.1)'
    }
});