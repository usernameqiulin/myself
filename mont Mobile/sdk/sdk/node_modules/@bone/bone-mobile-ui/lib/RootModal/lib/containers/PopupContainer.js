'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _Container2 = require('./Container');

var _Container3 = _interopRequireDefault(_Container2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var windowInnerHeight = _reactNative.Dimensions.get('window').height;

var duration = 300;

var PopupContainer = function (_Container) {
    _inherits(PopupContainer, _Container);

    function PopupContainer() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, PopupContainer);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PopupContainer.__proto__ || Object.getPrototypeOf(PopupContainer)).call.apply(_ref, [this].concat(args))), _this), _this.$contentHeight = 0, _this.state = {
            visible: false,
            opacity: new _reactNative.Animated.Value(0),
            translateY: new _reactNative.Animated.Value(0)
        }, _this.$onHideComplete = function () {

            _this.setState({
                visible: false
            });

            _this.props.onHideComplete();
        }, _this.$onContainerLayout = function (e) {

            try {

                _this.$contentHeight = e.nativeEvent.layout.height || 0;
            } catch (err) {

                _this.$contentHeight = 0;
            }

            // 计算出内容的高度后，强制更新一次
            _this.forceUpdate();
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    // RN 的 translate 不支持百分比，必须给出确切值
    // 实时计算内容高度


    _createClass(PopupContainer, [{
        key: '$stopAnimate',
        value: function $stopAnimate() {
            var _state = this.state,
                opacity = _state.opacity,
                translateY = _state.translateY;


            opacity.stopAnimation();

            translateY.stopAnimation();
        }

        // 重定义 show 函数

    }, {
        key: 'show',
        value: function show() {
            var _state2 = this.state,
                opacity = _state2.opacity,
                translateY = _state2.translateY;


            this.$stopAnimate();

            this.setState({
                visible: true
            });

            _reactNative.Animated.parallel([_reactNative.Animated.timing(opacity, {
                duration: duration,
                toValue: 1,
                easing: _reactNative.Easing.linear
            }), _reactNative.Animated.timing(translateY, {
                duration: duration,
                toValue: 1,
                easing: _reactNative.Easing.in
            })]).start();
        }

        // 重定义 hide 函数

    }, {
        key: 'hide',
        value: function hide() {
            var _state3 = this.state,
                opacity = _state3.opacity,
                translateY = _state3.translateY;


            this.$stopAnimate();

            _reactNative.Animated.parallel([_reactNative.Animated.timing(opacity, {
                duration: duration,
                toValue: 0,
                easing: _reactNative.Easing.linear
            }), _reactNative.Animated.timing(translateY, {
                duration: duration,
                toValue: 0,
                easing: _reactNative.Easing.in
            })]).start(this.$onHideComplete);
        }
    }, {
        key: 'render',


        // 重定义 render 函数
        value: function render() {
            var _props = this.props,
                onBackgroundPress = _props.onBackgroundPress,
                children = _props.children;
            var _state4 = this.state,
                visible = _state4.visible,
                opacity = _state4.opacity,
                translateY = _state4.translateY;


            return visible ? _react2.default.createElement(
                _reactNative.View,
                { style: styles.body },
                _react2.default.createElement(
                    _reactNative.Animated.View,
                    { style: [styles.background, { opacity: opacity }] },
                    _react2.default.createElement(_reactNative.TouchableOpacity, {
                        style: styles.backgroundTouch,
                        activeOpacity: 1,
                        onPress: onBackgroundPress
                    })
                ),
                _react2.default.createElement(
                    _reactNative.Animated.View,
                    {
                        style: [styles.container, { transform: [{
                                translateY: translateY.interpolate({
                                    inputRange: [0, 1],
                                    outputRange: [0, -this.$contentHeight]
                                })
                            }] }],
                        onLayout: this.$onContainerLayout
                    },
                    children
                )
            ) : null;
        }
    }]);

    return PopupContainer;
}(_Container3.default);

exports.default = PopupContainer;


var styles = _reactNative.StyleSheet.create({
    body: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        backgroundColor: 'transparent',
        overflow: 'hidden' // 主要是兼容 Web 上的样式问题
    },
    background: {
        flex: 1,
        backgroundColor: 'rgba(0, 0, 0, 0.2)'
    },
    backgroundTouch: {
        flex: 1
    },
    container: {
        position: 'absolute',
        top: windowInnerHeight,
        right: 0,
        left: 0
    }
});