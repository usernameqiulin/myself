'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _Container2 = require('./Container');

var _Container3 = _interopRequireDefault(_Container2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var duration = 200;

var AlertContainer = function (_Container) {
    _inherits(AlertContainer, _Container);

    function AlertContainer() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, AlertContainer);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AlertContainer.__proto__ || Object.getPrototypeOf(AlertContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            visible: false,
            opacity: new _reactNative.Animated.Value(1),
            backgroundOpacity: new _reactNative.Animated.Value(0),
            scale: new _reactNative.Animated.Value(0)
        }, _this.$onShowComplete = function () {
            var _this$state = _this.state,
                opacity = _this$state.opacity,
                backgroundOpacity = _this$state.backgroundOpacity,
                scale = _this$state.scale;


            opacity.setValue(1);

            backgroundOpacity.setValue(1);

            scale.setValue(1);
        }, _this.$onHideComplete = function () {
            var _this$state2 = _this.state,
                opacity = _this$state2.opacity,
                backgroundOpacity = _this$state2.backgroundOpacity,
                scale = _this$state2.scale;


            _this.setState({
                visible: false
            });

            opacity.setValue(1);

            backgroundOpacity.setValue(0);

            scale.setValue(0);

            _this.props.onHideComplete();
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(AlertContainer, [{
        key: '$stopAnimate',
        value: function $stopAnimate() {
            var _state = this.state,
                opacity = _state.opacity,
                backgroundOpacity = _state.backgroundOpacity,
                scale = _state.scale;


            opacity.stopAnimation();

            backgroundOpacity.stopAnimation();

            scale.stopAnimation();
        }

        // 重定义 show 函数

    }, {
        key: 'show',
        value: function show() {
            var _state2 = this.state,
                backgroundOpacity = _state2.backgroundOpacity,
                scale = _state2.scale;


            this.$stopAnimate();

            this.setState({
                visible: true
            });

            var animationParams = {
                duration: duration,
                toValue: 1,
                easing: _reactNative.Easing.linear
            };

            _reactNative.Animated.parallel([_reactNative.Animated.timing(backgroundOpacity, animationParams), _reactNative.Animated.timing(scale, animationParams)]).start(this.$onShowComplete);
        }
    }, {
        key: 'hide',


        // 重定义 hide 函数
        value: function hide() {
            var opacity = this.state.opacity;


            this.$stopAnimate();

            _reactNative.Animated.timing(opacity, {
                duration: duration,
                toValue: 0,
                easing: _reactNative.Easing.linear
            }).start(this.$onHideComplete);
        }
    }, {
        key: 'render',


        // 重定义 render 函数
        value: function render() {
            var _props = this.props,
                onBackgroundPress = _props.onBackgroundPress,
                children = _props.children;
            var _state3 = this.state,
                visible = _state3.visible,
                opacity = _state3.opacity,
                backgroundOpacity = _state3.backgroundOpacity,
                scale = _state3.scale;


            return visible ? _react2.default.createElement(
                _reactNative.Animated.View,
                { style: [styles.body, { opacity: opacity }] },
                _react2.default.createElement(
                    _reactNative.Animated.View,
                    { style: [styles.background, {
                            opacity: backgroundOpacity
                        }] },
                    _react2.default.createElement(_reactNative.TouchableOpacity, {
                        style: styles.backgroundTouch,
                        activeOpacity: 1,
                        onPress: onBackgroundPress
                    })
                ),
                _react2.default.createElement(
                    _reactNative.Animated.View,
                    { style: { transform: [{
                                scale: scale.interpolate({
                                    inputRange: [0, 1],
                                    outputRange: [1.05, 1]
                                })
                            }] } },
                    children
                )
            ) : null;
        }
    }]);

    return AlertContainer;
}(_Container3.default);

exports.default = AlertContainer;


var styles = _reactNative.StyleSheet.create({
    body: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        backgroundColor: 'transparent',
        overflow: 'hidden',
        alignItems: 'center',
        justifyContent: 'center'
    },
    background: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.2)'
    },
    backgroundTouch: {
        flex: 1
    }
});