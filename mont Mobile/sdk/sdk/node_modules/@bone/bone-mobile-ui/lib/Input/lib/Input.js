'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var Input = function (_Component) {
    _inherits(Input, _Component);

    function Input(props) {
        _classCallCheck(this, Input);

        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

        _initialiseProps.call(_this);

        var value = void 0;

        if ('defaultValue' in props) {

            value = props.defaultValue;
        }

        if ('value' in props) {

            value = props.value;
        }

        _this.state = {
            value: value,
            secureTextEntry: true // 密码默认不可见
        };
        return _this;
    }

    _createClass(Input, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {

            if ('value' in nextProps) {

                this.setState({
                    value: nextProps.value
                });
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }
    }, {
        key: '$renderPasswordButton',


        // 控制密码输入是否可见
        value: function $renderPasswordButton() {
            var _this2 = this;

            var secureTextEntry = this.state.secureTextEntry;


            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                    style: styles.touch,
                    activeOpacity: 0.6,
                    onPress: function onPress() {
                        return _this2.setState({
                            secureTextEntry: !secureTextEntry
                        });
                    }
                },
                secureTextEntry ? _react2.default.createElement(_reactNative.Image, { style: { width: 26, height: 16 }, source: { uri: 'https://img.alicdn.com/tfs/TB1Xp6oa5qAXuNjy1XdXXaYcVXa-78-48.png' } }) : _react2.default.createElement(_reactNative.Image, { style: { width: 28, height: 16 }, source: { uri: 'https://img.alicdn.com/tfs/TB1vFYoa5qAXuNjy1XdXXaYcVXa-84-48.png' } })
            );
        }

        // 一键清除文本

    }, {
        key: '$renderClearButton',
        value: function $renderClearButton() {
            var _this3 = this;

            var value = this.state.value;


            if (!value) {

                return null;
            }

            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                    style: styles.touch,
                    activeOpacity: 0.6,
                    onPress: function onPress() {
                        return _this3.$onChangeText('');
                    }
                },
                _react2.default.createElement(_reactNative.Image, { style: { width: 16, height: 16 }, source: { uri: 'https://img.alicdn.com/tfs/TB1ad_pa5qAXuNjy1XdXXaYcVXa-48-48.png' } })
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                label = _props.label,
                autoFocus = _props.autoFocus,
                editable = _props.editable,
                type = _props.type,
                maxLength = _props.maxLength,
                placeholder = _props.placeholder,
                _props$style = _props.style,
                style = _props$style === undefined ? {} : _props$style;
            var value = this.state.value;

            // 组件容器样式，只支持有限定制

            var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(style),
                _StyleSheet$flatten$m = _StyleSheet$flatten.marginTop,
                marginTop = _StyleSheet$flatten$m === undefined ? 0 : _StyleSheet$flatten$m,
                _StyleSheet$flatten$m2 = _StyleSheet$flatten.marginBottom,
                marginBottom = _StyleSheet$flatten$m2 === undefined ? 0 : _StyleSheet$flatten$m2;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, { marginTop: marginTop, marginBottom: marginBottom }] },
                label ? _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.label },
                    label
                ) : null,
                _react2.default.createElement(_reactNative.TextInput, {
                    style: styles.input,
                    autoCapitalize: 'none',
                    autoFocus: autoFocus,
                    blurOnSubmit: true,
                    editable: editable,
                    keyboardType: this.$keyboardType,
                    maxLength: maxLength,
                    onChangeText: this.$onChangeText,
                    placeholder: placeholder,
                    placeholderTextColor: '#ccc',
                    returnKeyType: 'done',
                    secureTextEntry: this.$secureTextEntry,
                    underlineColorAndroid: 'transparent',
                    value: value
                }),
                type === 'password' ? this.$renderPasswordButton() : this.$renderClearButton()
            );
        }
    }, {
        key: '$keyboardType',
        get: function get() {

            switch (this.props.type) {

                case 'text':

                    return 'default';

                case 'number':

                    return 'numeric';

                case 'email':

                    return 'email-address';

                case 'password':

                    return 'default';

                default:

                    return 'default';
            }
        }
    }, {
        key: '$secureTextEntry',
        get: function get() {

            // 密码的可见度由状态控制
            if (this.props.type === 'password') {

                return this.state.secureTextEntry;
            }

            // 其它必然可见
            return false;
        }
    }]);

    return Input;
}(_react.Component);

Input.propTypes = {
    label: _propTypes2.default.string, // 描述
    autoFocus: _propTypes2.default.bool, // 在 componentDidMount 后，是否自动获得焦点
    defaultValue: _propTypes2.default.string,
    value: _propTypes2.default.string,
    editable: _propTypes2.default.bool, // 是否可编辑
    type: _propTypes2.default.oneOf([// 类型
    'text', 'number', 'email', 'password']),
    maxLength: _propTypes2.default.number, // 最大输入长度
    placeholder: _propTypes2.default.string,
    onChangeText: _propTypes2.default.func // 当文本框内容变化时调用此回调函数，改变后的文字内容会作为参数传递
};
Input.defaultProps = {
    label: '',
    autoFocus: false,
    editable: true,
    type: 'text',
    placeholder: '',
    onChangeText: noop
};

var _initialiseProps = function _initialiseProps() {
    var _this4 = this;

    this.$onChangeText = function (value) {

        // 开发者未指定 value，组件的 value 内部状态维护
        if (!('value' in _this4.props)) {

            _this4.setState({ value: value });
        }

        _this4.props.onChangeText(value);
    };
};

exports.default = Input;


var styles = _reactNative.StyleSheet.create({
    body: {
        height: 50,
        paddingLeft: 16,
        backgroundColor: '#fff',
        flexDirection: 'row',
        alignItems: 'center'
    },
    label: {
        paddingRight: 24,
        fontSize: 14,
        fontWeight: 'bold',
        color: '#333'
    },
    input: {
        flex: 1,
        height: 50,
        lineHeight: 14,
        fontSize: 14,
        color: '#333'
    },
    touch: {
        width: 60,
        height: 50,
        paddingRight: 16,
        alignItems: 'flex-end',
        justifyContent: 'center'
    }
});