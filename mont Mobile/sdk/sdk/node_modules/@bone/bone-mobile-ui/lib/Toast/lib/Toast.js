'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RootSiblings = require('../../RootSiblings');

var _RootSiblings2 = _interopRequireDefault(_RootSiblings);

var _RootModal = require('../../RootModal');

var _ToastContent = require('./ToastContent');

var _ToastContent2 = _interopRequireDefault(_ToastContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ref = [Symbol('react-native-toast-config-prop'), Symbol('react-native-toast-config'), Symbol('react-native-toast-update'), Symbol('react-native-toast-modal'), Symbol('react-native-toast-timeout')],
    configPropSymbol = _ref[0],
    configSymbol = _ref[1],
    updateSymbol = _ref[2],
    modalSymbol = _ref[3],
    timeoutSymbol = _ref[4];

var Toast = function () {
    function Toast(_ref2) {
        var _ref2$text = _ref2.text,
            text = _ref2$text === undefined ? '' : _ref2$text,
            _ref2$duration = _ref2.duration,
            duration = _ref2$duration === undefined ? 0 : _ref2$duration,
            _ref2$overlayCanClose = _ref2.overlayCanClose,
            overlayCanClose = _ref2$overlayCanClose === undefined ? true : _ref2$overlayCanClose;

        _classCallCheck(this, Toast);

        this[configPropSymbol] = {
            text: text,
            duration: duration,
            overlayCanClose: overlayCanClose,
            visible: true
        };
    }

    // 私有，不暴露给开发者


    _createClass(Toast, [{
        key: updateSymbol,
        value: function value() {
            var _this = this;

            var _configSymbol = this[configSymbol],
                _configSymbol$text = _configSymbol.text,
                text = _configSymbol$text === undefined ? '' : _configSymbol$text,
                _configSymbol$duratio = _configSymbol.duration,
                duration = _configSymbol$duratio === undefined ? 0 : _configSymbol$duratio,
                _configSymbol$overlay = _configSymbol.overlayCanClose,
                overlayCanClose = _configSymbol$overlay === undefined ? true : _configSymbol$overlay,
                _configSymbol$visible = _configSymbol.visible,
                visible = _configSymbol$visible === undefined ? true : _configSymbol$visible;


            var element = _react2.default.createElement(_RootModal.ToastContainer, {
                visible: visible,
                onBackgroundPress: function onBackgroundPress() {

                    if (overlayCanClose) {

                        _this.destroy();
                    }
                },
                onHideComplete: function onHideComplete() {
                    return _this[modalSymbol] && _this[modalSymbol].destroy();
                } // 隐藏动画结束后，destroy
                , children: _react2.default.createElement(_ToastContent2.default, {
                    text: text
                })
            });

            if (this[modalSymbol]) {

                this[modalSymbol].update(element);
            } else {

                this[modalSymbol] = new _RootSiblings2.default(element);
            }

            // 注意，每一次更新渲染，都会重新开始计时 duration
            clearTimeout(this[timeoutSymbol]);

            if (visible && duration > 0) {

                this[timeoutSymbol] = setTimeout(function () {
                    return _this.destroy();
                }, duration);
            }
        }

        // 公有，给开发者使用

    }, {
        key: 'destroy',


        // 销毁，隐藏动画结束后，销毁
        value: function destroy() {

            this[configPropSymbol] = {
                visible: false
            };
        }
    }, {
        key: configPropSymbol,
        set: function set(config) {

            this[configSymbol] = _extends({}, this[configSymbol] || {}, config);

            this[updateSymbol]();
        }
    }, {
        key: 'text',
        set: function set(text) {

            this[configPropSymbol] = { text: text };
        }
    }]);

    return Toast;
}();

exports.default = Toast;