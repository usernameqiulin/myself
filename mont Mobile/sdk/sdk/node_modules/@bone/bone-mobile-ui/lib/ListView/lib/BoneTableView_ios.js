/**
 * @akModule AKToast
 * @desciption
 * @aliplus.com
 */
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

var _reactTimerMixin = require('react-timer-mixin');

var _reactTimerMixin2 = _interopRequireDefault(_reactTimerMixin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Util = {
    extend: function extend(a, b, c) {
        return JSON.parse(JSON.stringify(c));
    }
};
var iosCommon = require('./ios/refresh');

var BoneTableViewManager = _reactNative.NativeModules.BoneTableViewManager;

var BoneTableViewConsts = BoneTableViewManager ? _reactNative.NativeModules.UIManager.BoneTableView.Constants : null;
var BoneTableRefreshCellViewConsts = BoneTableViewManager ? _reactNative.NativeModules.UIManager.BoneTableRefreshCellView.Constants : null;
var window = _reactNative.Dimensions.get('window');

var BoneRefresh = _react2.default.createClass({
    displayName: 'BoneRefresh',
    getInitialState: function getInitialState() {
        return { width: 0, height: 0 };
    },

    render: function render() {
        var _this = this;

        return _react2.default.createElement(BoneRCTTableRefreshCellView, _extends({ onLayout: function onLayout(event) {
                _this.setState(event.nativeEvent.layout);
            } }, this.props));
    }
});
BoneRefresh.Consts = BoneTableRefreshCellViewConsts;

// var getDefaultRefresh = function(type) {
//     return <BoneRefresh cellType={BoneRefresh.Consts.Types[type]} style={{width: window.width, height: 50}}>
//             <View style={{justifyContent: 'center', flex:1, alignItems:'center'}}>
//               <Text style={{color: '#9d9d9d', fontSize:14, textAlign: 'center',alignItems:'center',justifyContent: 'center'}}>没有更多数据了...</Text>
//             </View>
//         </BoneRefresh>
// }


var BoneTableViewContainer = _react2.default.createClass({
    displayName: 'BoneTableViewContainer',

    mixins: [_reactTimerMixin2.default],
    propTypes: {
        dataSource: _react2.default.PropTypes.array.isRequired,
        renderRow: _react2.default.PropTypes.func.isRequired,
        rowGuid: _react2.default.PropTypes.func,
        onClick: _react2.default.PropTypes.func,
        onRefresh: _react2.default.PropTypes.func,
        onInfinite: _react2.default.PropTypes.func,
        layout: _react2.default.PropTypes.shape({
            type: _react2.default.PropTypes.string, //1.'grid',2.'waterfall'
            cellHeight: _react2.default.PropTypes.number, //'waterfall'无此配置
            cellWidth: _react2.default.PropTypes.number, //'waterfall'无此配置
            minLineSpacing: _react2.default.PropTypes.number, //cell的上下最小间距
            minItemSpacing: _react2.default.PropTypes.number, //cell的左右最小间距
            sectionInset: _react2.default.PropTypes.shape({
                top: _react2.default.PropTypes.number,
                left: _react2.default.PropTypes.number,
                right: _react2.default.PropTypes.number,
                bottom: _react2.default.PropTypes.number
            })
        })
    },
    scrollTo: function scrollTo(x, y, animated) {},

    getDefaultProps: function getDefaultProps() {
        var def = iosCommon.getDefault(BoneRefresh);
        def.layout = {
            layout: {
                sectionInset: {
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0
                }
            }
        };
        return def;
    },
    getInitialState: function getInitialState() {
        return {
            refreshCells: this._refreshCells(this.props),
            rows: this._renderRows(this.props)
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var state = this._stateFromProps(nextProps);
        this.setState(state);
    },
    privateDataSource: [],
    _stateFromProps: function _stateFromProps(props) {
        return {
            refreshCells: this._refreshCells(props),
            rows: this.privateDataSource === props.dataSource ? this.state.rows : this._renderRows(props)
        };
    },
    _refreshCells: function _refreshCells(props) {
        return iosCommon.getRefresh(props);
    },

    _renderRows: function _renderRows(props) {
        // debugger
        this.privateDataSource = Util.extend(true, {}, props.dataSource);
        if (this.privateDataSource.length == 0) {
            return null;
        }
        var dataSource = props.dataSource;
        var cellData = this.cellData = {};
        var rows = [];
        for (var sectionIndex = 0; sectionIndex < dataSource.length; sectionIndex++) {
            var section = dataSource[sectionIndex];
            for (var rowIndex = 0; rowIndex < section.length; rowIndex++) {
                var rowData = section[rowIndex];
                var content = this.props.renderRow(rowData, sectionIndex, rowIndex, this._onRowHighlighted);
                var rowGuid = this.props.rowGuid ? this.props.rowGuid(rowData, sectionIndex, rowIndex) : this._defaultRowGuid(rowData);
                var editConfig = content.props.editConfig || {};
                var editConfigOption = editConfig.options || null;
                var row = _react2.default.createElement(BoneTableViewCell, {
                    key: rowGuid,
                    indexPath: { section: sectionIndex, item: rowIndex },
                    content: content,
                    editActions: editConfigOption,
                    ref: function ref(row) {
                        PrivateMethods.captureReferenceFor(cellData, row);
                    }
                });
                rows.push(row);
            }
        }
        return rows;
    },
    _defaultRowGuid: function _defaultRowGuid(rowData) {
        if (!this._generatedId) {
            this._generatedId = 0;
        }
        return (this._generatedId++).toString();
    },
    render: function render() {
        if (this.privateDataSource.length == 0) {
            return null;
        }
        var editing = this.props.editing || false;
        if (this.tableview) {
            return _react2.default.cloneElement(this.tableview, { editing: editing, cellCount: this.state.rows.length }, this.state.refreshCells, this.state.rows);
        } else {
            return this.tableview = _react2.default.createElement(
                BoneRCTTableView,
                {
                    style: this.props.style,
                    tableViewStyle: BoneTableViewContainer.Consts.Style.Plain,
                    contentInset: this.props.layout.sectionInset,
                    cellCount: this.state.rows.length,
                    onBeginEdit: this._onEdit,
                    editing: false,
                    onClick: this._onClick,
                    onRefresh: this._onRefresh,
                    onInfinite: this._onInfinite,
                    onBeginDrag: this._onBeginDrag,
                    onEndDrag: this._onEndDrag,
                    onEndEdit: this._onEndEdit,
                    onStartShouldSetResponderCapture: this._onStartShouldSetResponderCapture,
                    onMoveShouldSetResponderCapture: this._onMoveShouldSetResponderCapture
                },
                this.state.refreshCells,
                this.state.rows
            );
        }
    },

    _onBeginDrag: function _onBeginDrag() {
        this.setDragging(true);
    },

    _onEndDrag: function _onEndDrag() {
        this.setDragging(false);
    },
    _onEndEdit: function _onEndEdit() {
        var self = this;
        self.setDragging(true);
        self.onEndEditTimer && this.clearTimeout(self.onEndEditTimer);
        this.onEndEditTimer = this.setTimeout(function () {
            self.setDragging(false);
        }, 300);
    },

    isDragging: function isDragging() {
        if (this._isDragging === null || this._isDragging === undefined) {
            this._isDragging = false;
        }
        return this._isDragging;
    },

    setDragging: function setDragging(isDragging) {
        this._isDragging = isDragging;
    },

    _onStartShouldSetResponderCapture: function _onStartShouldSetResponderCapture(evt) {
        return this.isDragging();
    },

    _onMoveShouldSetResponderCapture: function _onMoveShouldSetResponderCapture(evt) {
        return this.isDragging();
    },

    _onRefresh: function _onRefresh(event) {
        var reactTag = event.nativeEvent.target || _reactNative2.default.findNodeHandle(this);
        if (!this.props.onRefresh) {
            BoneTableViewManager.headerEndRefreshing(reactTag);
        } else {
            this.props.onRefresh(function (code) {
                if (code == 'no-more-data') {
                    BoneTableViewManager.headerEndRefreshing(reactTag);
                } else {
                    BoneTableViewManager.headerEndRefreshing(reactTag);
                }
            });
        }
    },
    _onEdit: function _onEdit(event) {
        var config = event.nativeEvent;
        var reactTag = event.nativeEvent.target || _reactNative2.default.findNodeHandle(this);
        var self = this,
            mode = config.mode,
            action = config.action;
        var rowIndex = config.selectedIndex;
        var sectionIndex = config.selectedSection;

        if (self.props.onEditAction) {
            var dataSource = Util.extend(true, [], self.privateDataSource);
            self.props.onEditAction({
                sectionIndex: sectionIndex,
                rowIndex: rowIndex,
                config: config,
                dataSource: dataSource
            }, function (cb) {
                BoneTableViewManager.reloadData(reactTag, function () {});
            });
        }
    },
    _onInfinite: function _onInfinite(event) {
        var reactTag = event.nativeEvent.target || _reactNative2.default.findNodeHandle(this);
        if (!this.props.onInfinite) {
            BoneTableViewManager.footerEndRefreshing(reactTag);
        } else {
            this.props.onInfinite(function (code) {
                if (code == 'no-more-data') {
                    BoneTableViewManager.footerEndRefreshingNoMoreData(reactTag, 60);
                } else {
                    BoneTableViewManager.footerEndRefreshing(reactTag);
                }
            });
        }
    },

    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
        this.setState({ highlightedRow: { sectionID: sectionID, rowID: rowID } });
    },

    _onClick: function _onClick(event) {
        var data = event.nativeEvent;
        if (this.props.onClick) {
            this.props.onClick(data);
        }
        event.stopPropagation();
    }
});

var PrivateMethods = {
    captureReferenceFor: function captureReferenceFor(cellData, row) {
        var sectionId = row && row.props.indexPath.section;
        var rowId = row && row.props.indexPath.item;
        if (cellData[sectionId] === undefined) {
            cellData[sectionId] = {};
        }

        cellData[sectionId][rowId] = row; // Capture the reference
    }
};

var BoneTableViewCell = _react2.default.createClass({
    displayName: 'BoneTableViewCell',

    propTypes: {
        content: _react2.default.PropTypes.element.isRequired
    },
    getInitialState: function getInitialState() {
        return {
            height: 0
        };
    },
    componentWillMount: function componentWillMount() {
        // Don't want to trigger a render pass, so we're putting the view property
        // data directly on the class
        this.viewProperties = {
            width: 0, // the view defaults to width of size 0
            height: 0 // the view defaults to height of size 0
        };
    },


    render: function render() {
        return _react2.default.createElement(
            BoneRCTTableCellView,
            _extends({ onLayout: this.onLayout }, this.props, { componentHeight: this.viewProperties.height }),
            this.props.content
        );
    },

    onLayout: function onLayout(evt) {
        // When the cell has actually been layed out, record the rendered width & height
        this.viewProperties.width = evt.nativeEvent.layout.width;
        this.viewProperties.height = evt.nativeEvent.layout.height;
        this.setState({ height: this.viewProperties.height });
    }
});

//常量
BoneTableViewContainer.Consts = BoneTableViewConsts;

//native模块
var BoneRCTTableView = BoneTableViewManager && (0, _reactNative.requireNativeComponent)('BoneTableView', null);
var BoneRCTTableCellView = BoneTableViewManager && (0, _reactNative.requireNativeComponent)('BoneTableCellView', null);
var BoneRCTTableRefreshCellView = BoneTableViewManager && (0, _reactNative.requireNativeComponent)('BoneTableRefreshCellView', null);
module.exports = BoneTableViewContainer;