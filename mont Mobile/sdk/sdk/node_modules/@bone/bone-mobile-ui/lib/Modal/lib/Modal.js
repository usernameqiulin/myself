'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RootSiblings = require('../../RootSiblings');

var _RootSiblings2 = _interopRequireDefault(_RootSiblings);

var _RootModal = require('../../RootModal');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ref = [Symbol('react-native-modal-config-prop'), Symbol('react-native-modal-config'), Symbol('react-native-modal-update'), Symbol('react-native-modal-Container'), Symbol('react-native-modal-modal'), Symbol('react-native-modal-timeout')],
    configPropSymbol = _ref[0],
    configSymbol = _ref[1],
    updateSymbol = _ref[2],
    ContainerSymbol = _ref[3],
    modalSymbol = _ref[4],
    timeoutSymbol = _ref[5];


var containerTypes = ['alert', 'popup', 'toast'];

var noop = function noop() {};

var Modal = function () {
    function Modal(_ref2) {
        var _ref2$component = _ref2.component,
            component = _ref2$component === undefined ? null : _ref2$component,
            _ref2$duration = _ref2.duration,
            duration = _ref2$duration === undefined ? 0 : _ref2$duration,
            _ref2$overlayCanClose = _ref2.overlayCanClose,
            overlayCanClose = _ref2$overlayCanClose === undefined ? true : _ref2$overlayCanClose,
            _ref2$containerType = _ref2.containerType,
            containerType = _ref2$containerType === undefined ? containerTypes[1] : _ref2$containerType;

        _classCallCheck(this, Modal);

        this[configPropSymbol] = {
            component: component,
            duration: duration,
            overlayCanClose: overlayCanClose,
            containerType: containerType,
            visible: true // new 即显示
        };
    }

    // 私有，不暴露给开发者


    _createClass(Modal, [{
        key: updateSymbol,


        // 更新渲染
        value: function value() {
            var _this = this;

            var _configSymbol = this[configSymbol],
                _configSymbol$compone = _configSymbol.component,
                component = _configSymbol$compone === undefined ? null : _configSymbol$compone,
                _configSymbol$duratio = _configSymbol.duration,
                duration = _configSymbol$duratio === undefined ? 0 : _configSymbol$duratio,
                _configSymbol$overlay = _configSymbol.overlayCanClose,
                overlayCanClose = _configSymbol$overlay === undefined ? true : _configSymbol$overlay,
                _configSymbol$visible = _configSymbol.visible,
                visible = _configSymbol$visible === undefined ? true : _configSymbol$visible;


            var Container = this[ContainerSymbol];

            var element = _react2.default.createElement(Container, {
                visible: visible,
                onBackgroundPress: function onBackgroundPress() {

                    if (overlayCanClose) {

                        _this.destroy();
                    }
                },
                onHideComplete: function onHideComplete() {
                    return _this[modalSymbol] && _this[modalSymbol].destroy();
                } // 隐藏动画结束后，destroy
                , children: component
            });

            if (this[modalSymbol]) {

                this[modalSymbol].update(element);
            } else {

                this[modalSymbol] = new _RootSiblings2.default(element);
            }

            // 注意，每一次更新渲染，都会重新开始计时 duration
            clearTimeout(this[timeoutSymbol]);

            if (visible && duration > 0) {

                this[timeoutSymbol] = setTimeout(function () {
                    return _this.destroy();
                }, duration);
            }
        }

        // 公有，给开发者使用
        // 设置新的弹窗内组件

    }, {
        key: 'show',


        // 显示
        value: function show() {

            this[configPropSymbol] = {
                visible: true
            };
        }

        // 隐藏，隐藏动画结束后，销毁
        // 实际上 hide 和 destroy 没有区别

    }, {
        key: 'hide',
        value: function hide() {

            this.destroy();
        }

        // 销毁，隐藏动画结束后，销毁

    }, {
        key: 'destroy',
        value: function destroy() {

            this[configPropSymbol] = {
                visible: false
            };
        }
    }, {
        key: configPropSymbol,
        set: function set(config) {

            // 更新 config
            this[configSymbol] = _extends({}, this[configSymbol] || {}, config);

            // 更新渲染
            this[updateSymbol]();
        }

        // 获取容器类

    }, {
        key: ContainerSymbol,
        get: function get() {

            switch (this[configSymbol].containerType) {

                case 'alert':

                    return _RootModal.AlertContainer;

                case 'popup':

                    return _RootModal.PopupContainer;

                case 'toast':

                    return _RootModal.ToastContainer;

                default:

                    return _RootModal.PopupContainer;
            }
        }
    }, {
        key: 'component',
        set: function set(component) {

            this[configPropSymbol] = { component: component };
        }
    }]);

    return Modal;
}();

exports.default = Modal;