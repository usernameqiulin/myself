'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _IconFont = require('../../IconFont');

var _IconFont2 = _interopRequireDefault(_IconFont);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var ItemView = function (_Component) {
    _inherits(ItemView, _Component);

    function ItemView() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ItemView);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ItemView.__proto__ || Object.getPrototypeOf(ItemView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            pressing: false
        }, _this.$onPressIn = function () {

            _this.setState({
                pressing: true
            });
        }, _this.$onPressOut = function () {

            _this.setState({
                pressing: false
            });
        }, _this.$onPress = function () {

            if (_this.$disabled) {

                return;
            }

            var _this$props = _this.props,
                data = _this$props.data,
                onPress = _this$props.onPress;


            onPress(data);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ItemView, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                data = _props.data,
                themeColor = _props.themeColor,
                hasBorder = _props.hasBorder,
                checkIcon = _props.checkIcon,
                uncheckIcon = _props.uncheckIcon;
            var pressing = this.state.pressing;


            var disabled = this.$disabled;

            var _data$name = data.name,
                name = _data$name === undefined ? '' : _data$name,
                _data$subtitle = data.subtitle,
                subtitle = _data$subtitle === undefined ? '' : _data$subtitle,
                _data$subTitleColor = data.subTitleColor,
                subTitleColor = _data$subTitleColor === undefined ? '#999' : _data$subTitleColor,
                _data$rightTitle = data.rightTitle,
                rightTitle = _data$rightTitle === undefined ? '' : _data$rightTitle,
                _data$rightTitleColor = data.rightTitleColor,
                rightTitleColor = _data$rightTitleColor === undefined ? '#999' : _data$rightTitleColor,
                _data$leftIcon = data.leftIcon,
                leftIcon = _data$leftIcon === undefined ? '' : _data$leftIcon,
                _data$rightIcon = data.rightIcon,
                rightIcon = _data$rightIcon === undefined ? '' : _data$rightIcon,
                checkable = data.checkable;


            var icon = rightIcon || leftIcon;

            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                    style: [styles.body, { height: subtitle ? 82 : 50 }],
                    activeOpacity: 1,
                    disabled: disabled,
                    onPressIn: this.$onPressIn,
                    onPressOut: this.$onPressOut,
                    onPress: this.$onPress
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.container },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.item },
                        _react2.default.createElement(
                            _reactNative.View,
                            null,
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.name },
                                name
                            ),
                            subtitle ? _react2.default.createElement(
                                _reactNative.Text,
                                { style: [styles.subTitle, { color: subTitleColor }] },
                                subtitle
                            ) : null
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.rightPart },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: [styles.rightTitle, { color: rightTitleColor }] },
                                rightTitle
                            ),
                            !checkable && icon ? _react2.default.createElement(_IconFont2.default, { style: styles.icon, iconFont: icon }) : null,
                            checkable ? _react2.default.createElement(_IconFont2.default, {
                                style: [styles.checkIcon, { color: themeColor }],
                                iconFont: data.status === 1 ? checkIcon : uncheckIcon
                            }) : null
                        )
                    ),
                    hasBorder ? _react2.default.createElement(_reactNative.View, { style: styles.border }) : null,
                    pressing || disabled ? _react2.default.createElement(_reactNative.View, { style: [styles.cover, pressing ? { backgroundColor: 'rgba(0, 0, 0, 0.1)' } : null, disabled ? { backgroundColor: 'rgba(255, 255, 255, 0.6)' } : null] }) : null
                )
            );
        }
    }, {
        key: '$disabled',
        get: function get() {
            var _props2 = this.props,
                data = _props2.data,
                disabled = _props2.disabled;


            return disabled || data.status === -1;
        }
    }]);

    return ItemView;
}(_react.Component);

ItemView.propTypes = {
    data: _propTypes2.default.shape({
        name: _propTypes2.default.string,
        subtitle: _propTypes2.default.string,
        subTitleColor: _propTypes2.default.string,
        rightTitle: _propTypes2.default.string,
        rightTitleColor: _propTypes2.default.string,
        leftIcon: _propTypes2.default.string,
        rightIcon: _propTypes2.default.string,
        value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        status: _propTypes2.default.oneOf([-1, 0, 1]).isRequired,
        key: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
        index: _propTypes2.default.number.isRequired,
        checkable: _propTypes2.default.bool.isRequired
    }).isRequired,
    disabled: _propTypes2.default.bool,
    themeColor: _propTypes2.default.string,
    onPress: _propTypes2.default.func,
    hasBorder: _propTypes2.default.bool,
    checkIcon: _propTypes2.default.string,
    uncheckIcon: _propTypes2.default.string
};
ItemView.defaultProps = {
    disabled: false,
    themeColor: '#1fc8a2',
    onPress: noop,
    hasBorder: true,
    checkIcon: '&#x3071;',
    uncheckIcon: '&#x3081;'
};
exports.default = ItemView;


var styles = _reactNative.StyleSheet.create({
    body: {
        backgroundColor: '#fff'
    },
    container: {
        position: 'relative',
        flex: 1
    },

    item: {
        flex: 1,
        paddingLeft: 16,
        paddingRight: 16,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between'
    },

    name: {
        height: 20,
        lineHeight: 20,
        fontSize: 14,
        fontWeight: 'bold',
        color: '#333'
    },
    subTitle: {
        height: 17,
        marginTop: 6,
        lineHeight: 17,
        fontSize: 12,
        color: '#999'
    },

    rightPart: {
        flexDirection: 'row',
        alignItems: 'center'
    },
    rightTitle: {
        fontSize: 14,
        color: '#999'
    },
    icon: {
        width: 14,
        height: 14,
        marginLeft: 10,
        fontSize: 14,
        color: '#999',
        backgroundColor: 'transparent'
    },
    checkIcon: {
        width: 24,
        height: 24,
        marginLeft: 10,
        fontSize: 24,
        color: '#1fc8a2',
        backgroundColor: 'transparent'
    },

    border: {
        height: 1,
        marginLeft: 16,
        backgroundColor: '#ededed'
    },
    cover: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    }
});