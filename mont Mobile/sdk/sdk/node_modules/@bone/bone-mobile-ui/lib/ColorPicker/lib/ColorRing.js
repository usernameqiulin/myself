'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _tinycolor = require('tinycolor2');

var _tinycolor2 = _interopRequireDefault(_tinycolor);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var windowInnerWidth = _reactNative.Dimensions.get('window').width;

var ColorRing = function (_Component) {
    _inherits(ColorRing, _Component);

    function ColorRing(props) {
        _classCallCheck(this, ColorRing);

        var _this = _possibleConstructorReturn(this, (ColorRing.__proto__ || Object.getPrototypeOf(ColorRing)).call(this, props));

        _initialiseProps.call(_this);

        var h = 0;

        if ('h' in props) {

            h = (0, _util.calH)(props.h);
        }

        _this.state = { h: h };
        return _this;
    }

    _createClass(ColorRing, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {

            if ('h' in nextProps) {

                this.setState({
                    h: (0, _util.calH)(nextProps.h)
                });
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }

        // 滑动方式类似游戏摇杆，圆心、手指 & 滑块一直在一条直线上


        // 实例化 panHandlers，只初始化一次

    }, {
        key: 'render',
        value: function render() {
            var h = this.state.h;
            var size = this.props.size;


            var width = Math.min(size, windowInnerWidth);

            var height = size;

            size -= 40 * 2;

            var radius = size / 2 + 18 / 2 + 3;

            var radian = h / 180 * Math.PI;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, { width: width, height: height }], ref: this.$onRef, onLayout: this.$onLayout },
                _react2.default.createElement(_reactNative.Image, {
                    style: [styles.ring, { width: size, height: size, top: (height - size) / 2, left: (width - size) / 2 }],
                    source: { uri: 'https://img.alicdn.com/tfs/TB1.HgrfdfJ8KJjy0FeXXXKEXXa-903-903.png' }
                }),
                _react2.default.createElement(
                    _reactNative.View,
                    _extends({
                        style: [styles.touch, { transform: [{ translateX: radius * Math.sin(radian) }, { translateY: -radius * Math.cos(radian) }, { rotate: 180 + h + 'deg' }] }]
                    }, this.$panHandlers),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.touchContainer },
                        _react2.default.createElement(_reactNative.View, { style: [styles.touchBackground, { backgroundColor: (0, _tinycolor2.default)({ h: h, s: 1, v: 1 }).toHexString() }] }),
                        _react2.default.createElement(_reactNative.Image, { style: styles.touchImage, source: { uri: 'https://img.alicdn.com/tfs/TB1VMcHfS_I8KJjy0FoXXaFnVXa-75-60.png' } }),
                        _react2.default.createElement(_reactNative.View, { style: styles.touchCover })
                    )
                )
            );
        }
    }]);

    return ColorRing;
}(_react.Component);

ColorRing.propTypes = {
    size: _propTypes2.default.number, // 色环大小
    h: _propTypes2.default.number, // 色调，顺时针，0 - 360
    onChange: _propTypes2.default.func
};
ColorRing.defaultProps = {
    size: 301,
    onChange: _util.fn
};

var _initialiseProps = function _initialiseProps() {
    var _this2 = this;

    this.$pageX = 0;
    this.$pageY = 0;

    this.$onRef = function (el) {
        return _this2.$bodyEl = el;
    };

    this.$onLayout = function () {
        return _this2.$bodyEl && _this2.$bodyEl.measure(function (x, y, width, height, pageX, pageY) {

            // pageX 获得的值不太对，这里直接计算
            _this2.$pageX = (windowInnerWidth - _this2.props.size) / 2;

            _this2.$pageY = pageY;
        });
    };

    this.$onTouchStart = function (_ref) {
        var x0 = _ref.x0,
            y0 = _ref.y0;
        return _this2.$onTouchMove({ x0: x0, y0: y0 });
    };

    this.$onTouchMove = function (_ref2) {
        var moveX = _ref2.moveX,
            x0 = _ref2.x0,
            moveY = _ref2.moveY,
            y0 = _ref2.y0;
        var _props = _this2.props,
            size = _props.size,
            onChange = _props.onChange;


        moveX = moveX || x0, moveY = moveY || y0;

        var dx = moveX - _this2.$pageX - size / 2;

        var dy = moveY - _this2.$pageY - size / 2;

        var h = (0, _util.calH)(180 - Math.atan2(dx, dy) / Math.PI * 180);

        if (!('h' in _this2.props)) {

            _this2.setState({ h: h });
        }

        onChange(h);
    };

    this.$onTouchEnd = function (gestureState) {
        return _this2.$onTouchMove(gestureState);
    };

    this.$panHandlers = (0, _util.createPanResponder)({
        onTouchStart: this.$onTouchStart,
        onTouchMove: this.$onTouchMove,
        onTouchEnd: this.$onTouchEnd
    }).panHandlers;
};

exports.default = ColorRing;


var styles = _reactNative.StyleSheet.create({
    body: {
        position: 'relative',
        overflow: 'visible',
        alignItems: 'center',
        justifyContent: 'center'
    },
    ring: {
        position: 'absolute'
    },
    touch: {
        width: 40,
        height: 40,
        alignItems: 'center',
        justifyContent: 'center'
    },
    touchContainer: {
        position: 'relative',
        width: 25,
        height: 20,
        alignItems: 'center',
        justifyContent: 'center'
    },
    touchBackground: {
        width: 23,
        height: 18
    },
    touchImage: {
        position: 'absolute',
        width: 25,
        height: 20,
        top: 0,
        left: 0
    },
    touchCover: { // 在 Web 上，阻止图片被拖动
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        backgroundColor: 'transparent'
    }
});