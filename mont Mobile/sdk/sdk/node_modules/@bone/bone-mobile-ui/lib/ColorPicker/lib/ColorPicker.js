'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _tinycolor = require('tinycolor2');

var _tinycolor2 = _interopRequireDefault(_tinycolor);

var _LocaleProvider = require('../../LocaleProvider');

var _ColorButton = require('./ColorButton');

var _ColorButton2 = _interopRequireDefault(_ColorButton);

var _ColorRing = require('./ColorRing');

var _ColorRing2 = _interopRequireDefault(_ColorRing);

var _ColorBlock = require('./ColorBlock');

var _ColorBlock2 = _interopRequireDefault(_ColorBlock);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var windowInnerWidth = _reactNative.Dimensions.get('window').width;

var ringSize = 301 / 375 * windowInnerWidth + 40 * 2; // 色环的直径 + 40 * 2 的滑块预留宽高

var blockSize = 148 / 375 * windowInnerWidth; // 色块的宽高

// 颜色类型属性，只支持 HSV 的输入，这样不会导致误差太大
var colorType = _propTypes2.default.shape({
    h: _propTypes2.default.number, // 0 - 360
    s: _propTypes2.default.number, // 0 - 1
    v: _propTypes2.default.number // 0 - 1
});

var ColorPicker = function (_Component) {
    _inherits(ColorPicker, _Component);

    function ColorPicker(props) {
        _classCallCheck(this, ColorPicker);

        var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, props));

        _this.$onColorSelected = function () {

            _this.props.onColorSelected(_this.state.color);
        };

        _this.$onOldColorSelected = function () {

            _this.props.onOldColorSelected(_this.$oldColor);
        };

        _this.$onChange = function (h) {
            var _this$state$color = _this.state.color,
                s = _this$state$color.s,
                v = _this$state$color.v;


            _this.$onColorChange({ h: h, s: s, v: v });
        };

        _this.$onColorChange = function (_ref) {
            var h = _ref.h,
                s = _ref.s,
                v = _ref.v;
            var onColorChange = _this.props.onColorChange;


            if (!('color' in _this.props)) {

                _this.setState({
                    color: { h: h, s: s, v: v // 浅拷贝，保证不会出现相同引用
                    } });
            }

            onColorChange({ h: h, s: s, v: v }); // 浅拷贝，保证不会出现相同引用
        };

        _this.state = {
            color: _this.$getColor(props) // hsv 对象
        };
        return _this;
    }

    _createClass(ColorPicker, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {

            if ('color' in nextProps) {

                this.setState({
                    color: this.$getColor(nextProps) // hsv 对象
                });
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }

        // 获取 oldColor 值，hsv 对象

    }, {
        key: '$getColor',


        // 计算 color 状态值，hsv 对象
        // 优先级：color -> defaultColor -> oldColor -> 默认值
        value: function $getColor(props) {

            var color = void 0;

            if ('color' in props) {

                color = props.color;
            } else if ('defaultColor' in props) {

                color = props.defaultColor;
            } else if ('oldColor' in props) {

                color = props.oldColor;
            } else {

                color = { h: 0, s: 1, v: 1 };
            }

            return (0, _util.calHSV)(color);
        }
    }, {
        key: 'render',
        value: function render() {
            var boneLocale = this.props.boneLocale;
            var color = this.state.color;
            var h = color.h;


            var oldColor = this.$oldColor;

            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.body },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.headerContainer },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: { width: ringSize - 40 * 2 } },
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.header },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.headerText },
                                boneLocale.formatMessage('ColorPicker', 'latestColor')
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.headerText },
                                boneLocale.formatMessage('ColorPicker', 'oldColor')
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.buttonGroup },
                            _react2.default.createElement(_ColorButton2.default, {
                                style: styles.button,
                                color: color,
                                onPress: this.$onColorSelected,
                                isLeft: true
                            }),
                            _react2.default.createElement(_ColorButton2.default, {
                                style: styles.button,
                                color: oldColor,
                                onPress: this.$onOldColorSelected
                            })
                        )
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.colorContainer },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.colorBody },
                        _react2.default.createElement(_ColorRing2.default, {
                            size: ringSize,
                            h: h,
                            onChange: this.$onChange
                        }),
                        _react2.default.createElement(_ColorBlock2.default, {
                            style: styles.colorBlock,
                            size: blockSize,
                            color: color,
                            onColorChange: this.$onColorChange
                        })
                    )
                )
            );
        }
    }, {
        key: '$oldColor',
        get: function get() {

            var color = void 0;

            if ('oldColor' in this.props) {

                color = this.props.oldColor;
            } else {

                color = this.state.color;
            }

            return (0, _util.calHSV)(color);
        }
    }]);

    return ColorPicker;
}(_react.Component);

ColorPicker.propTypes = {
    color: colorType, // 定义选中的颜色值
    defaultColor: colorType, // 定义初始选中的颜色值
    oldColor: colorType, // 定义上一次选中的颜色值，主要是做视觉比对；如果未指定，则一直显示当前选中的颜色值
    onColorSelected: _propTypes2.default.func, // 点击“最新颜色”色块按钮，触发的回调函数
    onColorChange: _propTypes2.default.func, // 选中颜色发生变化时不断触发的回调函数
    onOldColorSelected: _propTypes2.default.func // 点击“历史颜色”色块按钮，触发的回调函数
};
ColorPicker.defaultProps = {
    onColorSelected: _util.fn,
    onColorChange: _util.fn,
    onOldColorSelected: _util.fn
};


var ConnectColorPicker = (0, _LocaleProvider.connectLocale)(ColorPicker);

// 暴露出的两个静态方法: toHSV & fromHSV
ConnectColorPicker.toHSV = _util.toHSV;

ConnectColorPicker.fromHSV = _util.fromHSV;

exports.default = ConnectColorPicker;


var styles = _reactNative.StyleSheet.create({
    body: {
        flex: 1, // 拾色器是领域组件，默认沾满全屏
        paddingTop: 30,
        backgroundColor: '#fff'
    },

    headerContainer: {
        alignItems: 'center'
    },
    header: {
        height: 20,
        marginBottom: 10,
        flexDirection: 'row',
        alignItems: 'center'
    },
    headerText: {
        flex: 1,
        fontSize: 14,
        fontWeight: 'bold',
        color: '#333',
        textAlign: 'center'
    },
    buttonGroup: {
        height: 34,
        borderWidth: 1,
        borderColor: '#dadada',
        borderRadius: 17,
        overflow: 'hidden',
        flexDirection: 'row'
    },
    button: {
        flex: 1
    },

    colorContainer: {
        flex: 1,
        justifyContent: 'center'
    },
    colorBody: {
        position: 'relative',
        overflow: 'visible',
        alignItems: 'center'
    },
    colorBlock: {
        position: 'absolute',
        top: (ringSize - blockSize) / 2,
        left: (windowInnerWidth - blockSize) / 2
    }
});