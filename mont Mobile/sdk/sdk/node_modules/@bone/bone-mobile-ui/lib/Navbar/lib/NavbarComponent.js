'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _NavbarButton = require('./NavbarButton');

var _NavbarButton2 = _interopRequireDefault(_NavbarButton);

var _NavbarButtonConst = require('./NavbarButtonConst');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * common navbar component class
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *


var isIPhoneX = _reactNative.Platform.OS === 'ios' && _reactNative.Dimensions.get('window').height === 812;

var NavbarComponent = function (_Component) {
  _inherits(NavbarComponent, _Component);

  function NavbarComponent() {
    _classCallCheck(this, NavbarComponent);

    return _possibleConstructorReturn(this, (NavbarComponent.__proto__ || Object.getPrototypeOf(NavbarComponent)).apply(this, arguments));
  }

  _createClass(NavbarComponent, [{
    key: 'renderNavBar',
    value: function renderNavBar(buttonContent, buttonStyle, pressEvent) {
      // 如果buttonContent 为字符串则直接使用默认的text，以及style
      if (typeof buttonContent === 'string') {
        var buttonElement = {
          text: buttonContent,
          style: buttonStyle
        };
        return _react2.default.createElement(_NavbarButton2.default, {
          onPress: pressEvent,
          buttonType: _NavbarButtonConst.textSymbol,
          buttonElement: buttonElement
        });
      } else if (buttonContent) {
        // 如果内容存在，则表明为组件
        return _react2.default.createElement(_NavbarButton2.default, {
          onPress: pressEvent,
          buttonType: _NavbarButtonConst.elementSymbol,
          buttonElement: buttonContent
        });
      } else if (buttonStyle) {
        var _buttonElement = {
          style: buttonStyle
        };
        return _react2.default.createElement(_NavbarButton2.default, {
          onPress: pressEvent,
          buttonType: _NavbarButtonConst.iconSymbol,
          buttonElement: _buttonElement
        });
      }
      // 为空则不绘制按钮
      return null;
    }

    /**
     * 绘制导航栏左边内容
     */

  }, {
    key: 'renderNavbarLeftButton',
    value: function renderNavbarLeftButton() {
      var _props = this.props,
          leftButtonContent = _props.leftButtonContent,
          style = _props.style,
          onLeftButtonPress = _props.onLeftButtonPress;

      var leftButtonStyle = style.leftButtonStyle;
      return this.renderNavBar(leftButtonContent, leftButtonStyle, onLeftButtonPress);
    }

    /**
     * 绘制导航标题
     */

  }, {
    key: 'renderNavbarTitle',
    value: function renderNavbarTitle() {
      var titleContent = this.props.titleContent;

      var titleStyle = this.props.style.titleStyle;
      // 如果title 为字符串则直接使用默认的text，以及titleStyle
      if (typeof titleContent === 'string') {
        if (titleContent.length > 8) {
          titleContent = titleContent.substr(0, 13) + '...';
        }
        return _react2.default.createElement(
          _reactNative.View,
          { style: styles.defaultTitleContainer },
          _react2.default.createElement(
            _reactNative.Text,
            { style: [styles.defaultTitleText, titleStyle] },
            titleContent
          )
        );
      } else if (titleContent) {
        // 如果title存在，则表明为组件
        return _react2.default.createElement(
          _reactNative.View,
          { style: styles.defaultTitleContainer },
          titleContent
        );
      }
    }

    /**
     * 绘制导航栏右边内容
     */

  }, {
    key: 'renderNavbarRightButton',
    value: function renderNavbarRightButton() {
      var _props2 = this.props,
          rightButtonContent = _props2.rightButtonContent,
          style = _props2.style,
          onRightButtonPress = _props2.onRightButtonPress;

      var rightButtonStyle = style.rightButtonStyle;
      return this.renderNavBar(rightButtonContent, rightButtonStyle, onRightButtonPress);
    }

    /**
     * 绘制导航栏内容
     */

  }, {
    key: 'render',
    value: function render() {
      var style = this.props.style;


      return _react2.default.createElement(
        _reactNative.View,
        { style: [styles.body, isIPhoneX ? { height: 84, paddingTop: 40 } : null, style.style] },
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.container },
          _react2.default.createElement(
            _reactNative.View,
            { style: { zIndex: 1 } },
            this.renderNavbarLeftButton()
          ),
          this.renderNavbarTitle(),
          _react2.default.createElement(
            _reactNative.View,
            { style: { zIndex: 1 } },
            this.renderNavbarRightButton()
          )
        )
      );
    }
  }]);

  return NavbarComponent;
}(_react.Component);

NavbarComponent.PropTypes = {
  /**
   * 左右按钮内容定制
   */
  leftButtonContent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),

  rightButtonContent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),

  titleContent: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
  /**
   * 样式属性，用于设置和定制导航栏样式
   */
  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array]),

  /**
   * 监听事件
   */
  onLeftButtonPress: _propTypes2.default.func,
  onRightButtonPress: _propTypes2.default.func
};
NavbarComponent.defaultProps = {
  // 设置style的默认值，防止后续调用报错。
  style: {}
};
exports.default = NavbarComponent;


var styles = _reactNative.StyleSheet.create({
  body: {
    height: _reactNative.Platform.OS === 'ios' ? 64 : 44,
    paddingTop: _reactNative.Platform.OS === 'ios' ? 20 : 0,
    paddingLeft: 16,
    paddingRight: 16,
    backgroundColor: '#1fc8a2'
  },

  container: {
    position: 'relative',
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between'
  },

  defaultTitleContainer: {
    position: 'absolute', // position is absolute
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    alignItems: 'center',
    justifyContent: 'center'
  },

  defaultTitleText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#fff'
  }
});