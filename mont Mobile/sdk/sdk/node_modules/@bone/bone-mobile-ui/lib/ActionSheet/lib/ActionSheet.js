'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RootSiblings = require('../../RootSiblings');

var _RootSiblings2 = _interopRequireDefault(_RootSiblings);

var _RootModal = require('../../RootModal');

var _ActionSheetContent = require('./ActionSheetContent');

var _ActionSheetContent2 = _interopRequireDefault(_ActionSheetContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var noop = function noop() {};

var _ref = [Symbol('react-native-action-sheet-config-prop'), Symbol('react-native-action-sheet-config'), Symbol('react-native-action-sheet-update'), Symbol('react-native-action-sheet-modal')],
    configPropSymbol = _ref[0],
    configSymbol = _ref[1],
    updateSymbol = _ref[2],
    modalSymbol = _ref[3];

var ActionSheet = function () {
    function ActionSheet(_ref2) {
        var _ref2$title = _ref2.title,
            title = _ref2$title === undefined ? '' : _ref2$title,
            _ref2$options = _ref2.options,
            options = _ref2$options === undefined ? [// 选项内容
        {
            text: '', // 选项文字
            autoClose: false // 触摸后是否自动关闭 ActionSheet，默认为 false
            // style 废弃
            // type 废弃
        }] : _ref2$options,
            _ref2$cancelButtonTex = _ref2.cancelButtonText,
            cancelButtonText = _ref2$cancelButtonTex === undefined ? '' : _ref2$cancelButtonTex,
            _ref2$onPress = _ref2.onPress,
            onPress = _ref2$onPress === undefined ? noop : _ref2$onPress;

        _classCallCheck(this, ActionSheet);

        this[configPropSymbol] = {
            title: title,
            options: options,
            cancelButtonText: cancelButtonText,
            onPress: onPress,
            visible: true
        };
    }

    // 私有，不暴露给开发者


    _createClass(ActionSheet, [{
        key: updateSymbol,
        value: function value() {
            var _this = this;

            var _configSymbol = this[configSymbol],
                _configSymbol$title = _configSymbol.title,
                title = _configSymbol$title === undefined ? '' : _configSymbol$title,
                _configSymbol$options = _configSymbol.options,
                options = _configSymbol$options === undefined ? [] : _configSymbol$options,
                _configSymbol$cancelB = _configSymbol.cancelButtonText,
                cancelButtonText = _configSymbol$cancelB === undefined ? '' : _configSymbol$cancelB,
                _configSymbol$onPress = _configSymbol.onPress,
                _onPress = _configSymbol$onPress === undefined ? noop : _configSymbol$onPress,
                _configSymbol$visible = _configSymbol.visible,
                visible = _configSymbol$visible === undefined ? true : _configSymbol$visible;

            var length = options.length;

            var element = _react2.default.createElement(_RootModal.PopupContainer, {
                visible: visible,
                onBackgroundPress: function onBackgroundPress() {

                    _this.destroy();

                    _onPress(_this, length);
                },
                onHideComplete: function onHideComplete() {
                    return _this[modalSymbol] && _this[modalSymbol].destroy();
                } // 隐藏动画结束后，destroy
                , children: _react2.default.createElement(_ActionSheetContent2.default, {
                    title: title,
                    optionTexts: options.map(function (option) {
                        return option.text || '';
                    }),
                    cancelButtonText: cancelButtonText,
                    onPress: function onPress(index) {

                        // 点击到了取消按钮
                        if (index === length) {

                            _this.destroy();
                        } else {
                            var _ref3 = options[index] || {},
                                _ref3$autoClose = _ref3.autoClose,
                                autoClose = _ref3$autoClose === undefined ? false : _ref3$autoClose;

                            autoClose && _this.destroy();
                        }

                        _onPress(_this, index);
                    }
                })
            });

            if (this[modalSymbol]) {

                this[modalSymbol].update(element);
            } else {

                this[modalSymbol] = new _RootSiblings2.default(element);
            }
        }

        // 公有，给开发者使用

    }, {
        key: 'destroy',


        // 销毁，隐藏动画结束后，销毁
        value: function destroy() {

            this[configPropSymbol] = {
                visible: false
            };
        }
    }, {
        key: configPropSymbol,
        set: function set(config) {

            this[configSymbol] = _extends({}, this[configSymbol] || {}, config);

            this[updateSymbol]();
        }
    }, {
        key: 'title',
        set: function set(title) {

            this[configPropSymbol] = { title: title };
        }
    }, {
        key: 'options',
        set: function set(options) {

            this[configPropSymbol] = { options: options };
        }
    }]);

    return ActionSheet;
}();

exports.default = ActionSheet;