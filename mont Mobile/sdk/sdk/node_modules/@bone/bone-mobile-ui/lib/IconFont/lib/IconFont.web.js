'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

require('../style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var IconFont = function (_Component) {
    _inherits(IconFont, _Component);

    function IconFont() {
        _classCallCheck(this, IconFont);

        return _possibleConstructorReturn(this, (IconFont.__proto__ || Object.getPrototypeOf(IconFont)).apply(this, arguments));
    }

    _createClass(IconFont, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps));
        }
    }, {
        key: 'render',
        value: function render() {

            var iconFont = unescape(this.props.iconFont.replace(/&#x/g, '%u').replace(/;/g, ''));

            var style = _extends({}, _reactNative.StyleSheet.flatten(this.props.style || {}));

            var width = style.width || style.fontSize || 20;

            var height = style.height || style.fontSize || 20;

            var _style$fontSize = style.fontSize,
                fontSize = _style$fontSize === undefined ? 20 : _style$fontSize,
                _style$textAlign = style.textAlign,
                textAlign = _style$textAlign === undefined ? 'center' : _style$textAlign,
                _style$color = style.color,
                color = _style$color === undefined ? '#1fc8a2' : _style$color;


            delete style.fontSize, delete style.textAlign, delete style.color;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, { width: width, height: height }, style] },
                _react2.default.createElement(
                    _reactNative.Text,
                    { className: 'bone-mobile-ui-icon-font', style: { fontSize: fontSize, textAlign: textAlign, color: color } },
                    iconFont
                )
            );
        }
    }]);

    return IconFont;
}(_react.Component);

IconFont.propTypes = {
    iconFont: _propTypes2.default.string
};
IconFont.defaultProps = {
    iconFont: ''
};
exports.default = IconFont;


var styles = _reactNative.StyleSheet.create({
    body: {
        backgroundColor: 'transparent',
        justifyContent: 'center'
    }
});