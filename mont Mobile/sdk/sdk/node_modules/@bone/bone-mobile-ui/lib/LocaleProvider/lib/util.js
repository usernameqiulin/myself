'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPlainObject = isPlainObject;
exports.formatMessage = formatMessage;

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _locale = require('../locale');

var _locale2 = _interopRequireDefault(_locale);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var messageReg = /\{\s*([\w\-]+)\s*\}/g;

function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }

  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}

/**
 * 获取国际化后的 message
 * @param {Object} [message] 国际化 message 库
 * @param {String} [compName] 组件名
 * @param {String} [id] 获取对应 message 用的属性名
 * @param {Object} [values] 填补 message 中的占位符
 * @param {Object} [options] 国际化用的其它选项
 * @param {String} [options.defaultMessage] 找不到 message 时，默认显示的 message
 **/
function formatMessage(message, compName, id) {
  var values = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

  (0, _invariant2.default)(typeof compName === 'string' && compName, 'Param compName must be provided and must be a string');
  (0, _invariant2.default)(typeof id === 'string' && id, 'Param id must be provided and must be a string');
  (0, _invariant2.default)(isPlainObject(values), 'Expected values to be a plain object');
  (0, _invariant2.default)(isPlainObject(options), 'Expected options to be a plain object');

  var messageItem = void 0;
  if (compName in message) {
    messageItem = message[compName][id];
  }
  messageItem = messageItem || options.defaultMessage;
  if (!messageItem) {
    return '';
  }

  return messageItem.replace(messageReg, function (match, name) {
    (0, _invariant2.default)(name in values, 'Message "' + messageItem + '" expects prop "' + name + '" to be in values');
    return values[name];
  });
}