"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var channel = __importStar(require("./channel"));
var network_1 = require("./network");
var hub_1 = require("../../hub");
var device_1 = require("../../interface/device");
var thingEvents = {
    '/thing/properties': device_1.BoneDevicePropertiesChange,
    '/thing/status': device_1.BoneDeviceStatusChange,
    '/thing/events': device_1.BoneDeviceEvent,
};
function subscribeAll(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        channel.ready({ mqttOptions: null })
            .then(function () {
            Object.keys(thingEvents).forEach(function (topic) {
                var event = thingEvents[topic];
                channel.subTopic(topic, function (data) {
                    if (typeof data === 'object' && data.payload) {
                        hub_1.message.emit(event, data.payload);
                    }
                });
            });
            resolve();
        })
            .catch(function (err) { return reject(err); });
    });
}
exports.subscribeAll = subscribeAll;
function unsubscribeAll(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        Object.keys(thingEvents).forEach(function (topic) { return channel.unsubTopic(topic, undefined); });
        resolve();
    });
}
exports.unsubscribeAll = unsubscribeAll;
function getStatus(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        sendRequest('/thing/status/get', { iotId: deviceIdentity.iotId })
            .then(function (res) {
            if (typeof res.data !== 'object' || typeof res.data.status !== 'number' || typeof res.data.time !== 'number') {
                reject(new Error('illegal data'));
                return;
            }
            resolve(formatStatus(res.data));
        })
            .catch(function (err) { return reject(err); });
    });
}
exports.getStatus = getStatus;
function getProps(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        sendRequest('/thing/properties/get', { iotId: deviceIdentity.iotId })
            .then(function (res) {
            if (typeof res.data !== 'object') {
                reject(new Error('illegal data'));
                return;
            }
            resolve(formatProps(res.data));
        })
            .catch(function (err) { return reject(err); });
    });
}
exports.getProps = getProps;
function getEvents(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        sendRequest('/thing/events/get', { iotId: deviceIdentity.iotId })
            .then(function (res) {
            var events = Array.isArray(res.data) ? res.data : [];
            resolve(events);
        })
            .catch(function (err) { return reject(err); });
    });
}
exports.getEvents = getEvents;
function setProps(deviceIdentity, props) {
    return sendRequest('/thing/properties/set', { iotId: deviceIdentity.iotId, items: props });
}
exports.setProps = setProps;
function callService(deviceIdentity, serviceName, params) {
    return sendRequest('/thing/service/invoke', {
        iotId: deviceIdentity.iotId,
        identifier: serviceName,
        args: params,
    });
}
exports.callService = callService;
function getProductInfo(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        network_1.APIGateway('/thing/detailInfo/queryProductInfo', {
            version: '1.1.1',
            authType: 'iotAuth',
            data: deviceIdentity,
        })
            .then(function (res) {
            if (!res.data) {
                reject(new Error('illegal data'));
                return;
            }
            resolve(res.data);
        })
            .catch(function (err) { return reject(err); });
    });
}
exports.getProductInfo = getProductInfo;
function sendRequest(uri, params) {
    return network_1.APIGateway(uri, {
        data: params,
        version: '1.0.0',
        authType: 'iotAuth',
    });
}
function formatProps(raw) {
    var props = {};
    Object.keys(raw).forEach(function (key) {
        props[key] = raw[key].value;
    });
    return props;
}
function formatStatus(raw) {
    return raw.status;
}
