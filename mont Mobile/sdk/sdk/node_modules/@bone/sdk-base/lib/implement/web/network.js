"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("whatwg-fetch");
var iot_gateway_1 = __importDefault(require("@bone/iot-gateway"));
var invariant_1 = __importDefault(require("invariant"));
var http_1 = require("../../interface/http");
var netInfo_1 = require("../../interface/netInfo");
var hub_1 = require("../../hub");
var APIGatewayDefaults = {
    method: http_1.HTTPMethod.POST,
    data: {}
};
function APIGateway(url, options) {
    options = __assign({}, APIGatewayDefaults, options);
    var method = options.method, version = options.version, data = options.data, gateway = options.gateway;
    invariant_1.default(method.toLowerCase() === http_1.HTTPMethod.POST, 'Only accept post method for now.');
    return iot_gateway_1.default.post({
        url: url,
        apiVer: version,
        params: data,
        apigw: gateway
    });
}
exports.APIGateway = APIGateway;
function request(url, options) {
    if (typeof url === "object") {
        options = url;
        url = options.url;
    }
    var defaultCredentials = "same-origin";
    var fetchOptions = __assign({ credentials: defaultCredentials }, http_1.defaults, options);
    var method = fetchOptions.method.toUpperCase();
    var body;
    if (fetchOptions.data) {
        if (method === "GET") {
            url += (/\?/.test(url) ? "&" : "?") + Object.keys(fetchOptions.data).map(function (name) { return name + "=" + fetchOptions.data[name]; }).join("&");
        }
        else if (method !== "HEAD") {
            if (typeof fetchOptions.data === "string" || fetchOptions.data instanceof FormData) {
                body = fetchOptions.data;
            }
            else {
                body = JSON.stringify(fetchOptions.data);
            }
        }
    }
    return fetch(url, {
        method: method,
        headers: {
            'Content-Type': 'application/json'
        },
        credentials: fetchOptions.credentials,
        body: body
    });
}
exports.request = request;
var netInfoMapping = {
    // 有网时：
    wifi: netInfo_1.NETWORK_STATUS.WIFI,
    '2g': netInfo_1.NETWORK_STATUS.CELL,
    '3g': netInfo_1.NETWORK_STATUS.CELL,
    '4g': netInfo_1.NETWORK_STATUS.CELL,
    cell: netInfo_1.NETWORK_STATUS.CELL,
    // 无网时：
    none: netInfo_1.NETWORK_STATUS.NONE,
    // 其他：
    unknown: netInfo_1.NETWORK_STATUS.UNKNOWN,
};
function fetchNetInfo() {
    return new Promise(function (resolve, reject) {
        var type = window.navigator.onLine ? 'wifi' : 'none';
        resolve(netInfoMapping[type]);
    });
}
exports.fetchNetInfo = fetchNetInfo;
function onNetworkChange() {
    fetchNetInfo().then(function (networkStatus) { return hub_1.message.emit(netInfo_1.EVENT_NETINFO_CHANGE, networkStatus); });
}
window.addEventListener('online', onNetworkChange);
window.addEventListener('offline', onNetworkChange);
