"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bridge_1 = __importDefault(require("./bridge"));
var hub_1 = require("../../hub");
var constants_1 = require("./constants");
var device_1 = require("../../interface/device");
var network_1 = require("./network");
function subscribeAll(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        bridge_1.default.call(constants_1.MODULE_NAME_NATIVE.DEVICE, 'subscribeAll', [deviceIdentity], function (err) {
            if (err) {
                reject(err);
                return;
            }
            resolve();
        });
    });
}
exports.subscribeAll = subscribeAll;
function unsubscribeAll(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        bridge_1.default.call(constants_1.MODULE_NAME_NATIVE.DEVICE, 'unsubscribeAll', [deviceIdentity], function (err) {
            if (err) {
                reject(err);
                return;
            }
            resolve();
        });
    });
}
exports.unsubscribeAll = unsubscribeAll;
function getStatus(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        bridge_1.default.call(constants_1.MODULE_NAME_NATIVE.DEVICE, 'getStatus', [deviceIdentity], function (err, res) {
            if (err) {
                reject(err);
                return;
            }
            if (typeof res.data !== 'object' || typeof res.data.status !== 'number' || typeof res.data.time !== 'number') {
                reject(new Error('illegal data'));
                return;
            }
            resolve(formatStatus(res.data));
        });
    });
}
exports.getStatus = getStatus;
function getProps(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        bridge_1.default.call(constants_1.MODULE_NAME_NATIVE.DEVICE, 'getProps', [deviceIdentity], function (err, res) {
            if (err) {
                reject(err);
                return;
            }
            var data = res.data;
            if (typeof res.data !== 'object') {
                reject(new Error('illegal data'));
                return;
            }
            resolve(formatProps(data));
        });
    });
}
exports.getProps = getProps;
function getEvents(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        bridge_1.default.call(constants_1.MODULE_NAME_NATIVE.DEVICE, 'getEvents', [deviceIdentity], function (err, res) {
            if (err) {
                reject(err);
                return;
            }
            var events = Array.isArray(res.data) ? res.data : [];
            resolve(events);
        });
    });
}
exports.getEvents = getEvents;
function setProps(deviceIdentity, props) {
    return new Promise(function (resolve, reject) {
        bridge_1.default.call(constants_1.MODULE_NAME_NATIVE.DEVICE, 'setProps', [{
                iotId: deviceIdentity.iotId,
                items: props,
            }], function (err) {
            if (err) {
                reject(err);
                return;
            }
            resolve();
        });
    });
}
exports.setProps = setProps;
function callService(deviceIdentity, serviceName, params) {
    return new Promise(function (resolve, reject) {
        bridge_1.default.call(constants_1.MODULE_NAME_NATIVE.DEVICE, 'callService', [{
                iotId: deviceIdentity.iotId,
                identifier: serviceName,
                args: params,
            }], function (err, res) {
            if (err) {
                reject(err);
                return;
            }
            resolve(res);
        });
    });
}
exports.callService = callService;
function getProductInfo(deviceIdentity) {
    return new Promise(function (resolve, reject) {
        network_1.APIGateway('/thing/detailInfo/queryProductInfo', {
            version: '1.1.1',
            authType: 'iotAuth',
            data: deviceIdentity,
        }).then(function (res) {
            if (!res.data) {
                reject(new Error('illegal data'));
                return;
            }
            resolve(res.data);
        }).catch(function (err) {
            reject(err);
        });
    });
}
exports.getProductInfo = getProductInfo;
// initialize device events
// delegate to hub message center
bridge_1.default.on(device_1.BoneDeviceEvent, function (evt) {
    hub_1.message.emit(device_1.BoneDeviceEvent, evt);
});
bridge_1.default.on(device_1.BoneDeviceStatusChange, function (rawStatus) {
    hub_1.message.emit(device_1.BoneDeviceStatusChange, formatStatus(rawStatus));
});
bridge_1.default.on(device_1.BoneDevicePropertiesChange, function (rawProps) {
    hub_1.message.emit(device_1.BoneDevicePropertiesChange, formatProps(rawProps.items));
});
function formatProps(raw) {
    var props = {};
    Object.keys(raw).forEach(function (key) {
        props[key] = raw[key].value;
    });
    return props;
}
function formatStatus(raw) {
    return raw.status;
}
