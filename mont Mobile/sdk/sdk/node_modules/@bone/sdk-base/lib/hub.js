"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var koa_compose_es5_1 = __importDefault(require("@bone/koa-compose-es5"));
var logger_1 = __importDefault(require("@bone/logger"));
var invariant_1 = __importDefault(require("invariant"));
var type_detect_1 = __importDefault(require("type-detect"));
var event_emitter_1 = __importDefault(require("@bone/event-emitter"));
var log = logger_1.default.create({
    module: 'bone-mobile',
    label: ['sdk', 'sdk/bridge'],
});
var message = Object.assign({}, event_emitter_1.default);
exports.message = message;
// original middlewares
var mwArr = [];
// composed middleware
var middleware;
// bridge modules
var modules = {};
function call(module, method, params) {
    if (params === void 0) { params = []; }
    invariant_1.default(type_detect_1.default(module) === 'string', 'Module name should be string');
    invariant_1.default(type_detect_1.default(method) === 'string', 'Method name should be string');
    invariant_1.default(type_detect_1.default(params) === 'Array', 'Params should either be array or left blank(undefined)');
    var ctx = {
        module: module,
        method: method,
        params: params,
    };
    return new Promise(function (resolve, reject) {
        middleware(ctx)
            .then(function () {
            ctx.error ?
                // handle logic error from module implements
                reject(ctx.error) :
                resolve(ctx.result);
        })
            // handle unexpected exception
            .catch(function (err) { return reject(err); });
    });
}
exports.call = call;
function register(module, implement, override) {
    if (override === void 0) { override = false; }
    invariant_1.default(type_detect_1.default(module) === 'string', 'Module name should be string');
    invariant_1.default(type_detect_1.default(implement) === 'Object', 'Moudle implement should be object, which contains methods of module');
    invariant_1.default(override || !modules[module], 'Module already existed. Tip: you can register with override option');
    // copy implement object to defend accidental modification
    modules[module] = __assign({}, implement);
}
exports.register = register;
function middlewareLogger(ctx, next) {
    return __awaiter(this, void 0, void 0, function () {
        var module, method, params, start, end;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    module = ctx.module, method = ctx.method, params = ctx.params;
                    log.debug("bridge.call[" + logger_1.default.sn() + "] " + module + "/" + method + " params:", params);
                    start = Date.now();
                    return [4 /*yield*/, next()];
                case 1:
                    _a.sent();
                    end = Date.now();
                    ctx.error ?
                        log.warn("bridge.call[" + logger_1.default.sn() + "] " + module + "/" + method + " consumed " + (end - start) + "ms, error:", ctx.error) :
                        log.debug("bridge.call[" + logger_1.default.sn() + "] " + module + "/" + method + " consumed " + (end - start) + "ms, result:", ctx.result);
                    return [2 /*return*/];
            }
        });
    });
}
// dispatch bridge calls to modules
// last middleware
function dispatcher(ctx, next) {
    return __awaiter(this, void 0, void 0, function () {
        var module, method, params, ret, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    module = ctx.module, method = ctx.method, params = ctx.params;
                    invariant_1.default(modules[module], 'Module not registered yet. Use hub.register to register first');
                    invariant_1.default(type_detect_1.default(modules[module][method]) === 'function', "Unexpected implement of method " + module + "/" + method + ".");
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, modules[module][method].apply(ctx, params)];
                case 2:
                    ret = _a.sent();
                    ctx.error = null;
                    ctx.result = ret;
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    ctx.error = err_1;
                    ctx.result = null;
                    return [3 /*break*/, 4];
                case 4:
                    next();
                    return [2 /*return*/];
            }
        });
    });
}
function use() {
    var mws = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        mws[_i] = arguments[_i];
    }
    // append middlewares
    mwArr = mwArr.concat(mws);
    // @todo logger is optional
    middleware = koa_compose_es5_1.default([middlewareLogger].concat(mwArr, [dispatcher]));
}
exports.use = use;
// only for unit test
function restore() {
    // @todo warning
    mwArr = [];
    use();
    modules = {};
}
exports.restore = restore;
// initial middleware
use();
