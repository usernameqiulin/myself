"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hub_1 = require("../../hub");
var constants_1 = require("../constants");
var DEVICE_STATUS;
(function (DEVICE_STATUS) {
    // 未激活
    DEVICE_STATUS[DEVICE_STATUS["inactive"] = 0] = "inactive";
    // 上线
    DEVICE_STATUS[DEVICE_STATUS["online"] = 1] = "online";
    // 离线
    DEVICE_STATUS[DEVICE_STATUS["offline"] = 3] = "offline";
    // 禁用
    DEVICE_STATUS[DEVICE_STATUS["disabled"] = 8] = "disabled";
})(DEVICE_STATUS = exports.DEVICE_STATUS || (exports.DEVICE_STATUS = {}));
// device events
exports.BoneDeviceEvent = 'BoneThingEvent';
exports.BoneDeviceStatusChange = 'BoneThingStatusChange';
exports.BoneDevicePropertiesChange = 'BoneThingPropertiesChange';
function subscribeAll(deviceIdentity) {
    return hub_1.call(constants_1.MODULE_NAME_HUB.DEVICE, 'subscribeAll', [deviceIdentity]);
}
exports.subscribeAll = subscribeAll;
function unsubscribeAll(deviceIdentity) {
    return hub_1.call(constants_1.MODULE_NAME_HUB.DEVICE, 'unsubscribeAll', [deviceIdentity]);
}
exports.unsubscribeAll = unsubscribeAll;
function getStatus(deviceIdentity) {
    return hub_1.call(constants_1.MODULE_NAME_HUB.DEVICE, 'getStatus', [deviceIdentity]);
}
exports.getStatus = getStatus;
function getProps(deviceIdentity) {
    return hub_1.call(constants_1.MODULE_NAME_HUB.DEVICE, 'getProps', [deviceIdentity]);
}
exports.getProps = getProps;
function getEvents(deviceIdentity) {
    return hub_1.call(constants_1.MODULE_NAME_HUB.DEVICE, 'getEvents', [deviceIdentity]);
}
exports.getEvents = getEvents;
function setProps(deviceIdentity, props) {
    return hub_1.call(constants_1.MODULE_NAME_HUB.DEVICE, 'setProps', [deviceIdentity, props]);
}
exports.setProps = setProps;
function callService(deviceIdentity, serviceName, params) {
    return hub_1.call(constants_1.MODULE_NAME_HUB.DEVICE, 'callService', [deviceIdentity, serviceName, params]);
}
exports.callService = callService;
function onEvent(callback) {
    hub_1.message.on(exports.BoneDeviceEvent, callback);
}
exports.onEvent = onEvent;
function offEvent(callback) {
    hub_1.message.off(exports.BoneDeviceEvent, callback);
}
exports.offEvent = offEvent;
function onStatusChange(callback) {
    hub_1.message.on(exports.BoneDeviceStatusChange, callback);
}
exports.onStatusChange = onStatusChange;
function offStatusChange(callback) {
    hub_1.message.off(exports.BoneDeviceStatusChange, callback);
}
exports.offStatusChange = offStatusChange;
function onPropsChange(callback) {
    hub_1.message.on(exports.BoneDevicePropertiesChange, callback);
}
exports.onPropsChange = onPropsChange;
function offPropsChange(callback) {
    hub_1.message.off(exports.BoneDevicePropertiesChange, callback);
}
exports.offPropsChange = offPropsChange;
function getProductInfo(deviceIdentity) {
    return hub_1.call(constants_1.MODULE_NAME_HUB.DEVICE, 'getProductInfo', [deviceIdentity]);
}
exports.getProductInfo = getProductInfo;
