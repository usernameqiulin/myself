"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Subject_1 = require("rxjs/Subject");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var logger_1 = __importDefault(require("@bone/logger"));
require("rxjs/add/operator/map");
require("rxjs/add/operator/filter");
var invariant_1 = __importDefault(require("invariant"));
var APIs_1 = require("./APIs");
var log = logger_1.default.create({
    module: '@bone/sdk-base/Device',
    label: ['device', 'sdk'],
});
var IDENTIFIER_CONSTANT = {
    SET_PROPERTY_ERROR: 'SET_PROPERTY_ERROR',
    INVOKE_SERVICE_ERROR: 'INVOKE_SERVICE_ERROR'
};
var noop = function () { };
// 请求超时时间
var TIMEOUT = 5000;
var Device = /** @class */ (function () {
    function Device(props) {
        this.info = {};
        this.props = {};
        this.status = 1;
        this.event = null;
        invariant_1.default(props.iotId, "Device: iotId is required for device initialization");
        Object.assign(this, props);
        this.connect();
    }
    Object.defineProperty(Device.prototype, "deviceIdentity", {
        get: function () {
            return {
                iotId: this.iotId
            };
        },
        enumerable: true,
        configurable: true
    });
    Device.prototype.connect = function () {
        var _this = this;
        log.info('device start');
        // 拉取初始化数据
        this.fetchData();
        this.subscribeAll();
        // 初始化observables对象
        this.status$ = new BehaviorSubject_1.BehaviorSubject(this.status);
        this.props$ = new BehaviorSubject_1.BehaviorSubject(this.props);
        this.info$ = new BehaviorSubject_1.BehaviorSubject(this.info);
        this.statusChange$ = new Subject_1.Subject();
        this.propsChange$ = new Subject_1.Subject();
        this.event$ = new Subject_1.Subject();
        // 初始化订阅
        this.propsChange$.subscribe(function (props) {
            _this.props = Object.assign({}, _this.props, props);
            _this.props$.next(_this.props);
        });
        this.props$.subscribe(function (props) {
            _this.props = props;
        });
        this.statusChange$.subscribe(function (status) {
            _this.status = status;
            _this.status$.next(status);
        });
        this.info$.subscribe(function (info) {
            _this.info = info;
        });
    };
    Device.prototype.fetchData = function () {
        var _this = this;
        log.info("fetch data by iotId " + this.iotId);
        log.info('fetch initial props');
        APIs_1.getProps(this.deviceIdentity)
            .then(function (props) {
            log.info('fetch initial props res', props);
            _this.props$.next(props);
        })
            .catch(function (err) {
            log.error('fetch initial props error', err);
        });
        log.info('fetch initial status');
        APIs_1.getStatus(this.deviceIdentity)
            .then(function (status) {
            log.info('fetch initial status res', status);
            _this.status = status || APIs_1.DEVICE_STATUS.offline;
            _this.status$.next(_this.status);
        })
            .catch(function (err) {
            log.error('fetch initial status error', err);
        });
        log.info('fetch initial events');
        APIs_1.getEvents(this.deviceIdentity)
            .then(function (events) {
            log.info('fetch initial events res', events);
            events.forEach(function (ev) {
                _this.event$.next(ev);
            });
        })
            .catch(function (err) {
            log.error('fetch initial event error', err);
        });
        log.info('fetch product info');
        APIs_1.getProductInfo(this.deviceIdentity)
            .then(function (productInfo) {
            log.info('fetch product info res', productInfo);
            _this.info$.next(productInfo);
        })
            .catch(function (err) {
            log.error('fetch product info', err);
        });
    };
    Device.prototype.subscribeAll = function () {
        var _this = this;
        log.info("subscribe by iotId " + this.iotId);
        APIs_1.subscribeAll(this.deviceIdentity)
            .then(function () {
            log.info("subscribe by iotId " + _this.iotId);
            APIs_1.onEvent(function (ev) {
                log.info('onEvent', ev);
                _this.event$.next(ev);
            });
            APIs_1.onStatusChange(function (status) {
                log.info('onStatusChange', status);
                _this.statusChange$.next(status);
            });
            APIs_1.onPropsChange(function (props) {
                log.info('onPropsChange', props);
                _this.propsChange$.next(props);
            });
        }).catch(function (err) {
            log.error('subscribe by iotId error', err);
        });
    };
    Device.prototype.unsubscribeAll = function () {
        var _this = this;
        log.info("unsubscribe by iotId " + this.iotId);
        APIs_1.unsubscribeAll(this.deviceIdentity)
            .then(function () {
            log.info("unsubscribe by iotId " + _this.iotId);
        })
            .catch(function (err) {
            log.error("unsubscribe by iotId " + _this.iotId + " error", err);
        });
    };
    Device.prototype.dispatch = function (action) {
        var serviceName = action.serviceName;
        // for resume
        var preProps = Object.assign({}, this.props);
        var params = action.params;
        var props = Object.assign({}, this.props, params);
        this.props = props;
        this.props$.next(props);
        var isSetProps = serviceName === 'set';
        if (isSetProps) {
            log.info('dispatch set props', this.iotId, params);
            APIs_1.setProps(this.deviceIdentity, params)
                .then(onSuccess)
                .catch(onError.bind(this));
        }
        else {
            log.info('dispatch call service', this.iotId, params);
            APIs_1.callService(this.deviceIdentity, serviceName, params)
                .then(onSuccess)
                .catch(onError.bind(this));
        }
        function onSuccess() {
            log.info('dispatch res success');
        }
        function onError(err) {
            // error resume after optimistic update
            this.props$.next(preProps);
            // server error pass to view
            var e = err;
            this.event$.next({
                identifier: isSetProps
                    ? IDENTIFIER_CONSTANT.SET_PROPERTY_ERROR
                    : IDENTIFIER_CONSTANT.INVOKE_SERVICE_ERROR,
                type: 'error',
                err: e
            });
            return log.error('dispatch serivce error, serviceName:%s, params:%s, error:%s', serviceName, JSON.parse(params), e.message);
        }
    };
    return Device;
}());
exports.default = Device;
