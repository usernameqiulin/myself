{"version":3,"sources":["../src/index.js"],"names":["Bone","bridge","MODULE_NAME_LOG","levels","logger","log","level","args","indexOf","length","call","JSON","stringify","err","message","error","warn","info","debug"],"mappings":";;;;;;AAAA;;;;;;AAEA,yBAAUA,IAAV,EACE,oCADF;;AAGA,yBAAUA,KAAKC,MAAf,EACE,0CADF;;AAGA,IAAMC,kBAAkB,SAAxB;;AAEA,IAAMC,SAAS,CAAC,OAAD,EAAU,SAAV,EAAqB,MAArB,EAA6B,OAA7B,CAAf;;AAEA,IAAMC,SAAS;AACXC,KADW,eACPC,KADO,EACAC,IADA,EACM;AACb,6BAAUJ,OAAOK,OAAP,CAAeF,KAAf,MAA0B,CAAC,CAArC,EACE,oDADF;;AAGA,6BAAUC,KAAKE,MAAL,GAAc,CAAxB,EACE,6BADF;;AAGA;AACA,QAAI;AACFT,WAAKC,MAAL,CAAYS,IAAZ,CAAiBR,eAAjB,EAAkC,KAAlC,EAAyC,CAACI,KAAD,EAAQ,EAAR,EAAYK,KAAKC,SAAL,CAAeL,IAAf,CAAZ,CAAzC;AACD,KAFD,CAEE,OAAMM,GAAN,EAAU;AACVb,WAAKC,MAAL,CAAYS,IAAZ,CAAiBR,eAAjB,EAAkC,KAAlC,EAAyC,CAAC,OAAD,EAAU,EAAV,oCAA8CW,IAAIC,OAAlD,CAAzC;AACD;AACJ,GAdU;AAgBXC,OAhBW,mBAgBI;AAAA,sCAANR,IAAM;AAANA,UAAM;AAAA;;AACX,SAAKF,GAAL,CAAS,OAAT,EAAkBE,IAAlB;AACH,GAlBU;AAoBXS,MApBW,kBAoBG;AAAA,uCAANT,IAAM;AAANA,UAAM;AAAA;;AACV,SAAKF,GAAL,CAAS,SAAT,EAAoBE,IAApB;AACH,GAtBU;AAwBXU,MAxBW,kBAwBG;AAAA,uCAANV,IAAM;AAANA,UAAM;AAAA;;AACV,SAAKF,GAAL,CAAS,MAAT,EAAiBE,IAAjB;AACH,GA1BU;AA4BXW,OA5BW,mBA4BI;AAAA,uCAANX,IAAM;AAANA,UAAM;AAAA;;AACX,SAAKF,GAAL,CAAS,OAAT,EAAkBE,IAAlB;AACH;AA9BU,CAAf;;kBAiCeH,M","file":"index.js","sourcesContent":["import invariant from 'invariant';\n\ninvariant(Bone,\n  'It looks like Bone is not imported');\n\ninvariant(Bone.bridge,\n  'It looks like Bone.bridge is not defined');\n\nconst MODULE_NAME_LOG = 'BoneLog';\n\nconst levels = ['Error', 'Warning', 'Info', 'Debug'];\n\nconst logger = {\n    log(level, args) {\n        invariant(levels.indexOf(level) !== -1,\n          'logger: level must be one of debug/info/warn/error');\n\n        invariant(args.length > 0,\n          'logger: no message assigned');\n\n        // use bone-logger filter instead of tag here\n        try {\n          Bone.bridge.call(MODULE_NAME_LOG, 'log', [level, '', JSON.stringify(args)]);\n        } catch(err){\n          Bone.bridge.call(MODULE_NAME_LOG, 'log', ['Error', '', `JSON.stringify message error ${err.message}`]);\n        }\n    },\n\n    error(...args) {\n        this.log('Error', args);\n    },\n\n    warn(...args) {\n        this.log('Warning', args);\n    },\n\n    info(...args) {\n        this.log('Info', args);\n    },\n\n    debug(...args) {\n        this.log('Debug', args);\n    }\n}\n\nexport default logger;"]}