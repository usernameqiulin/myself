'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _invariant2.default)(Bone, 'It looks like Bone is not imported');

(0, _invariant2.default)(Bone.bridge, 'It looks like Bone.bridge is not defined');

var MODULE_NAME_LOG = 'BoneLog';

var levels = ['Error', 'Warning', 'Info', 'Debug'];

var logger = {
  log: function log(level, args) {
    (0, _invariant2.default)(levels.indexOf(level) !== -1, 'logger: level must be one of debug/info/warn/error');

    (0, _invariant2.default)(args.length > 0, 'logger: no message assigned');

    // use bone-logger filter instead of tag here
    try {
      Bone.bridge.call(MODULE_NAME_LOG, 'log', [level, '', JSON.stringify(args)]);
    } catch (err) {
      Bone.bridge.call(MODULE_NAME_LOG, 'log', ['Error', '', 'JSON.stringify message error ' + err.message]);
    }
  },
  error: function error() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    this.log('Error', args);
  },
  warn: function warn() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    this.log('Warning', args);
  },
  info: function info() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    this.log('Info', args);
  },
  debug: function debug() {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    this.log('Debug', args);
  }
};

exports.default = logger;
//# sourceMappingURL=index.js.map