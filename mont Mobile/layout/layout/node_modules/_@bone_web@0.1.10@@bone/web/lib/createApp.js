"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (config, appName) {
    if (typeof config === "function") {
        config = {
            appName: appName,
            router: {
                routes: [{
                    page: config
                }]
            }
        };
    }

    appName = "";

    if (!config.appName) {
        config.container = document.createElement("div");
        document.body.appendChild(config.container);
    } else if (typeof config.appName === "string") {
        appName = config.appName;
        config.container = document.getElementById(config.appName);
    } else {
        config.container = config.appName;
    }
    delete config.appName;

    // 第二个app实例开始，如果没有指定historyMode，使用memory方式
    // 主要用于插件中
    if (global._boneWebAppLenth && !config.historyMode) {
        config.historyMode = "memory";
        // 获取主应用传递给插件的信息
        if (appName && window["__bone_plugins__"]) {
            var pluginInfo = window["__bone_plugins__"][appName];
            if (pluginInfo) {
                // 插件默认打开的页面
                config.initialPath = pluginInfo.url;
                delete window["__bone_plugins__"][appName];
            }
        }
    }
    // 兼容bone-web-sdk@0.3.x的插件，记录app实例数量
    // 除第一个app实例之外，全部用memory的history
    global._boneWebAppLenth = (global._boneWebAppLenth || 0) + 1;

    var hasNoMatch = false;

    if (config.component && !config.router) {
        config.router = {
            routes: [{
                page: config.component
            }]
        };

        delete config.component;
    }

    config.routes = config.router.routes.map(function (route) {
        route.layout = route.layout || config.layout;
        route.placeholder = route.placeholder || config.placeholder;

        if (!route.path || route.path === "*") {
            hasNoMatch = true;
        }

        return {
            path: route.path,
            component: route.page,
            layout: route.layout,
            placeholder: route.placeholder,
            initialProps: route.initialProps
        };
    });

    // 设置404页面
    if (!hasNoMatch) {
        config.routes.push({
            path: "*",
            component: config.router.notFound || _NoMatch2.default
        });
    }

    delete config.router;

    var app = new _Application2.default(config);

    if (config.autoStart !== false) {
        app.start();
    }

    return app;
};

var _Application = require("./Application");

var _Application2 = _interopRequireDefault(_Application);

var _NoMatch = require("./NoMatch");

var _NoMatch2 = _interopRequireDefault(_NoMatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }