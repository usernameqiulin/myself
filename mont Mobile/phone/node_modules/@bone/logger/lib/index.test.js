'use strict';

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var appender = {
    debug: function debug() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        this.log('debug', args);
    },
    info: function info() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        this.log('info', args);
    },
    warn: function warn() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
        }

        this.log('warn', args);
    },
    error: function error() {
        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
        }

        this.log('error', args);
    },
    log: function log(level, args) {
        logCollector.push([level, args]);
    },
    last: function last() {
        return logCollector[logCollector.length - 1];
    }
};

var logCollector = [];

describe('class logger', function () {
    afterEach(function () {
        // reset config
        _index2.default.conf = _index2.default.DEF_CONF.RELEASE;
        _index2.default.filter = null;
    });

    test('conf', function () {
        // test default config
        expect(_index2.default.conf).toBeTruthy();
        expect(_index2.default.conf.level).toBeTruthy();

        // test config setter
        _index2.default.conf = {
            level: _index2.default.LEVEL.DEBUG
        };

        expect(_index2.default.conf.level).toBe(_index2.default.LEVEL.DEBUG);
    });

    test('filter', function () {
        _index2.default.filter = ['filtered'];
        expect(_index2.default.filter({ label: ['filtered'] })).toBeTruthy();
        expect(_index2.default.filter({ label: ['notFiltered'] })).toBeFalsy();
    });

    test('log', function () {
        _index2.default.conf = {
            level: _index2.default.LEVEL.DEBUG,
            appender: appender
        };

        var log = _index2.default.create({
            module: 'm'
        });

        // basic message
        var inst = log.debug('test');
        var args = appender.last(); // [level, args]

        var msg = args[1][0];

        // check level
        expect(args[0]).toBe(_index2.default.LEVEL.DEBUG);

        // check prefix
        // [module]:[YY-MM-DD HH:mm:ss:SSS]:[level] - 
        var prefixExp = /^\[m\]:\[\d{2}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:\d{1,2}:\d{1,3}\]:\[debug\] - /;
        expect(msg).toMatch(prefixExp);

        // check msg
        msg = msg.replace(prefixExp, '');
        expect(msg).toEqual('test');

        // check instance object
        expect(inst.level).toEqual(_index2.default.LEVEL.DEBUG);
        expect(inst.module).toEqual('m');
        expect(inst.time).toBeInstanceOf(Date);
        expect(inst.message).toEqual(['test']);
    });

    test('create log instance with function', function () {
        _index2.default.conf = {
            level: _index2.default.LEVEL.DEBUG,
            appender: appender
        };

        var log = (0, _index2.default)('m');

        // basic message
        var inst = log.debug('test');
        var args = appender.last(); // [level, args]

        var msg = args[1][0];

        // check level
        expect(args[0]).toBe(_index2.default.LEVEL.DEBUG);

        // check prefix
        // [module]:[YY-MM-DD HH:mm:ss:SSS]:[level] - 
        var prefixExp = /^\[m\]:\[\d{2}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:\d{1,2}:\d{1,3}\]:\[debug\] - /;
        expect(msg).toMatch(prefixExp);

        // check msg
        msg = msg.replace(prefixExp, '');
        expect(msg).toEqual('test');

        // check instance object
        expect(inst.level).toEqual(_index2.default.LEVEL.DEBUG);
        expect(inst.module).toEqual('m');
        expect(inst.time).toBeInstanceOf(Date);
        expect(inst.message).toEqual(['test']);
    });
});

// describe('logger', ()=>{
//     beforeEach(()=>{

//     })
// });
//# sourceMappingURL=index.test.js.map