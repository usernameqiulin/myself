{"version":3,"sources":["../src/index.test.js"],"names":["appender","debug","args","log","info","warn","error","level","logCollector","push","last","length","describe","afterEach","conf","DEF_CONF","RELEASE","filter","test","expect","toBeTruthy","LEVEL","DEBUG","toBe","label","toBeFalsy","create","module","inst","msg","prefixExp","toMatch","replace","toEqual","time","toBeInstanceOf","Date","message"],"mappings":";;AAAA;;;;;;AAEA,IAAMA,WAAW;AACbC,SADa,mBACC;AAAA,0CAALC,IAAK;AAALA,gBAAK;AAAA;;AACV,aAAKC,GAAL,CAAS,OAAT,EAAkBD,IAAlB;AACH,KAHY;AAKbE,QALa,kBAKA;AAAA,2CAALF,IAAK;AAALA,gBAAK;AAAA;;AACT,aAAKC,GAAL,CAAS,MAAT,EAAiBD,IAAjB;AACH,KAPY;AASbG,QATa,kBASA;AAAA,2CAALH,IAAK;AAALA,gBAAK;AAAA;;AACT,aAAKC,GAAL,CAAS,MAAT,EAAiBD,IAAjB;AACH,KAXY;AAabI,SAba,mBAaC;AAAA,2CAALJ,IAAK;AAALA,gBAAK;AAAA;;AACV,aAAKC,GAAL,CAAS,OAAT,EAAkBD,IAAlB;AACH,KAfY;AAiBbC,OAjBa,eAiBTI,KAjBS,EAiBFL,IAjBE,EAiBG;AACZM,qBAAaC,IAAb,CAAkB,CAACF,KAAD,EAAQL,IAAR,CAAlB;AACH,KAnBY;AAqBbQ,QArBa,kBAqBP;AACF,eAAOF,aAAaA,aAAaG,MAAb,GAAsB,CAAnC,CAAP;AACH;AAvBY,CAAjB;;AA0BA,IAAMH,eAAe,EAArB;;AAEAI,SAAS,cAAT,EAAyB,YAAI;AACzBC,cAAU,YAAI;AACV;AACA,wBAAOC,IAAP,GAAc,gBAAOC,QAAP,CAAgBC,OAA9B;AACA,wBAAOC,MAAP,GAAgB,IAAhB;AACH,KAJD;;AAMAC,SAAK,MAAL,EAAa,YAAI;AACb;AACAC,eAAO,gBAAOL,IAAd,EAAoBM,UAApB;AACAD,eAAO,gBAAOL,IAAP,CAAYP,KAAnB,EAA0Ba,UAA1B;;AAEA;AACA,wBAAON,IAAP,GAAc;AACVP,mBAAO,gBAAOc,KAAP,CAAaC;AADV,SAAd;;AAIAH,eAAO,gBAAOL,IAAP,CAAYP,KAAnB,EAA0BgB,IAA1B,CAA+B,gBAAOF,KAAP,CAAaC,KAA5C;AACH,KAXD;;AAaAJ,SAAK,QAAL,EAAe,YAAI;AACf,wBAAOD,MAAP,GAAgB,CAAC,UAAD,CAAhB;AACAE,eAAO,gBAAOF,MAAP,CAAc,EAAEO,OAAO,CAAC,UAAD,CAAT,EAAd,CAAP,EAA8CJ,UAA9C;AACAD,eAAO,gBAAOF,MAAP,CAAc,EAAEO,OAAO,CAAC,aAAD,CAAT,EAAd,CAAP,EAAiDC,SAAjD;AACH,KAJD;;AAMAP,SAAK,KAAL,EAAY,YAAI;AACZ,wBAAOJ,IAAP,GAAc;AACVP,mBAAO,gBAAOc,KAAP,CAAaC,KADV;AAEVtB,sBAAUA;AAFA,SAAd;;AAKA,YAAMG,MAAM,gBAAOuB,MAAP,CAAc;AACtBC,oBAAQ;AADc,SAAd,CAAZ;;AAIA;AACA,YAAMC,OAAOzB,IAAIF,KAAJ,CAAU,MAAV,CAAb;AACA,YAAMC,OAAOF,SAASU,IAAT,EAAb,CAZY,CAYkB;;AAE9B,YAAImB,MAAM3B,KAAK,CAAL,EAAQ,CAAR,CAAV;;AAEA;AACAiB,eAAOjB,KAAK,CAAL,CAAP,EAAgBqB,IAAhB,CAAqB,gBAAOF,KAAP,CAAaC,KAAlC;;AAEA;AACA;AACA,YAAMQ,YAAY,+EAAlB;AACAX,eAAOU,GAAP,EAAYE,OAAZ,CAAoBD,SAApB;;AAEA;AACAD,cAAMA,IAAIG,OAAJ,CAAYF,SAAZ,EAAuB,EAAvB,CAAN;AACAX,eAAOU,GAAP,EAAYI,OAAZ,CAAoB,MAApB;;AAEA;AACAd,eAAOS,KAAKrB,KAAZ,EAAmB0B,OAAnB,CAA2B,gBAAOZ,KAAP,CAAaC,KAAxC;AACAH,eAAOS,KAAKD,MAAZ,EAAoBM,OAApB,CAA4B,GAA5B;AACAd,eAAOS,KAAKM,IAAZ,EAAkBC,cAAlB,CAAiCC,IAAjC;AACAjB,eAAOS,KAAKS,OAAZ,EAAqBJ,OAArB,CAA6B,CAAC,MAAD,CAA7B;AACH,KAjCD;;AAmCAf,SAAK,mCAAL,EAA0C,YAAI;AAC1C,wBAAOJ,IAAP,GAAc;AACVP,mBAAO,gBAAOc,KAAP,CAAaC,KADV;AAEVtB,sBAAUA;AAFA,SAAd;;AAKA,YAAMG,MAAM,qBAAO,GAAP,CAAZ;;AAEA;AACA,YAAMyB,OAAOzB,IAAIF,KAAJ,CAAU,MAAV,CAAb;AACA,YAAMC,OAAOF,SAASU,IAAT,EAAb,CAV0C,CAUZ;;AAE9B,YAAImB,MAAM3B,KAAK,CAAL,EAAQ,CAAR,CAAV;;AAEA;AACAiB,eAAOjB,KAAK,CAAL,CAAP,EAAgBqB,IAAhB,CAAqB,gBAAOF,KAAP,CAAaC,KAAlC;;AAEA;AACA;AACA,YAAMQ,YAAY,+EAAlB;AACAX,eAAOU,GAAP,EAAYE,OAAZ,CAAoBD,SAApB;;AAEA;AACAD,cAAMA,IAAIG,OAAJ,CAAYF,SAAZ,EAAuB,EAAvB,CAAN;AACAX,eAAOU,GAAP,EAAYI,OAAZ,CAAoB,MAApB;;AAEA;AACAd,eAAOS,KAAKrB,KAAZ,EAAmB0B,OAAnB,CAA2B,gBAAOZ,KAAP,CAAaC,KAAxC;AACAH,eAAOS,KAAKD,MAAZ,EAAoBM,OAApB,CAA4B,GAA5B;AACAd,eAAOS,KAAKM,IAAZ,EAAkBC,cAAlB,CAAiCC,IAAjC;AACAjB,eAAOS,KAAKS,OAAZ,EAAqBJ,OAArB,CAA6B,CAAC,MAAD,CAA7B;AACH,KA/BD;AAgCH,CA7FD;;AA+FA;AACA;;AAEA;AACA","file":"index.test.js","sourcesContent":["import logger from './index';\n\nconst appender = {\n    debug(...args){\n        this.log('debug', args);\n    },\n\n    info(...args){\n        this.log('info', args);\n    },\n\n    warn(...args){\n        this.log('warn', args);\n    },\n\n    error(...args){\n        this.log('error', args);\n    },\n\n    log(level, args){\n        logCollector.push([level, args]);\n    },\n\n    last(){\n        return logCollector[logCollector.length - 1];\n    }\n};\n\nconst logCollector = [];\n\ndescribe('class logger', ()=>{\n    afterEach(()=>{\n        // reset config\n        logger.conf = logger.DEF_CONF.RELEASE;\n        logger.filter = null;\n    });\n\n    test('conf', ()=>{\n        // test default config\n        expect(logger.conf).toBeTruthy();\n        expect(logger.conf.level).toBeTruthy();\n\n        // test config setter\n        logger.conf = {\n            level: logger.LEVEL.DEBUG\n        };\n\n        expect(logger.conf.level).toBe(logger.LEVEL.DEBUG);\n    });\n\n    test('filter', ()=>{\n        logger.filter = ['filtered'];\n        expect(logger.filter({ label: ['filtered']})).toBeTruthy();\n        expect(logger.filter({ label: ['notFiltered']})).toBeFalsy();\n    });\n\n    test('log', ()=>{\n        logger.conf = {\n            level: logger.LEVEL.DEBUG,\n            appender: appender\n        };\n\n        const log = logger.create({\n            module: 'm'\n        });\n\n        // basic message\n        const inst = log.debug('test');\n        const args = appender.last(); // [level, args]\n\n        let msg = args[1][0];\n\n        // check level\n        expect(args[0]).toBe(logger.LEVEL.DEBUG);\n\n        // check prefix\n        // [module]:[YY-MM-DD HH:mm:ss:SSS]:[level] - \n        const prefixExp = /^\\[m\\]:\\[\\d{2}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}:\\d{1,3}\\]:\\[debug\\] - /;\n        expect(msg).toMatch(prefixExp);\n\n        // check msg\n        msg = msg.replace(prefixExp, '');\n        expect(msg).toEqual('test');\n        \n        // check instance object\n        expect(inst.level).toEqual(logger.LEVEL.DEBUG);\n        expect(inst.module).toEqual('m');\n        expect(inst.time).toBeInstanceOf(Date);\n        expect(inst.message).toEqual(['test']);\n    });\n\n    test('create log instance with function', ()=>{\n        logger.conf = {\n            level: logger.LEVEL.DEBUG,\n            appender: appender\n        };\n\n        const log = logger('m');\n\n        // basic message\n        const inst = log.debug('test');\n        const args = appender.last(); // [level, args]\n\n        let msg = args[1][0];\n\n        // check level\n        expect(args[0]).toBe(logger.LEVEL.DEBUG);\n\n        // check prefix\n        // [module]:[YY-MM-DD HH:mm:ss:SSS]:[level] - \n        const prefixExp = /^\\[m\\]:\\[\\d{2}-\\d{1,2}-\\d{1,2} \\d{1,2}:\\d{1,2}:\\d{1,2}:\\d{1,3}\\]:\\[debug\\] - /;\n        expect(msg).toMatch(prefixExp);\n\n        // check msg\n        msg = msg.replace(prefixExp, '');\n        expect(msg).toEqual('test');\n        \n        // check instance object\n        expect(inst.level).toEqual(logger.LEVEL.DEBUG);\n        expect(inst.module).toEqual('m');\n        expect(inst.time).toBeInstanceOf(Date);\n        expect(inst.message).toEqual(['test']);\n    });\n});\n\n// describe('logger', ()=>{\n//     beforeEach(()=>{\n    \n//     })\n// });"]}