'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TabItem = function (_Component) {
    _inherits(TabItem, _Component);

    function TabItem() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, TabItem);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TabItem.__proto__ || Object.getPrototypeOf(TabItem)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            pressing: false
        }, _this.$onPressIn = function () {

            _this.setState({
                pressing: true
            });
        }, _this.$onPressOut = function () {

            _this.setState({
                pressing: false
            });
        }, _this.$onPress = function () {
            var _this$props = _this.props,
                value = _this$props.value,
                disabled = _this$props.disabled,
                onPress = _this$props.onPress,
                selected = _this$props.selected;

            // 禁用或者已经选中，都不再触发

            if (disabled || selected) {

                return;
            }

            onPress(value);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(TabItem, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                _props$style = _props.style,
                style = _props$style === undefined ? {} : _props$style,
                themeColor = _props.themeColor,
                value = _props.value,
                disabled = _props.disabled,
                selected = _props.selected,
                index = _props.index,
                totalItemCount = _props.totalItemCount;
            var pressing = this.state.pressing;


            var borderRadiusStyle = {
                borderTopRightRadius: index === totalItemCount - 1 ? 17 : 0,
                borderBottomRightRadius: index === totalItemCount - 1 ? 17 : 0,
                borderBottomLeftRadius: index === 0 ? 17 : 0,
                borderTopLeftRadius: index === 0 ? 17 : 0
            };

            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                    style: style,
                    activeOpacity: 1,
                    disabled: disabled,
                    onPressIn: this.$onPressIn,
                    onPressOut: this.$onPressOut,
                    onPress: this.$onPress
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.container },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [_reactNative.Platform.OS === 'android' ? styles.itemAndroid : styles.item, { borderColor: themeColor }, _reactNative.Platform.OS !== 'android' && index === 0 ? { borderLeftWidth: 1 } : null, borderRadiusStyle, selected ? { backgroundColor: themeColor } : null] },
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: [
                                // 这里加了一层 View 容器，修复 iPhone6（10.3.1）上很奇怪的显示问题
                                // 具体现象参考 bug #12752236，https://workitem.aone.alibaba-inc.com/issue/12752236
                                styles.itemContainer, borderRadiusStyle, selected ? { backgroundColor: themeColor } : null] },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: [styles.itemText, selected ? null : { color: themeColor }] },
                                value
                            )
                        ),

                        // 修复安卓的兼容性问题，安卓单独指定 borderTop、borderRight、borderBottom & borderLeft，渲染不出来
                        // 干脆直接指定 borderWidth，并且用竖条盖住左边的 border
                        // bug #12752329，https://workitem.aone.alibaba-inc.com/issue/12752329
                        _reactNative.Platform.OS === 'android' && index !== 0 ? _react2.default.createElement(_reactNative.View, { style: [styles.itemBorderLeftCover, selected ? {
                                backgroundColor: themeColor
                            } : null] }) : null
                    ),
                    pressing || disabled ? _react2.default.createElement(_reactNative.View, { style: [styles.cover, borderRadiusStyle, pressing ? { backgroundColor: 'rgba(0, 0, 0, 0.1)' } : null, disabled ? { backgroundColor: 'rgba(255, 255, 255, 0.6)' } : null] }) : null
                )
            );
        }
    }]);

    return TabItem;
}(_react.Component);

TabItem.propTypes = {
    themeColor: _propTypes2.default.string,
    value: _propTypes2.default.string.isRequired,
    disabled: _propTypes2.default.bool,
    onPress: _propTypes2.default.func.isRequired,
    selected: _propTypes2.default.bool, // 是否被选中
    index: _propTypes2.default.number.isRequired, // 这是第几个 Tab Item
    totalItemCount: _propTypes2.default.number.isRequired // 总共有多少 Tab Item
};
TabItem.defaultProps = {
    themeColor: '#1fc8a2',
    disabled: false,
    selected: false
};
exports.default = TabItem;


var styles = _reactNative.StyleSheet.create({
    container: {
        position: 'relative',
        flex: 1
    },
    item: {
        position: 'relative',
        flex: 1,
        borderTopWidth: 1,
        borderRightWidth: 1,
        borderBottomWidth: 1,
        borderColor: '#1fc8a2',
        overflow: 'hidden'
    },
    itemAndroid: {
        position: 'relative',
        flex: 1,
        borderWidth: 1,
        borderColor: '#1fc8a2',
        overflow: 'hidden'
    },
    itemContainer: {
        flex: 1,
        marginLeft: 1, // iPhone 上渲染可能会遮住左边兄弟的右 border，于是加了 marginLeft
        paddingRight: 1, // 为了保持文字居中，对应加了 paddingRight
        backgroundColor: '#fff',
        overflow: 'hidden',
        alignItems: 'center',
        justifyContent: 'center'
    },
    itemText: {
        fontSize: 12,
        fontWeight: 'bold',
        color: '#fff'
    },
    itemBorderLeftCover: { // 修复安卓的兼容性问题，安卓单独指定 borderTop、borderRight、borderBottom & borderLeft，渲染不出来
        position: 'absolute',
        top: 0,
        bottom: 0,
        left: -1,
        width: 2,
        backgroundColor: '#fff'
    },
    cover: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    }
});