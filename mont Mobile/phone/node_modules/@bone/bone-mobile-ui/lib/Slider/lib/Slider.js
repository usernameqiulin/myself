'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var windowInnerWidth = _reactNative.Dimensions.get('window').width;

// iOS 下，减少右滑退出页面的触碰概率，增加12的左右边距
var deltaPaddingWidth = _reactNative.Platform.OS === 'ios' ? 12 : 0;

// 可滑动长度，减去左右边距，减去圆形直径
var distance = windowInnerWidth - (16 + deltaPaddingWidth) * 2 - 24;

// 用来判断当前滑动值的显示是否超出边界
var translateLimit = windowInnerWidth / 2 - 16;

var Slider = function (_Component) {
    _inherits(Slider, _Component);

    function Slider() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Slider);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Slider.__proto__ || Object.getPrototypeOf(Slider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            value: _this.$getBoundaryWithinValue(_this.props), // 属性设置不考虑步长 step 影响
            pressing: false
        }, _this.$startX = 0, _this.$startValue = 0, _this.$lastValue = 0, _this.$onTouchStart = function (_ref2) {
            var x0 = _ref2.x0;


            // 无论是否禁用，都要在 touchstart 时记住初始位置 & value 值
            // 以免在手势未收起时，取消禁用，或者外部主动修改 value 值，导致滑动出现问题
            _this.$startX = x0, _this.$lastValue = _this.$startValue = _this.state.value;

            // 无论是否禁用，pressing 状态都设置为 true，防止滑动过程中的 disabled 变化导致的显示问题
            _this.setState({
                pressing: true
            });
        }, _this.$onTouchMove = function (_ref3) {
            var moveX = _ref3.moveX,
                x0 = _ref3.x0;
            var _this$props = _this.props,
                minimumValue = _this$props.minimumValue,
                maximumValue = _this$props.maximumValue,
                step = _this$props.step,
                decimalPoints = _this$props.decimalPoints,
                disabled = _this$props.disabled,
                onValueChange = _this$props.onValueChange;


            if (disabled) {

                return;
            }

            moveX = moveX || x0;

            // 根据滑动距离，等比算出 value 值
            var value = _this.$startValue + (moveX - _this.$startX) / distance * (maximumValue - minimumValue);

            // 根据步长和边界，标准化 value 值
            value = _this.$getBoundaryWithinValue({ minimumValue: minimumValue, maximumValue: maximumValue, value: value, step: step, decimalPoints: decimalPoints }, true);

            // 滑动过程中，本次 value 值和上次 value 不同时，触发重绘和 onValueChange
            if (value !== _this.$lastValue) {

                _this.setState({ value: value });

                onValueChange(value);
            }

            _this.$lastValue = value;

            // 每次都返回 value，给 onTouchEnd 用
            return value;
        }, _this.$onTouchEnd = function (gestureState) {

            // 无论是否禁用，pressing 状态都设置为 false，防止滑动过程中的 disabled 变化导致的显示问题
            _this.setState({
                pressing: false
            });

            var _this$props2 = _this.props,
                disabled = _this$props2.disabled,
                onSlidingComplete = _this$props2.onSlidingComplete;


            if (disabled) {

                return;
            }

            onSlidingComplete(_this.$onTouchMove(gestureState));
        }, _this.$panHandlers = (0, _util.createPanResponder)({
            onTouchStart: _this.$onTouchStart,
            onTouchMove: _this.$onTouchMove,
            onTouchEnd: _this.$onTouchEnd
        }).panHandlers, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Slider, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {

            // value 有了默认值，一定会存在于 nextProps
            var value = this.$getBoundaryWithinValue(nextProps); // 属性设置不考虑步长 step 影响

            if (value === this.state.value) {

                return;
            }

            var onValueChange = nextProps.onValueChange;


            this.setState({ value: value });

            onValueChange(value);
        }

        // 获取边界内的 value 值
        // 通过属性设置的，可以不考虑 step 的影响
        // 滑动时计算的值，必须考虑 step 的影响
        // 这里的设计参考 iOS 原生的 Slider 组件

    }, {
        key: '$getBoundaryWithinValue',
        value: function $getBoundaryWithinValue(_ref4) {
            var minimumValue = _ref4.minimumValue,
                maximumValue = _ref4.maximumValue,
                value = _ref4.value,
                step = _ref4.step,
                decimalPoints = _ref4.decimalPoints;
            var stepInvolved = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;


            if (value < minimumValue) {

                value = minimumValue;
            } else if (value > maximumValue) {

                value = maximumValue;
            }

            // 指定考虑步长的影响，且滑动步长在最大最小差值之内
            // 根据步长 step 计算 value 值，必须满足
            // 1. 与最小值的差值必须是 step 的整数倍数
            // 2. 不能超出最大最小边界
            if (stepInvolved && step <= maximumValue - minimumValue) {

                value = Math.round((value - minimumValue) / step) * step + minimumValue;

                if (value < minimumValue) {

                    value += step;
                } else if (value > maximumValue) {

                    value -= step;
                }
            }

            // 修复著名的 0.1 + 0.2 = 0.300000004 的问题
            var coefficient = Math.pow(10, decimalPoints);

            value = Math.round(value * coefficient) / coefficient;

            return value;
        }
    }, {
        key: '$renderTitle',
        value: function $renderTitle() {
            var uiTitle = this.props.uiTitle;


            if (!uiTitle) {

                return null;
            }

            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.title },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.titleText },
                    uiTitle
                )
            );
        }
    }, {
        key: '$renderSliderValue',
        value: function $renderSliderValue() {
            var _props = this.props,
                themeColor = _props.themeColor,
                minimumValue = _props.minimumValue,
                maximumValue = _props.maximumValue,
                unit = _props.unit,
                formatValue = _props.formatValue;
            var value = this.state.value;


            var sliderValue = formatValue && formatValue(value, unit) || '' + value + unit;

            // 滑动值显示的一半长度，估算
            var sliderValueWidth = sliderValue.length * 16 / 2;

            // 跟随滑动计算出位移
            var translateX = -distance / 2 + distance * (value - minimumValue) / (maximumValue - minimumValue);

            // 确保位移不超出限制
            if (translateX + sliderValueWidth > translateLimit) {

                translateX = translateLimit - sliderValueWidth;
            } else if (translateX - sliderValueWidth < -translateLimit) {

                translateX = -translateLimit + sliderValueWidth;
            }

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.sliderValue, { transform: [{ translateX: translateX }] }] },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.sliderValueText, { color: themeColor }] },
                    sliderValue
                )
            );
        }

        // touchstart 时，记录开始的 x 值


        // touchstart 时，记录开始的 value 值


        // touchstart 时，上一次的 value 值和开始的 value 值相同


        // 实例化 panHandlers，只初始化一次

    }, {
        key: '$renderSliderBar',
        value: function $renderSliderBar() {
            var _props2 = this.props,
                themeColor = _props2.themeColor,
                minimumValue = _props2.minimumValue,
                maximumValue = _props2.maximumValue,
                disabled = _props2.disabled;
            var _state = this.state,
                value = _state.value,
                pressing = _state.pressing;


            var deltaWidth = distance * (value - minimumValue) / (maximumValue - minimumValue);

            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.sliderBar },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.barBody },
                    _react2.default.createElement(_reactNative.View, { style: [styles.barLeftPart, { backgroundColor: themeColor, width: 12 + deltaWidth }] }),
                    _react2.default.createElement(_reactNative.View, { style: styles.barRightPart }),
                    disabled ? _react2.default.createElement(_reactNative.View, { style: styles.barBodyCover }) : null
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    _extends({ style: [styles.barTouch, { left: -12 + deltaPaddingWidth + deltaWidth }] }, this.$panHandlers),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.barTouchContent },
                        _react2.default.createElement(_reactNative.View, { style: [styles.barTouchCircle, { backgroundColor: themeColor }] }),
                        pressing || disabled ? _react2.default.createElement(_reactNative.View, { style: [styles.barTouchCover, pressing ? { backgroundColor: 'rgba(0, 0, 0, 0.1)' } : null, disabled ? { backgroundColor: 'rgba(255, 255, 255, 0.6)' } : null] }) : null
                    )
                )
            );
        }
    }, {
        key: '$renderSliderDesc',
        value: function $renderSliderDesc() {
            var _props3 = this.props,
                minimumValue = _props3.minimumValue,
                minimumValueUnit = _props3.minimumValueUnit,
                maximumValue = _props3.maximumValue,
                maximumValueUnit = _props3.maximumValueUnit,
                unit = _props3.unit,
                formatMinimum = _props3.formatMinimum,
                formatMaximum = _props3.formatMaximum;


            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.sliderDesc },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.sliderDescText },
                    formatMinimum ? formatMinimum(minimumValue, minimumValueUnit || unit) : '' + minimumValue + (minimumValueUnit || unit)
                ),
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.sliderDescText },
                    formatMaximum ? formatMaximum(maximumValue, maximumValueUnit || unit) : '' + maximumValue + (maximumValueUnit || unit)
                )
            );
        }
    }, {
        key: 'render',
        value: function render() {

            // 组件容器样式，只支持有限定制
            var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(this.props.style || {}),
                _StyleSheet$flatten$m = _StyleSheet$flatten.marginTop,
                marginTop = _StyleSheet$flatten$m === undefined ? 0 : _StyleSheet$flatten$m,
                _StyleSheet$flatten$m2 = _StyleSheet$flatten.marginBottom,
                marginBottom = _StyleSheet$flatten$m2 === undefined ? 0 : _StyleSheet$flatten$m2,
                _StyleSheet$flatten$b = _StyleSheet$flatten.borderTopWidth,
                borderTopWidth = _StyleSheet$flatten$b === undefined ? 0 : _StyleSheet$flatten$b,
                _StyleSheet$flatten$b2 = _StyleSheet$flatten.borderBottomWidth,
                borderBottomWidth = _StyleSheet$flatten$b2 === undefined ? 0 : _StyleSheet$flatten$b2,
                borderColor = _StyleSheet$flatten.borderColor,
                borderTopColor = _StyleSheet$flatten.borderTopColor,
                borderBottomColor = _StyleSheet$flatten.borderBottomColor;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, {
                        marginTop: marginTop, marginBottom: marginBottom,
                        borderTopWidth: borderTopWidth, borderBottomWidth: borderBottomWidth,
                        borderColor: borderColor, borderTopColor: borderTopColor, borderBottomColor: borderBottomColor
                    }] },
                this.$renderTitle(),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.slider },
                    this.$renderSliderValue(),
                    this.$renderSliderBar(),
                    this.$renderSliderDesc()
                )
            );
        }
    }]);

    return Slider;
}(_react.Component);

Slider.propTypes = {
    themeColor: _propTypes.PropTypes.string, // 主题色
    uiTitle: _propTypes.PropTypes.string, // 组件标题
    minimumValue: _propTypes.PropTypes.number, // 滑动范围的最小边界值，默认为 0
    minimumValueUnit: _propTypes.PropTypes.string, // 新增属性，最小边界值的单位，优先级高于 unit
    maximumValue: _propTypes.PropTypes.number, // 滑动范围的最大边界值，默认为 100
    maximumValueUnit: _propTypes.PropTypes.string, // 新增属性，最大边界值的单位，优先级高于 unit
    step: _propTypes.PropTypes.number, // 滑动步长，默认为 1
    value: _propTypes.PropTypes.number, // Slider 值，默认 50
    unit: _propTypes.PropTypes.string, // 单位，默认 %

    // 新增属性，指定 value 保留的小数位数（step 是小数时，防止 0.1 + 0.2 === 0.300000004 的问题出现）
    // 请确保和 step 一致，且 minimumValue & maximumValue 不会超过此小数位数
    decimalPoints: _propTypes.PropTypes.number,

    disabled: _propTypes.PropTypes.bool, // 是否禁用
    onValueChange: _propTypes.PropTypes.func, // 在用户拖动滑块的过程中不断调用此回调
    onSlidingComplete: _propTypes.PropTypes.func, // 用户结束滑动的时候调用此回调
    // style 相关的属性全部废弃

    // 开发者可以自定义，最小最大边界 & 当前滑动值的显示内容
    formatMinimum: _propTypes.PropTypes.func, // 定义最小值显示内容的函数
    formatMaximum: _propTypes.PropTypes.func, // 定义最大值显示内容的函数
    formatValue: _propTypes.PropTypes.func // 定义当前滑动值显示内容的函数
};
Slider.defaultProps = { // 这里的默认值，大部分是按照 ^1.0.0 的设计指定的
    themeColor: '#1fc8a2',
    uiTitle: '',
    minimumValue: 0,
    maximumValue: 100,
    step: 1,
    value: 50, // 保持和 ^1.0.0 行为一致，指定默认值
    unit: '%',
    decimalPoints: 0,
    disabled: false,
    onValueChange: noop,
    onSlidingComplete: noop // value 有了默认值，意味着最起码在 sliding complete 的时候，需要同步组件内外的状态值
};
exports.default = Slider;


var styles = _reactNative.StyleSheet.create({
    body: {
        backgroundColor: '#fff'
    },
    title: {
        height: 33,
        paddingTop: 12,
        paddingLeft: 16
    },
    titleText: {
        height: 20,
        lineHeight: 20,
        fontSize: 14,
        fontWeight: 'bold',
        color: '#333'
    },

    slider: {
        height: 100,
        paddingTop: 12
    },

    sliderValue: {
        height: 22,
        alignItems: 'center',
        justifyContent: 'center'
    },
    sliderValueText: {
        fontSize: 16,
        color: '#1fc8a2'
    },

    sliderBar: {
        position: 'relative',
        height: 30,
        marginTop: 2,
        paddingRight: 16 + deltaPaddingWidth,
        paddingLeft: 16 + deltaPaddingWidth,
        justifyContent: 'center'
    },
    barBody: {
        position: 'relative',
        height: 4,
        flexDirection: 'row'
    },
    barLeftPart: {
        width: 12,
        borderBottomLeftRadius: 2,
        borderTopLeftRadius: 2,
        backgroundColor: '#1fc8a2'
    },
    barRightPart: {
        flex: 1,
        borderTopRightRadius: 2,
        borderBottomRightRadius: 2,
        backgroundColor: '#ededed'
    },
    barBodyCover: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        borderRadius: 2,
        backgroundColor: 'rgba(255, 255, 255, 0.6)'
    },
    barTouch: {
        position: 'absolute',
        top: 0,
        left: -12,
        width: 80,
        height: 30,
        alignItems: 'center',
        justifyContent: 'center'
    },
    barTouchContent: {
        position: 'relative',
        width: 24,
        height: 24,
        borderRadius: 12,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center'
    },
    barTouchCircle: {
        width: 20,
        height: 20,
        borderRadius: 10,
        backgroundColor: '#1fc8a2'
    },
    barTouchCover: {
        position: 'absolute',
        top: 2,
        right: 2,
        bottom: 2,
        left: 2,
        borderRadius: 10
    },

    sliderDesc: {
        height: 14,
        marginTop: 4,
        paddingRight: 16 + deltaPaddingWidth,
        paddingLeft: 16 + deltaPaddingWidth,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between'
    },
    sliderDescText: {
        fontSize: 10,
        color: '#333'
    }
});