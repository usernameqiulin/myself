'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Container Base Component
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *


var noop = function noop() {};

var Container = function (_Component) {
    _inherits(Container, _Component);

    function Container() {
        _classCallCheck(this, Container);

        return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
    }

    _createClass(Container, [{
        key: 'show',
        value: function show() {

            // show 函数，待重定义
        }
    }, {
        key: 'hide',
        value: function hide() {}

        // hide 函数，待重定义


        // 初始化时，只有 visible 时需要调用 show，默认是 hide

    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {

            this.props.visible && this.show();
        }

        // 确保 show & hide 不会被重复调用

    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var visible = nextProps.visible;


            if (this.props.visible !== visible) {

                visible ? this.show() : this.hide();
            }
        }
    }, {
        key: 'render',
        value: function render() {

            return null;
        }
    }]);

    return Container;
}(_react.Component);

Container.propTypes = {
    visible: _propTypes2.default.bool, // 是否显示
    onBackgroundPress: _propTypes2.default.func, // 触摸背景区块时执行的函数
    onHideComplete: _propTypes2.default.func // 隐藏动画结束后，执行的函数
};
Container.defaultProps = {
    visible: false,
    onBackgroundPress: noop,
    onHideComplete: noop
};
exports.default = Container;