'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var AlertButton = function (_Component) {
    _inherits(AlertButton, _Component);

    function AlertButton() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, AlertButton);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AlertButton.__proto__ || Object.getPrototypeOf(AlertButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            pressing: false
        }, _this.$onPressIn = function () {

            _this.setState({
                pressing: true
            });
        }, _this.$onPressOut = function () {

            _this.setState({
                pressing: false
            });
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(AlertButton, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                themeColor = _props.themeColor,
                text = _props.text,
                onPress = _props.onPress,
                borderStyle = _props.borderStyle,
                borderRadiusStyle = _props.borderRadiusStyle,
                _props$style = _props.style,
                style = _props$style === undefined ? {} : _props$style;
            var pressing = this.state.pressing;


            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                    style: style,
                    activeOpacity: 1,
                    onPressIn: this.$onPressIn,
                    onPressOut: this.$onPressOut,
                    onPress: onPress
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.container, borderStyle] },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.text, { color: themeColor }] },
                        text
                    ),
                    pressing ? _react2.default.createElement(_reactNative.View, { style: [styles.cover, borderRadiusStyle] }) : null
                )
            );
        }
    }]);

    return AlertButton;
}(_react.Component);

AlertButton.propTypes = {
    themeColor: _propTypes2.default.string,
    text: _propTypes2.default.string,
    onPress: _propTypes2.default.func,
    borderStyle: _propTypes2.default.object,
    borderRadiusStyle: _propTypes2.default.object // 修复安卓的兼容性问题...
};
AlertButton.defaultProps = {
    themeColor: '#1fc8a2',
    text: '',
    onPress: noop,
    borderStyle: null,
    borderRadiusStyle: {}
};
exports.default = AlertButton;


var styles = _reactNative.StyleSheet.create({
    container: {
        position: 'relative',
        flex: 1,
        borderColor: '#ededed',
        justifyContent: 'center',
        overflow: 'hidden'
    },
    text: {
        fontSize: 17,
        color: '#1fc8a2',
        textAlign: 'center'
    },
    cover: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        backgroundColor: 'rgba(0, 0, 0, 0.1)'
    }
});