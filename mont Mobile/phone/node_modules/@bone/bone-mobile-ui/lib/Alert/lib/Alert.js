'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _RootSiblings = require('../../RootSiblings');

var _RootSiblings2 = _interopRequireDefault(_RootSiblings);

var _RootModal = require('../../RootModal');

var _AlertContent = require('./AlertContent');

var _AlertContent2 = _interopRequireDefault(_AlertContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var noop = function noop() {};

var _ref = [Symbol('react-native-alert-config-prop'), Symbol('react-native-alert-config'), Symbol('react-native-alert-update'), Symbol('react-native-alert-modal')],
    configPropSymbol = _ref[0],
    configSymbol = _ref[1],
    updateSymbol = _ref[2],
    modalSymbol = _ref[3];

var Alert = function () {
    function Alert(_ref2) {
        var _ref2$themeColor = _ref2.themeColor,
            themeColor = _ref2$themeColor === undefined ? '#1fc8a2' : _ref2$themeColor,
            _ref2$title = _ref2.title,
            title = _ref2$title === undefined ? '' : _ref2$title,
            _ref2$text = _ref2.text,
            text = _ref2$text === undefined ? '' : _ref2$text,
            _ref2$buttons = _ref2.buttons,
            buttons = _ref2$buttons === undefined ? [] // 按钮（们）
        // { // 默认值改为空数组
        //     text: '', // 按钮文字
        //     onPress: noop, // 触摸时触发
        //     autoClose: false // 触摸时，是否自动关闭窗口
        //     // style 废弃
        // }

        // customStyle 废弃
        : _ref2$buttons;

        _classCallCheck(this, Alert);

        this[configPropSymbol] = {
            themeColor: themeColor,
            title: title,
            text: text,
            buttons: buttons,
            visible: true
        };
    }

    // 私有，不暴露给开发者


    _createClass(Alert, [{
        key: updateSymbol,
        value: function value() {
            var _this = this;

            var _configSymbol = this[configSymbol],
                _configSymbol$themeCo = _configSymbol.themeColor,
                themeColor = _configSymbol$themeCo === undefined ? '#1fc8a2' : _configSymbol$themeCo,
                _configSymbol$title = _configSymbol.title,
                title = _configSymbol$title === undefined ? '' : _configSymbol$title,
                _configSymbol$text = _configSymbol.text,
                text = _configSymbol$text === undefined ? '' : _configSymbol$text,
                _configSymbol$buttons = _configSymbol.buttons,
                buttons = _configSymbol$buttons === undefined ? [] : _configSymbol$buttons,
                _configSymbol$visible = _configSymbol.visible,
                visible = _configSymbol$visible === undefined ? true : _configSymbol$visible;


            var element = _react2.default.createElement(_RootModal.AlertContainer, {
                visible: visible,
                onHideComplete: function onHideComplete() {
                    return _this[modalSymbol] && _this[modalSymbol].destroy();
                } // 隐藏动画结束后，destroy
                , children: _react2.default.createElement(_AlertContent2.default, {
                    themeColor: themeColor,
                    title: title,
                    text: text,
                    buttonTexts: buttons.map(function (button) {
                        return button.text || '';
                    }),
                    onPress: function onPress(index) {
                        var _ref3 = buttons[index] || {},
                            _ref3$onPress = _ref3.onPress,
                            onPress = _ref3$onPress === undefined ? noop : _ref3$onPress,
                            _ref3$autoClose = _ref3.autoClose,
                            autoClose = _ref3$autoClose === undefined ? false : _ref3$autoClose;

                        autoClose && _this.destroy();

                        onPress(_this);
                    }
                })
            });

            if (this[modalSymbol]) {

                this[modalSymbol].update(element);
            } else {

                this[modalSymbol] = new _RootSiblings2.default(element);
            }
        }

        // 公有，给开发者使用

    }, {
        key: 'destroy',


        // 销毁，隐藏动画结束后，销毁
        value: function destroy() {

            this[configPropSymbol] = {
                visible: false
            };
        }
    }, {
        key: configPropSymbol,
        set: function set(config) {

            this[configSymbol] = _extends({}, this[configSymbol] || {}, config);

            this[updateSymbol]();
        }
    }, {
        key: 'themeColor',
        set: function set(themeColor) {

            this[configPropSymbol] = { themeColor: themeColor };
        }
    }, {
        key: 'title',
        set: function set(title) {

            this[configPropSymbol] = { title: title };
        }
    }, {
        key: 'text',
        set: function set(text) {

            this[configPropSymbol] = { text: text };
        }
    }, {
        key: 'buttons',
        set: function set(buttons) {

            this[configPropSymbol] = { buttons: buttons };
        }
    }]);

    return Alert;
}();

exports.default = Alert;