'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _NavbarButtonConst = require('./NavbarButtonConst');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NavbarButton = function (_Component) {
  _inherits(NavbarButton, _Component);

  function NavbarButton() {
    _classCallCheck(this, NavbarButton);

    return _possibleConstructorReturn(this, (NavbarButton.__proto__ || Object.getPrototypeOf(NavbarButton)).apply(this, arguments));
  }

  _createClass(NavbarButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          buttonType = _props.buttonType,
          buttonElement = _props.buttonElement,
          onPress = _props.onPress;

      // render text mode

      if (buttonType === _NavbarButtonConst.textSymbol) {
        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            style: styles.defaultTextButtonStyle,
            activeOpacity: 0.6,
            onPress: onPress
          },
          _react2.default.createElement(
            _reactNative.Text,
            { style: [styles.defaultTextStyle, buttonElement.style] },
            buttonElement.text
          )
        );
      } else if (buttonType === _NavbarButtonConst.iconSymbol) {
        // render icon mode.
        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          {
            style: styles.defaultButtonStyle,
            activeOpacity: 0.6,
            onPress: onPress
          },
          _react2.default.createElement(_reactNative.View, { style: buttonElement.style })
        );
      }
      // render element mode.
      return _react2.default.createElement(
        _reactNative.TouchableOpacity,
        { style: styles.defaultButtonStyle, activeOpacity: 0.6, onPress: onPress },
        buttonElement
      );
    }
  }]);

  return NavbarButton;
}(_react.Component);

NavbarButton.PropTypes = {
  onPress: _propTypes2.default.func,
  // buttonType由外部传入NavbarButtonTypes，避免内部做数据检查。其中0: 为文字，1: 为图标，2. 为自定义组件
  buttonType: _propTypes2.default.oneOf([_NavbarButtonConst.textSymbol, _NavbarButtonConst.iconSymbol, _NavbarButtonConst.elementSymbol]).isRequired,
  // 按钮元素支持三种格式，一种为文字，第二种为图标，第三种为自定义组件
  buttonElement: _propTypes2.default.oneOfType([_propTypes2.default.shape(_NavbarButtonConst.textShape), _propTypes2.default.shape(iconShape), _propTypes2.default.element]).isRequired
};
NavbarButton.defaultProps = {
  onPress: function onPress() {
    return {};
  }
};
exports.default = NavbarButton;


var iconShape = {
  buttonIconStyle: _propTypes2.default.object
};

var styles = _reactNative.StyleSheet.create({
  defaultButtonStyle: {
    width: 36,
    height: 36,
    alignItems: 'flex-start',
    justifyContent: 'center',
    zIndex: 1 // make sure is above title
  },

  defaultTextButtonStyle: {
    height: 36,
    justifyContent: 'center',
    zIndex: 1 // make sure is above title
  },

  defaultTextStyle: {
    fontSize: 16,
    color: '#fff'
  }
});