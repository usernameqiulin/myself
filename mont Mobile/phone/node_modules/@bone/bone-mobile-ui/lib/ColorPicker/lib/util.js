'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createPanResponder = exports.fromHSV = exports.toHSV = exports.calHSV = exports.calH = exports.fn = undefined;

var _reactNative = require('react-native');

var _tinycolor = require('tinycolor2');

var _tinycolor2 = _interopRequireDefault(_tinycolor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fn = function fn() {
    return true;
};

var fnNegative = function fnNegative() {
    return false;
};

exports.fn = fn;

// 标准化色调值

var calH = exports.calH = function calH() {
    var h = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;


    h %= 360;

    if (h < 0) {

        h += 360;
    } else if (h > 360) {

        h -= 360;
    }

    return h;
};

// 标准化 HSV 值
var calHSV = exports.calHSV = function calHSV() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$h = _ref.h,
        h = _ref$h === undefined ? 0 : _ref$h,
        _ref$s = _ref.s,
        s = _ref$s === undefined ? 1 : _ref$s,
        _ref$v = _ref.v,
        v = _ref$v === undefined ? 1 : _ref$v;

    if (s < 0) {

        s = 0;
    } else if (s > 1) {

        s = 1;
    }

    if (v < 0) {

        v = 0;
    } else if (v > 1) {

        v = 1;
    }

    return {
        h: calH(h),
        s: s,
        v: v
    };
};

// 将颜色值转换成 HSV 值
var toHSV = exports.toHSV = function toHSV() {
    var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#f00';


    var result = (0, _tinycolor2.default)(color).toHsv();

    return {
        h: result.h,
        s: result.s,
        v: result.v
    };
};

// 将 HSV 值，转换成多种颜色值
var fromHSV = exports.fromHSV = function fromHSV() {
    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref2$h = _ref2.h,
        h = _ref2$h === undefined ? 0 : _ref2$h,
        _ref2$s = _ref2.s,
        s = _ref2$s === undefined ? 1 : _ref2$s,
        _ref2$v = _ref2.v,
        v = _ref2$v === undefined ? 1 : _ref2$v;

    var color = (0, _tinycolor2.default)({ h: h, s: s, v: v });

    var rgbColor = color.toRgb(),
        hsvColor = color.toHsv(),
        hslColor = color.toHsl();

    return {
        hex: color.toHexString(),
        rgb: { r: rgbColor.r, g: rgbColor.g, b: rgbColor.b },
        hsv: { h: hsvColor.h, s: hsvColor.s, v: hsvColor.v },
        hsl: { h: hslColor.h, s: hslColor.s, l: hslColor.l }
    };
};

var createPanResponder = exports.createPanResponder = function createPanResponder(_ref3) {
    var _ref3$onTouchStart = _ref3.onTouchStart,
        onTouchStart = _ref3$onTouchStart === undefined ? fn : _ref3$onTouchStart,
        _ref3$onTouchMove = _ref3.onTouchMove,
        onTouchMove = _ref3$onTouchMove === undefined ? fn : _ref3$onTouchMove,
        _ref3$onTouchEnd = _ref3.onTouchEnd,
        onTouchEnd = _ref3$onTouchEnd === undefined ? fn : _ref3$onTouchEnd;


    return _reactNative.PanResponder.create({
        onStartShouldSetPanResponder: fn,
        onStartShouldSetPanResponderCapture: fn,
        onMoveShouldSetPanResponder: fnNegative,
        onMoveShouldSetPanResponderCapture: fnNegative,
        // 其它组件要求成为响应者时，不放权
        // 比如嵌在 ScrollView 中，手势上下移动时触发滚动，此时滑动不终止
        onPanResponderTerminationRequest: fnNegative,
        onPanResponderGrant: function onPanResponderGrant(evt, gestureState) {

            onTouchStart(gestureState);
        },
        onPanResponderMove: function onPanResponderMove(evt, gestureState) {

            onTouchMove(gestureState);
        },
        onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {

            onTouchEnd(gestureState);
        },

        // 响应终止时触发，对外同样适用于 touchend
        // onPanResponderTerminationRequest 返回 false，应该不会触发
        onPanResponderTerminate: function onPanResponderTerminate(evt, gestureState) {

            onTouchEnd(gestureState);
        }
    });
};