'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _LocaleProvider = require('../../LocaleProvider');

require('./SlideUp.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SlideUp = function (_React$Component) {
  _inherits(SlideUp, _React$Component);

  function SlideUp() {
    _classCallCheck(this, SlideUp);

    return _possibleConstructorReturn(this, (SlideUp.__proto__ || Object.getPrototypeOf(SlideUp)).apply(this, arguments));
  }

  _createClass(SlideUp, [{
    key: 'render',
    value: function render() {
      var boneLocale = this.props.boneLocale;

      return _react2.default.createElement(
        'div',
        { className: 'slide-up show' },
        _react2.default.createElement(
          'div',
          { className: 'slide-header' },
          _react2.default.createElement(
            'div',
            { className: 'header-cacel-btn', onClick: this.props.onCancel },
            boneLocale.formatMessage('OptionPicker', 'cancelButtonText')
          ),
          _react2.default.createElement(
            'div',
            { className: 'header-confirm-btn', onClick: this.props.onConfirm },
            boneLocale.formatMessage('OptionPicker', 'confirmButtonText')
          ),
          _react2.default.createElement(
            'div',
            { className: 'header-title' },
            this.props.title
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'slide-content' },
          this.props.children
        )
      );
    }
  }]);

  return SlideUp;
}(_react2.default.Component);

SlideUp.propTypes = {
  title: _react2.default.PropTypes.string,
  isShown: _react2.default.PropTypes.bool,
  onCancel: _react2.default.PropTypes.func,
  onConfirm: _react2.default.PropTypes.func
};

SlideUp.defaultProps = {
  isShown: false
};

exports.default = (0, _LocaleProvider.connectLocale)(SlideUp);