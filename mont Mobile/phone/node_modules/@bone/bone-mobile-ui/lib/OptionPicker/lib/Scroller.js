'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _iscrollProbeMin = require('./lib/iscroll-probe-min.js');

var _iscrollProbeMin2 = _interopRequireDefault(_iscrollProbeMin);

require('./Scroller.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ROWS_PER_PAGE = 5;

var Scroller = function (_React$Component) {
  _inherits(Scroller, _React$Component);

  function Scroller(props) {
    _classCallCheck(this, Scroller);

    var _this = _possibleConstructorReturn(this, (Scroller.__proto__ || Object.getPrototypeOf(Scroller)).call(this, props));

    _this.bindFunc();
    _this.state = {
      snapHeight: 0,
      activeIndex: 0
    };
    return _this;
  }

  _createClass(Scroller, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.setState({
        activeIndex: this.props.activeIndex
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var pickerDOM = _reactDom2.default.findDOMNode(this);
      var rowHeight = pickerDOM.offsetHeight / ROWS_PER_PAGE;
      var scrollOption = {
        scrollX: false,
        scrollY: true,
        momentum: true,
        snap: 'li',
        keyBindings: true
      };
      this.setState({
        snapHeight: rowHeight
      });
      this.IScroll = new _iscrollProbeMin2.default(pickerDOM, scrollOption);
      this.IScroll.on('scrollEnd', this._onScrollEnd.bind(this));
      this.resetScroller();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this.IScroll) {
        this.IScroll.destroy();
        this.IScroll = null;
      }
    }
    // componentDidUpdate() {
    //   if(this.IScroll) {
    //     setTimeout(()=>{
    //       this.IScroll.refresh();
    //     },1);
    //   }
    // }

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.items.length !== this.props.items.length || nextProps.activeIndex !== this.props.activeIndex) {
        this.setState({
          activeIndex: nextProps.activeIndex
        });
        this.resetScroller();
      }
    }
  }, {
    key: 'resetScroller',
    value: function resetScroller() {
      var _this2 = this;

      setTimeout(function () {
        _this2.IScroll.refresh();
        _this2.IScroll.scrollTo(0, _this2.state.snapHeight * _this2.props.activeIndex * -1, 300);
      }, 1000 / 60);
    }
  }, {
    key: '_onScrollEnd',
    value: function _onScrollEnd() {
      var activeIndex = Math.round(Math.abs(this.IScroll.y) / this.state.snapHeight);
      this.setState({
        activeIndex: activeIndex
      });
      if (typeof this.props.onItemSelected === 'function') {
        this.props.onItemSelected(activeIndex, this.props.items[activeIndex]);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'scroller-wrapper', style: this.props.style },
        _react2.default.createElement(
          'ul',
          { className: 'scroller' },
          this._getChildren()
        )
      );
    }
  }, {
    key: '_getPlaceHolder',
    value: function _getPlaceHolder(key) {
      return _react2.default.createElement('li', { className: 'item', style: { height: this.state.snapHeight }, key: key });
    }
  }, {
    key: '_getChildren',
    value: function _getChildren() {
      var _this3 = this;

      var children = this.props.items.map(function (item, index) {
        var className = "item " + (index === _this3.state.activeIndex ? 'active' : '');
        var itemText = item + (_this3.props.unit ? " " + _this3.props.unit : "") + "";
        return _react2.default.createElement(
          'li',
          { className: className, style: { height: _this3.state.snapHeight, justifyContent: _this3._getAlignment() }, key: index },
          itemText
        );
      });
      return [this._getPlaceHolder(-1), this._getPlaceHolder(-2)].concat(_toConsumableArray(children), [this._getPlaceHolder(-3), this._getPlaceHolder(-4)]);
    }
  }, {
    key: '_getAlignment',
    value: function _getAlignment() {
      var align = this.props.align.toUpperCase();
      switch (align) {
        case 'CENTER':
          return 'center';
        case 'LEFT':
          return 'flex-start';
        case 'RIGHT':
          return 'flex-end';
      }
    }
  }, {
    key: 'bindFunc',
    value: function bindFunc() {
      this._getChildren.bind(this);
      this._getPlaceHolder.bind(this);
      this._onScrollEnd.bind(this);
      this._getAlignment.bind(this);
      this.resetScroller.bind(this);
    }
  }]);

  return Scroller;
}(_react2.default.Component);

exports.default = Scroller;


Scroller.propTypes = {
  items: _react2.default.PropTypes.array,
  activeIndex: _react2.default.PropTypes.number,
  align: _react2.default.PropTypes.string, //center left right
  onItemSelected: _react2.default.PropTypes.func,
  unit: _react2.default.PropTypes.string,
  style: _react2.default.PropTypes.object
};

Scroller.defaultProps = {
  activeIndex: 0,
  align: 'center'
};