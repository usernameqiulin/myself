/**
 * @BoneUI BoneOptionPicker
 * @desciption
 * @aliplus.com
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var windowSize = _reactNative.Dimensions.get('window');
var BoneRCTOptionPicker = (0, _reactNative.requireNativeComponent)("BoneOptionPicker");

var BoneOptionPickerManager = _reactNative.NativeModules.BoneOptionPickerManager;

var BoneOptionPicker = function (_Component) {
    _inherits(BoneOptionPicker, _Component);

    function BoneOptionPicker(props) {
        _classCallCheck(this, BoneOptionPicker);

        var _this = _possibleConstructorReturn(this, (BoneOptionPicker.__proto__ || Object.getPrototypeOf(BoneOptionPicker)).call(this, props));

        var groups = props.groups;
        var data = {};
        groups.map(function (item) {
            if (item.key && item.source.length > 0) {
                if (item.idx < item.source.lengt - 1) {
                    data[item.key] = { value: item.source[item.idx], idx: item.idx };
                } else {
                    data[item.key] = { value: item.source[0], idx: 0 };
                }
            } else {
                console.error('BoneOptionPicker groups data error');
            }
        });
        _this.data = data;
        return _this;
    }

    _createClass(BoneOptionPicker, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var _this2 = this;

            var _nextProps$groups = nextProps.groups,
                nextGroups = _nextProps$groups === undefined ? [] : _nextProps$groups;
            var _props$groups = this.props.groups,
                groups = _props$groups === undefined ? [] : _props$groups;

            // 若 Groups 属性有更新，则更新 Native 组件
            // 但不更新 JS 组件

            nextGroups.forEach(function (nextGroup, index) {

                var group = groups[index] || {};

                if (group.key && group.key === nextGroup.key && !_immutable2.default.is(_immutable2.default.fromJS(group), _immutable2.default.fromJS(nextGroup))) {

                    var data = _extends({}, nextGroup);

                    delete data.key;

                    BoneOptionPickerManager.setSource && BoneOptionPickerManager.setSource((0, _reactNative.findNodeHandle)(_this2), _defineProperty({}, nextGroup.key, data));
                }
            });
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate() {
            return false;
        }
    }, {
        key: 'onValueChange',
        value: function onValueChange(e) {
            var groups = this.props.groups;
            var idxs = e.nativeEvent;
            var data = this.getValueByIdx(idxs);
            this.props.onValueChange && this.props.onValueChange(data);
        }
    }, {
        key: 'getValueByIdx',
        value: function getValueByIdx(idxs) {
            var _this3 = this;

            var groups = this.props.groups;
            groups.map(function (item) {
                if (item.key && idxs[item.key] !== undefined) {
                    _this3.data[item.key].value = item.source[idxs[item.key]] || null;
                    _this3.data[item.key].idx = idxs[item.key];
                }
            });
            return this.data;
        }
    }, {
        key: 'getData',
        value: function getData() {
            return this.data;
        }
    }, {
        key: 'getIdx',
        value: function getIdx(callback) {
            var _this4 = this;

            var tag = _reactNative2.default.findNodeHandle(this.refs.boneOptonPicker);
            _reactNative.NativeModules.BoneOptionPickerManager.getIdx(tag, function (opt) {
                callback && callback(_this4.getValueByIdx(opt));
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this5 = this;

            return _react2.default.createElement(BoneRCTOptionPicker, _extends({
                ref: 'boneOptonPicker'
            }, this.props, {
                style: [styles.container, this.props.style],
                onIdxChange: function onIdxChange(e) {
                    return _this5.onValueChange(e);
                }
            }));
        }
    }]);

    return BoneOptionPicker;
}(_react.Component);

BoneOptionPicker.propTypes = {
    style: _reactNative.View.propTypes.style,
    groups: _react2.default.PropTypes.array,
    onValueChange: _react2.default.PropTypes.func
};
exports.default = BoneOptionPicker;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: windowSize.width,
        height: 216,
        backgroundColor: '#ffffff'
    }
});