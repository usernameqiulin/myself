'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _locale = require('./locale');

var _locale2 = _interopRequireDefault(_locale);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var providers = [];
var globalLocale = 'zh';
var globalMessages = {};

var LocaleProvider = function (_Component) {
  _inherits(LocaleProvider, _Component);

  _createClass(LocaleProvider, null, [{
    key: 'locale',
    set: function set(locale) {
      (0, _invariant2.default)(typeof locale === 'string', 'Expected locale to be a string');
      if (globalLocale !== locale) {
        globalLocale = locale;
        providers.forEach(function (provider) {
          return provider.dispatch();
        });
      }
    },
    get: function get() {
      return globalLocale;
    }
  }, {
    key: 'messages',
    set: function set(messages) {
      (0, _invariant2.default)((0, _util.isPlainObject)(messages), 'Expected messages to be a plain object');
      if (!_immutable2.default.is(_immutable2.default.fromJS(globalMessages), _immutable2.default.fromJS(messages))) {
        globalMessages = messages;
        providers.forEach(function (provider) {
          return provider.dispatch();
        });
      }
    },
    get: function get() {
      return globalMessages;
    }
  }]);

  function LocaleProvider(props, context) {
    _classCallCheck(this, LocaleProvider);

    var _this = _possibleConstructorReturn(this, (LocaleProvider.__proto__ || Object.getPrototypeOf(LocaleProvider)).call(this, props, context));

    _this.boneLocale = (0, _locale2.default)(globalLocale, globalMessages);
    providers.push(_this);
    return _this;
  }

  _createClass(LocaleProvider, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var _boneLocale = this.boneLocale,
          getMessage = _boneLocale.getMessage,
          subscribe = _boneLocale.subscribe;

      return {
        boneLocale: { getMessage: getMessage, subscribe: subscribe }
      };
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var index = providers.indexOf(this);
      if (index !== -1) {
        providers.splice(index, 1);
      }
    }
  }, {
    key: 'dispatch',
    value: function dispatch() {
      this.boneLocale.dispatch({
        locale: globalLocale,
        messages: globalMessages
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react.Children.only(this.props.children);
    }
  }]);

  return LocaleProvider;
}(_react.Component);

LocaleProvider.propTypes = {
  children: _propTypes2.default.element.isRequired
};
LocaleProvider.childContextTypes = {
  boneLocale: _locale.localeShape
};
exports.default = LocaleProvider;