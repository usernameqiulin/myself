'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

var _RectView = require('./RectView');

var _RectView2 = _interopRequireDefault(_RectView);

var _CircleView = require('./CircleView');

var _CircleView2 = _interopRequireDefault(_CircleView);

var _constant = require('./constant');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * shouldComponentUpdate 不实现，兼容历史原因，防止需要重新渲染的时候，无法重新渲染


var windowInnerWidth = _reactNative.Dimensions.get('window').width;

var getColumnCount = function getColumnCount(length) {

    if (length <= 2) {

        return length;
    } else if (length >= 10) {

        return 4;
    } else if (length === 3 || length === 5 || length === 6 || length === 9) {

        return 3;
    } else {

        return 4;
    }
};

var ItemGrid = function (_Component) {
    _inherits(ItemGrid, _Component);

    function ItemGrid(props) {
        _classCallCheck(this, ItemGrid);

        var _this = _possibleConstructorReturn(this, (ItemGrid.__proto__ || Object.getPrototypeOf(ItemGrid)).call(this, props));

        _this.$onGridPress = function (data) {
            var _this$props = _this.props,
                disabled = _this$props.disabled,
                onClickBefore = _this$props.onClickBefore,
                onItemClick = _this$props.onItemClick;

            // 其实在 RectView 和 CircleView 中，已经判断了是否禁用
            // 这里再做判断，这样以后如果换人维护，出错的可能性会降低些许

            if (disabled || data.status === -1) {

                return;
            }

            // 参数仿照 ^1.0.0 版本 数据结构
            // 询问是否要响应点击，并改变状态
            if (onClickBefore && onClickBefore(new _Item2.default(data), _this.$getHighLightData()) === false) {

                return;
            }

            // 改变状态
            var newData = _this.$getStatusUpdatedData(data);

            // 参数仿照 ^1.0.0 版本 数据结构
            onItemClick && onItemClick(new _Item2.default(newData), _this.$getHighLightData());
        };

        var _this$props2 = _this.props,
            type = _this$props2.type,
            isMultiple = _this$props2.isMultiple,
            dataSource = _this$props2.dataSource,
            status = _this$props2.status;

        // 矩形模式下，只支持单选

        isMultiple = type === _constant.RECT ? false : isMultiple;

        dataSource = _this.$getStatusUpdatedDataSource(dataSource, status, isMultiple);

        _this.state = {
            type: type, // 初始化一次，不会后续再有变化
            isMultiple: isMultiple, // 初始化一次，不会后续再有变化
            dataSource: dataSource, // 初始化，后续只有 status 会发生变化
            count: dataSource.length, // grid 个数，初始化一次，不会后续再有变化
            column: getColumnCount(dataSource.length) // 列数，初始化一次，不会后续再有变化
        };
        return _this;
    }

    _createClass(ItemGrid, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {

            // 若开发者指定了 status 属性，则基于此属性，需要修改 state.dataSource 的 status 属性
            if ('status' in nextProps) {
                var _state = this.state,
                    dataSource = _state.dataSource,
                    isMultiple = _state.isMultiple;


                this.setState({
                    dataSource: this.$getStatusUpdatedDataSource(dataSource, nextProps.status, isMultiple)
                });
            }
        }

        // 根据 dataSource，status，isMultiple，获取最新的 dataSource
        // status 属性，开发者未必会去指定，给默认空数组

    }, {
        key: '$getStatusUpdatedDataSource',
        value: function $getStatusUpdatedDataSource(dataSource) {
            var status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var isMultiple = arguments[2];


            var itemStatus = void 0,
                oneActivated = false,
                result = [];

            dataSource.forEach(function (item, index) {

                // status 覆盖 dataSource 的 status，若都未指定，默认为 1
                if (status[index] !== undefined) {

                    itemStatus = status[index];
                } else if (item.status !== undefined) {

                    itemStatus = item.status;
                } else {

                    itemStatus = 1;
                }

                // 单选情况下，只允许一个 status 为 1
                if (!isMultiple && oneActivated && itemStatus === 1) {

                    itemStatus = 0;
                }

                // 标记已有 status 为 1 的项
                if (itemStatus === 1) {

                    oneActivated = true;
                }

                result.push(_extends({}, item, {
                    key: item.key || index,
                    status: itemStatus,
                    index: index
                }));
            });

            return result;
        }
    }, {
        key: '$renderTitle',
        value: function $renderTitle() {
            var title = this.props.title;


            if (title) {

                return _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.title },
                    title
                );
            }

            return _react2.default.createElement(_reactNative.View, { style: styles.placeholder });
        }
    }, {
        key: '$renderGrids',
        value: function $renderGrids() {
            var _state2 = this.state,
                type = _state2.type,
                count = _state2.count,
                column = _state2.column;


            if (column === 0) {

                return null;
            }

            var gridRowEls = [];

            for (var gridIndex = 0; gridIndex < count; gridIndex += column) {

                var gridEls = [],
                    endGridIndex = gridIndex + column;

                for (var startGridIndex = gridIndex; startGridIndex < endGridIndex; ++startGridIndex) {

                    gridEls.push(this.$renderGrid(startGridIndex));
                }

                gridEls.length && gridRowEls.push(_react2.default.createElement(
                    _reactNative.View,
                    {
                        key: gridIndex,
                        style: [type === _constant.RECT ? styles.rectRow : styles.circleRow, endGridIndex < count ? null : { marginBottom: type === _constant.RECT ? 0 : 6 }]
                    },
                    gridEls
                ));
            }

            return gridRowEls;
        }
    }, {
        key: '$renderGrid',
        value: function $renderGrid(index) {
            var _state3 = this.state,
                type = _state3.type,
                dataSource = _state3.dataSource,
                count = _state3.count,
                column = _state3.column;
            var _props = this.props,
                themeColor = _props.themeColor,
                disabled = _props.disabled;


            var data = dataSource[index];

            var GridView = void 0,
                gridStyle = void 0;

            if (type === _constant.RECT) {

                GridView = _RectView2.default;

                gridStyle = {
                    flex: 1,
                    height: _constant.RECT_VIEW_HEIGHT,
                    marginLeft: 3
                };
            } else {

                GridView = _CircleView2.default;

                gridStyle = {
                    width: _constant.CIRCLE_VIEW_WIDTH,
                    height: _constant.CIRCLE_VIEW_HEIGHT,
                    marginLeft: (windowInnerWidth - _constant.CIRCLE_VIEW_WIDTH * column) / (column + 1)
                };
            }

            if (index >= count) {

                return _react2.default.createElement(_reactNative.View, { key: index, style: gridStyle });
            }

            return _react2.default.createElement(GridView, {
                key: index,
                style: gridStyle,
                data: data,
                disabled: disabled,
                themeColor: themeColor,
                onPress: this.$onGridPress
            });
        }
    }, {
        key: '$getStatusUpdatedData',


        // 根据点击块的数据，改变状态，并返回新数据
        value: function $getStatusUpdatedData(data) {
            var _state4 = this.state,
                type = _state4.type,
                isMultiple = _state4.isMultiple,
                dataSource = _state4.dataSource;


            var newDataSource = [],
                newData = _extends({}, data),
                newItem = void 0;

            if (data.status === 0) {

                newData.status = 1;
            } else if (data.status === 1 && type !== _constant.RECT) {

                newData.status = 0;
            }

            dataSource.forEach(function (item) {

                if (item.index === newData.index) {

                    newDataSource.push(newData);
                } else {

                    var _newItem = _extends({}, item);

                    if (!isMultiple && newData.status === 1 && _newItem.status !== -1) {

                        _newItem.status = 0;
                    }

                    newDataSource.push(_newItem);
                }
            });

            // 更新所有 grid 的 status
            this.setState({
                dataSource: newDataSource
            });

            return newData;
        }

        // 获取当前所有的高亮块的数据

    }, {
        key: '$getHighLightData',
        value: function $getHighLightData() {
            var dataSource = this.state.dataSource;


            var result = {};

            dataSource.forEach(function (item) {

                if (item.status === 1) {

                    result[item.key] = new _Item2.default(item); // 仿照 ^1.0.0 版本 数据结构
                }
            });

            return result;
        }
    }, {
        key: 'render',
        value: function render() {

            // 组件容器样式，只支持有限定制
            var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(this.props.style || {}),
                _StyleSheet$flatten$m = _StyleSheet$flatten.marginTop,
                marginTop = _StyleSheet$flatten$m === undefined ? 0 : _StyleSheet$flatten$m,
                _StyleSheet$flatten$m2 = _StyleSheet$flatten.marginBottom,
                marginBottom = _StyleSheet$flatten$m2 === undefined ? 0 : _StyleSheet$flatten$m2,
                _StyleSheet$flatten$b = _StyleSheet$flatten.borderTopWidth,
                borderTopWidth = _StyleSheet$flatten$b === undefined ? 0 : _StyleSheet$flatten$b,
                _StyleSheet$flatten$b2 = _StyleSheet$flatten.borderBottomWidth,
                borderBottomWidth = _StyleSheet$flatten$b2 === undefined ? 0 : _StyleSheet$flatten$b2,
                borderColor = _StyleSheet$flatten.borderColor,
                borderTopColor = _StyleSheet$flatten.borderTopColor,
                borderBottomColor = _StyleSheet$flatten.borderBottomColor;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, {
                        marginTop: marginTop, marginBottom: marginBottom,
                        borderTopWidth: borderTopWidth, borderBottomWidth: borderBottomWidth,
                        borderColor: borderColor, borderTopColor: borderTopColor, borderBottomColor: borderBottomColor
                    }] },
                this.$renderTitle(),
                _react2.default.createElement(
                    _reactNative.View,
                    null,
                    this.$renderGrids()
                )
            );
        }
    }]);

    return ItemGrid;
}(_react.Component);

ItemGrid.propTypes = {
    // props 只做初始化设置
    type: _propTypes2.default.oneOf([_constant.RECT, _constant.CIRCLE]),
    isMultiple: _propTypes2.default.bool,
    dataSource: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        text: _propTypes2.default.string.isRequired,
        icon: _propTypes2.default.string,
        key: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
        status: _propTypes2.default.oneOf([-1, 0, 1])
    })).isRequired,

    // props 持续可变
    themeColor: _propTypes2.default.string,
    title: _propTypes2.default.string,
    disabled: _propTypes2.default.bool,
    status: _propTypes2.default.arrayOf(_propTypes2.default.oneOf([-1, 0, 1])),
    onClickBefore: _propTypes2.default.func,
    onItemClick: _propTypes2.default.func
};
ItemGrid.defaultProps = {
    type: _constant.RECT,
    isMultiple: false,

    themeColor: '#1fc8a2',
    title: '',
    disabled: false
    // onClickBefore & onItemClick 就不添加默认了，方便在点击时优化性能
};
exports.default = ItemGrid;


var styles = _reactNative.StyleSheet.create({
    body: {
        paddingTop: 12,
        paddingBottom: 16,
        backgroundColor: '#fff'
    },

    placeholder: {
        height: 4
    },
    title: {
        height: 20,
        lineHeight: 20,
        marginBottom: 12,
        paddingLeft: 16,
        fontSize: 14,
        fontWeight: 'bold',
        color: '#333'
    },

    rectRow: {
        marginBottom: 3,
        paddingLeft: 13,
        paddingRight: 16,
        flexDirection: 'row'
    },
    circleRow: {
        marginTop: 2,
        marginBottom: 18,
        flexDirection: 'row'
    }
});