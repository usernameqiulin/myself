'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _GridView2 = require('./GridView');

var _GridView3 = _interopRequireDefault(_GridView2);

var _IconFont = require('../../IconFont');

var _IconFont2 = _interopRequireDefault(_IconFont);

var _constant = require('./constant');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CircleView = function (_GridView) {
    _inherits(CircleView, _GridView);

    function CircleView() {
        _classCallCheck(this, CircleView);

        return _possibleConstructorReturn(this, (CircleView.__proto__ || Object.getPrototypeOf(CircleView)).apply(this, arguments));
    }

    _createClass(CircleView, [{
        key: 'render',
        value: function render() {
            var pressing = this.state.pressing;
            var _props = this.props,
                _props$style = _props.style,
                style = _props$style === undefined ? {} : _props$style,
                data = _props.data,
                themeColor = _props.themeColor;


            var disabled = this.disabled;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [style, styles.body] },
                _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    {
                        style: styles.touch,
                        activeOpacity: 1,
                        disabled: disabled,
                        onPressIn: this.onPressIn,
                        onPressOut: this.onPressOut,
                        onPress: this.onPress
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.container },
                        _react2.default.createElement(_reactNative.View, { style: [styles.outerCircle, data.status === 1 ? { borderColor: themeColor } : null] }),
                        _react2.default.createElement(_reactNative.View, { style: [styles.middleCircle, data.status === 1 ? { borderColor: themeColor } : null] }),
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: [styles.innerCircle, data.status === 1 ? {
                                    borderWidth: 0,
                                    backgroundColor: themeColor
                                } : null] },
                            data.icon ? _react2.default.createElement(_IconFont2.default, {
                                style: [styles.icon, data.status === 1 ? { color: '#fff' } : null],
                                iconFont: data.icon
                            }) : _react2.default.createElement(
                                _reactNative.Text,
                                { style: [styles.text, data.status === 1 ? { color: '#fff' } : null] },
                                data.text
                            )
                        ),
                        pressing || disabled ? _react2.default.createElement(_reactNative.View, { style: [styles.cover, data.status === 1 ? {
                                top: 0,
                                left: 0,
                                width: _constant.CIRCLE_VIEW_WIDTH,
                                height: _constant.CIRCLE_VIEW_WIDTH,
                                borderRadius: _constant.CIRCLE_VIEW_WIDTH / 2
                            } : null, pressing ? { backgroundColor: 'rgba(0, 0, 0, 0.1)' } : null, disabled ? { backgroundColor: 'rgba(255, 255, 255, 0.6)' } : null] }) : null
                    )
                ),
                data.icon ? _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.text, disabled ? { opacity: 0.6 } : null] },
                    data.text
                ) : null
            );
        }
    }]);

    return CircleView;
}(_GridView3.default);

exports.default = CircleView;


var styles = _reactNative.StyleSheet.create({
    body: {
        width: _constant.CIRCLE_VIEW_WIDTH,
        height: _constant.CIRCLE_VIEW_HEIGHT,
        alignItems: 'center',
        justifyContent: 'space-between'
    },
    touch: {
        width: _constant.CIRCLE_VIEW_WIDTH,
        height: _constant.CIRCLE_VIEW_WIDTH
    },
    container: {
        position: 'relative',
        flex: 1
    },
    outerCircle: {
        position: 'absolute',
        top: 0,
        left: 0,
        width: _constant.CIRCLE_VIEW_WIDTH,
        height: _constant.CIRCLE_VIEW_WIDTH,
        borderWidth: 1,
        borderRadius: _constant.CIRCLE_VIEW_WIDTH / 2,
        borderColor: 'rgba(0, 0, 0, 0)',
        opacity: 0.15
    },
    middleCircle: {
        position: 'absolute',
        top: 2,
        left: 2,
        width: _constant.CIRCLE_VIEW_WIDTH - 4,
        height: _constant.CIRCLE_VIEW_WIDTH - 4,
        borderWidth: 1,
        borderRadius: (_constant.CIRCLE_VIEW_WIDTH - 4) / 2,
        borderColor: 'rgba(0, 0, 0, 0)',
        opacity: 0.3
    },
    innerCircle: {
        position: 'absolute',
        top: 4,
        left: 4,
        width: _constant.CIRCLE_VIEW_WIDTH - 8,
        height: _constant.CIRCLE_VIEW_WIDTH - 8,
        borderWidth: 1,
        borderRadius: (_constant.CIRCLE_VIEW_WIDTH - 8) / 2,
        borderColor: '#ededed',
        alignItems: 'center',
        justifyContent: 'center'
    },
    icon: {
        width: 32,
        height: 32,
        fontSize: 32,
        color: '#999',
        backgroundColor: 'transparent',
        alignItems: 'center',
        justifyContent: 'center'
    },
    text: {
        fontSize: 12,
        color: '#333'
    },
    cover: {
        position: 'absolute',
        top: 4,
        left: 4,
        width: _constant.CIRCLE_VIEW_WIDTH - 8,
        height: _constant.CIRCLE_VIEW_WIDTH - 8,
        borderRadius: (_constant.CIRCLE_VIEW_WIDTH - 8) / 2
    }
});