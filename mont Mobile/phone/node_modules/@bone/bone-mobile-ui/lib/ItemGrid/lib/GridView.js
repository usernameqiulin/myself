'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _constant = require('./constant');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var GridView = function (_Component) {
    _inherits(GridView, _Component);

    function GridView() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, GridView);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = GridView.__proto__ || Object.getPrototypeOf(GridView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            pressing: false
        }, _this.onPressIn = function () {

            if (_this.disabled) {

                return;
            }

            _this.setState({
                pressing: true
            });
        }, _this.onPressOut = function () {

            if (_this.disabled) {

                return;
            }

            _this.setState({
                pressing: false
            });
        }, _this.onPress = function () {

            if (_this.disabled) {

                return;
            }

            var _this$props = _this.props,
                data = _this$props.data,
                onPress = _this$props.onPress;


            onPress(data);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(GridView, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }
    }, {
        key: 'disabled',
        get: function get() {
            var _props = this.props,
                data = _props.data,
                disabled = _props.disabled;


            return disabled || data.status === -1;
        }
    }]);

    return GridView;
}(_react.Component);

GridView.propTypes = {
    data: _propTypes2.default.shape({
        key: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
        status: _propTypes2.default.oneOf([-1, 0, 1]).isRequired,
        index: _propTypes2.default.number.isRequired, // 只用于记录
        text: _propTypes2.default.string.isRequired,
        icon: _propTypes2.default.string,
        value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])
    }).isRequired,
    disabled: _propTypes2.default.bool,
    themeColor: _propTypes2.default.string,
    onPress: _propTypes2.default.func
};
GridView.defaultProps = {
    disabled: false,
    themeColor: '#1fc8a2',
    onPress: _constant.NOOP
};
exports.default = GridView;