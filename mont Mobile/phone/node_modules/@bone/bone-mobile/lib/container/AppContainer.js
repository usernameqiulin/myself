'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _boneMv = require('@bone/bone-mv');

var _reactRouterRedux = require('react-router-redux');

var _logger = require('@bone/logger');

var _logger2 = _interopRequireDefault(_logger);

var _createStore = require('../createStore');

var _createStore2 = _interopRequireDefault(_createStore);

var _history = require('../history');

var _RouterContainer = require('./RouterContainer');

var _RouterContainer2 = _interopRequireDefault(_RouterContainer);

var _ErrorComponent = require('../component/ErrorComponent');

var _ErrorComponent2 = _interopRequireDefault(_ErrorComponent);

var _navigation = require('../navigation');

var _navigation2 = _interopRequireDefault(_navigation);

var _globals = require('../globals');

var _constants = require('../config/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var log = (0, _logger2.default)('bone-mobile', {
  label: ['framework', 'framework/appContainer']
});

var AppComponent = function (_Component) {
  _inherits(AppComponent, _Component);

  function AppComponent(props, context) {
    _classCallCheck(this, AppComponent);

    var historyMode = props.conf.historyMode;


    var initialEntry = '/';

    // link://plugin?a=b#/detail => /detail
    if (props.url) {
      var matchs = props.url.match(/(#[^?]*)/gi);
      initialEntry = matchs && matchs[0] ? matchs[0].replace('#', '') : '/';
    }

    // history
    var history = (0, _history.createHistory)(historyMode, initialEntry);

    _navigation2.default.initStack({
      path: history.location.pathname,
      params: {}
    });

    // store
    var middlewares = props.conf.middlewares && props.conf.middlewares.middlewares ? props.conf.middlewares.middlewares : [];
    // add react-router-redux middleware for router
    middlewares.push((0, _reactRouterRedux.routerMiddleware)(history));
    var store = (0, _createStore2.default)({
      router: _reactRouterRedux.routerReducer
    }, {
      history: history
    }, middlewares);

    // redux history api
    props.app.history = (0, _history.createHistoryAPI)(store, history);

    var _this = _possibleConstructorReturn(this, (AppComponent.__proto__ || Object.getPrototypeOf(AppComponent)).call(this, props, context));

    _this.store = store;
    _this.history = history;
    return _this;
  }

  _createClass(AppComponent, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.app.emit('appDidStart', this.app);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (_globals.isRN) {
        try {
          // 通知 Native 页面加载成功
          _reactNative.NativeModules.BoneBootStrap && _reactNative.NativeModules.BoneBootStrap.onRenderCompleted();
        } catch (e) {
          log.error('调用 Native "onSDKLoadCompleted" 失败');
        }
      }

      // APP 切换后台
      this.app.on('appWillPause', function () {
        _navigation2.default.currentPage && _navigation2.default.currentPage.willPause();
      });

      // APP 切换前台
      this.app.on('appDidResume', function () {
        var _navigation$currentPa;

        _navigation2.default.currentPage && (_navigation$currentPa = _navigation2.default.currentPage).didResume.apply(_navigation$currentPa, arguments);
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.app.off('appWillPause');
      this.app.off('appDidResume');
    }
  }, {
    key: 'render',
    value: function render() {
      // only render once
      var router = this.props.conf.router;

      // @todo widget

      var routes = prepareRoutes(router);

      return _react2.default.createElement(
        _boneMv.Provider,
        { store: this.store },
        _react2.default.createElement(_RouterContainer2.default, { app: this.app, routes: routes, history: this.history })
      );
    }
  }, {
    key: 'app',
    get: function get() {
      return this.props.app;
    }
  }]);

  return AppComponent;
}(_react.Component);

/**
 * map router config to react-router-config
 *
 * ------- from -------
 * router: {
 *   routes: [
 *     {
 *       path: '/',
 *       exact: true,
 *       page: HomePage,
 *       initialProps: {}
 *     }
 *   ],
 *   noMatch: (props)=>{
 *     return <Text>page not found</Text>;
 *   }
 * }
 * ------- to -------
 * [
 *   {
 *     component: Root,
 *     routes: [
 *       {
 *         path: '/',
 *         exact: true,
 *         component: HomePage
 *       },
 *       {
 *         component: noMatch
 *       }
 *     ]
 *   }
 * ]
 */


AppComponent.propTypes = {
  url: _propTypes2.default.string,
  conf: _propTypes2.default.shape({
    // middlewares: PropTypes.arrayOf(PropTypes.func),
    extensions: _propTypes2.default.object,
    history: _propTypes2.default.object,
    router: _propTypes2.default.object.isRequired
  }).isRequired,
  app: _propTypes2.default.object.isRequired
};
AppComponent.defaultProps = {
  url: '/'
};
exports.default = AppComponent;
function prepareRoutes(conf) {
  // @todo
  // only accept flat route for now
  // const routes = conf.routes.map(
  //   routeConf =>
  //   // @todo
  //   // isPrivate
  //     ({
  //       ...routeConf,

  //       // initial props for page
  //       // initialProps: routeConf.initialProps || {},
  //     })
  // );

  // 补充404和错误页面路由
  var routes = conf.routes.concat([{
    path: _constants.notFoundPath, // 避免重复
    page: conf.notFound || _ErrorComponent2.default
  }, {
    path: _constants.errorPath,
    page: conf.error || _ErrorComponent2.default
  }]);

  return routes;
}