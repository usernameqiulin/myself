'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*
author 齐穹

/**
 * Bone.navigation
 * @module Bone/navigation
 */


var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _typeDetect = require('type-detect');

var _typeDetect2 = _interopRequireDefault(_typeDetect);

var _logger = require('@bone/logger');

var _logger2 = _interopRequireDefault(_logger);

var _reactNative = require('react-native');

var _app = require('./app');

var _constants = require('./config/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var log = (0, _logger2.default)('bone-mobile', {
  label: ['framework', 'framework/navigation']
});

var SYMBOL_INIT = Symbol('init');
var SYMBOL_STACK = Symbol('stack');

var Navigation = function () {
  function Navigation() {
    var _this = this;

    _classCallCheck(this, Navigation);

    this[SYMBOL_INIT] = false;
    this[SYMBOL_STACK] = [];

    // campatilble with android hareware back button
    _reactNative.BackAndroid.addEventListener('hardwareBackPress', function () {
      // delay pop, otherwise may cause duplicate exit
      setTimeout(_this.pop.bind(_this), 0);
      // prevent default behavior
      return true;
    });
  }

  _createClass(Navigation, [{
    key: 'initStack',
    value: function initStack(current) {
      if (this.ready) {
        log.warn('duplicate initialization of navigation');
        return;
      }

      this.stack.push(current);
      this[SYMBOL_INIT] = true;

      log.info('navigation has been initialized');
    }

    /**
     * 获取当前 page参数，包含上一个页面 push传入和下一个页面 pop传入
     * @deprecated
     * @function getParams
     * @returns {Object}
     * @example
     * Bone.navigation.getParams()
     */
    // @deprecated('Deprecation: navigation.getParams() is deprecated, use navigation.params instead.', log)
    // getParams() {
    //   return this.params;
    // }

    /**
     * 容器内打开 page
     * @function push
     * @param {String} path 路由的名字
     * @param {Object} [state={}] 需要传递的参数, app.js 配置的为默认值
     * @example
     * Bone.navigation.push('/detail', {
     *   title: '详情',
     *   query: {
     *     id: 1
     *   }
     * });
     */

  }, {
    key: 'push',
    value: function push(path) {
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      (0, _invariant2.default)((0, _typeDetect2.default)(path) === 'string', 'Bone.navigation.push: path must be a string');

      (0, _invariant2.default)((0, _typeDetect2.default)(state) === 'Object', 'Bone.navigation.push: state must be a object');

      log.info('navigation.push', path, state);

      var result = this.currentPage ? this.currentPage.pageWillLeave(this.currentPage.props.location) : undefined;

      if (result === false) {
        return;
      }

      this.stack.push({
        path: path,
        state: state
      });

      this.history.push(path, state);
    }
  }, {
    key: 'replace',
    value: function replace(path) {
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      (0, _invariant2.default)((0, _typeDetect2.default)(path) === 'string', 'Bone.navigation.replace: path must be a string');

      (0, _invariant2.default)((0, _typeDetect2.default)(state) === 'Object', 'Bone.navigation.replace: state must be a object');

      log.info('navigation.replace', path, state);

      this.stack.pop();
      this.stack.push({
        path: path,
        state: state
      });

      this.app.history.replace(path, state);
    }

    /**
     * 容器内回退到上一面，如果当前页面已经处于容器的第一个页面，则调用pop时，将退出容器
     * @function pop
     * @param {Object} [state={}] 需要回传给上一页的参数
     * @example
     * Bone.navigation.pop({
     *   id: 1
     * });
     */

  }, {
    key: 'pop',
    value: function pop(step) {
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if ((0, _typeDetect2.default)(step) === 'Object') {
        state = step;
        step = 1;
      }

      if ((0, _typeDetect2.default)(step) !== 'number') {
        step = 1;
      }

      log.info('navigation.pop', step, state);

      var nextStep = this.stack.length - 1 - step;

      // exit app when popped to the bottom
      if (nextStep < 0) {
        this.app.exit(state);
        return;
      }

      // pop several steps
      var target = this.stack[nextStep];

      target.state = _extends({}, target.state, state);

      // 给 pageDidBack 使用, @todo 待优化
      target.popState = state;

      // clean up steps in stack
      this.stack.splice(nextStep + 1);
      this.history.go(-step);
      return;
    }

    /**
     * 容器内回退到指定页面
     * @function popTo
     * @param {String} path 路由的名字
     * @param {Object} [state={}] 需要回传给指定页面的参数
     * @example
     * Bone.navigation.popTo('/', {
     *   id: 1
     * });
     */

  }, {
    key: 'popTo',
    value: function popTo(path) {
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      (0, _invariant2.default)((0, _typeDetect2.default)(path) === 'string', 'Bone.navigation.popTo: path must be string');

      var target = this.stack.find(function (stack) {
        return stack.path === path;
      });
      if (target) {
        log.info('navigation.popTo', path, state);
        var index = this.stack.indexOf(target);
        this.pop(this.stack.length - 1 - index, state);
        return;
      }

      log.warn('navigation.popTo: no path matched with ' + path);
    }

    // @todo notFound 和 error 是否应该合并成一个错误页？？
    // 命名改一改？

  }, {
    key: 'notFound',
    value: function notFound(state) {
      this.replace(_constants.notFoundPath, state);
    }
  }, {
    key: 'error',
    value: function error(state) {
      this.replace(_constants.errorPath, state);
    }
  }, {
    key: 'setCurrentPage',
    value: function setCurrentPage(path, pageInst) {
      var target = this.stack.find(function (stack) {
        return stack.path === path;
      });
      if (target) {
        target.page = pageInst;
      }
    }
  }, {
    key: 'app',
    get: function get() {
      return (0, _app.getAppInstance)();
    }
  }, {
    key: 'stack',
    get: function get() {
      return this[SYMBOL_STACK];
    }
  }, {
    key: 'ready',
    get: function get() {
      return this[SYMBOL_INIT];
    }

    /**
     * 当前page参数，包含上一个页面 push传入和下一个页面 pop传入
     * @property params
     * @returns {Object}
     * @example
     * Bone.navigation.params
     */

  }, {
    key: 'state',
    get: function get() {
      var stack = this.stack;

      return stack.length ? stack[stack.length - 1].state : {};
    }

    /**
     * 当前页面实例
     * @property currentPage
     */

  }, {
    key: 'currentPage',
    get: function get() {
      var lastIndex = this.stack.length - 1;

      if (lastIndex >= 0) {
        return this.stack[lastIndex].page;
      }

      return null;
    }

    /**
     * 当前所在路径
     * @property currentPath
     * @readonly
     */

  }, {
    key: 'currentPath',
    get: function get() {
      var lastIndex = this.stack.length - 1;

      return lastIndex >= 0 ? this.stack[lastIndex].path : '';
    }
  }, {
    key: 'action',
    get: function get() {
      return this.app.history.action;
    }
  }, {
    key: 'history',
    get: function get() {
      return this.app.history;
    }
  }]);

  return Navigation;
}();

exports.default = new Navigation();