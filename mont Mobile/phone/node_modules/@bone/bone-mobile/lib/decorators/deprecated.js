'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = deprecated;

var _logger = require('@bone/logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultLog = (0, _logger2.default)('deprecated');

/**
 * Decorator deprecated
 * @param {String} message Deprecation message
 * @param {Logger} [log = defaultLog] logger instance
 * @param {Object} [options = {}] options for deprecation
 * @param {String} options.url URL for addtional message
 */
function deprecated(message) {
  var log = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultLog;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return function (target, name, descriptor) {
    var originalVal = descriptor.value;
    var nextDescriptor = _extends({}, descriptor);
    var warn = warnFactory(log, message, options, target, name);

    if (typeof originalVal !== 'function') {
      var val = originalVal;

      nextDescriptor.get = function () {
        warn();
        return val;
      };

      nextDescriptor.set = function (nextVal) {
        warn();
        val = nextVal;
      };
    } else {
      nextDescriptor.value = function () {
        warn();

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return originalVal.apply(this, args);
      };
    }

    return nextDescriptor;
  };
}

function warnFactory(log, message, options, target, name) {
  return function warn() {
    var deprecatedMsg = message || target.constructor.name + '#' + name + ' is deprecated';
    options.url && (deprecatedMsg += '\nSee ' + options.url + ' for more details.');
    log.warn(deprecatedMsg);
  };
}