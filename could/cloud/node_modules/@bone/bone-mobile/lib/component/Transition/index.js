'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactNative = require('react-native');

var _globals = require('../../globals');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var animationTypes = {
  slideRight: {
    direction: 'x',
    value: _globals.size.width
  },
  slideLeft: {
    direction: 'x',
    value: -_globals.size.width
  },
  slideUp: {
    direction: 'y',
    value: -_globals.size.height
  },
  slideDown: {
    direction: 'y',
    value: _globals.size.height
  }
};

var _default = function (_Component) {
  _inherits(_default, _Component);

  function _default(props, context) {
    _classCallCheck(this, _default);

    var _this = _possibleConstructorReturn(this, (_default.__proto__ || Object.getPrototypeOf(_default)).call(this, props, context));

    var initValue = props.home ? 0 : 1;
    _this.state = {
      translateValue: new _reactNative.Animated.Value(initValue)
    };
    return _this;
  }

  _createClass(_default, [{
    key: 'show',
    value: function show(immediate) {
      _reactNative.Animated.timing(this.state.translateValue, {
        toValue: 0,
        duration: !immediate ? this.props.duration : 0
      }).start();
    }
  }, {
    key: 'hide',
    value: function hide(complete, immediate) {
      _reactNative.Animated.timing(this.state.translateValue, {
        toValue: 1,
        duration: !immediate ? this.props.duration : 0
      }).start();
      var timerID = setTimeout(function () {
        complete && complete();
        clearTimeout(timerID);
      }, !immediate ? this.props.duration : 0);
    }
  }, {
    key: 'render',
    value: function render() {
      var translateValue = this.state.translateValue;

      var direction = animationTypes[this.props.animation].direction;
      var outputValue = animationTypes[this.props.animation].value;
      var translate = translateValue.interpolate({
        inputRange: [0, 1],
        outputRange: [0, outputValue]
      });

      var transform = [{ translateX: 0 }];
      if (direction === 'x') {
        transform = [{ translateX: translate }];
      } else if (direction === 'y') {
        transform = [{ translateY: translate }];
      }

      return _react2.default.createElement(
        _reactNative.Animated.View,
        { style: [styles.AnimatedView, { transform: transform }] },
        this.props.children
      );
    }
  }]);

  return _default;
}(_react.Component);

_default.propTypes = {
  animation: _propTypes2.default.string, // 动画类型，'slideRight'
  duration: _propTypes2.default.number, // 动画执行时长
  home: _propTypes2.default.bool
};
_default.defaultProps = {
  animation: 'slideRight',
  duration: 200
};
exports.default = _default;


var styles = _reactNative.StyleSheet.create({
  AnimatedView: {
    position: 'absolute',
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    width: _globals.size.width,
    height: _globals.size.height,
    backgroundColor: '#ffffff'
  }
});