'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Type = require('./Type');

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eventSymbol = Symbol('event-emitter');

/**
 * Get listeners
 * @param {String} evtName 
 * @returns {[Function]} listeners
 */
function listeners(evtName) {
  (0, _invariant2.default)(_Type.Type.isString(evtName), 'Unexpected type ' + _Type.Type.getType(evtName) + ', \'evtName\' should be string');
  return this[eventSymbol] && this[eventSymbol][evtName] ? this[eventSymbol][evtName] : [];
}

/**
 * Get count of listeners
 * @param {String} evtName
 * @return {Number} listeners count 
 */
function listenerCount(evtName) {
  (0, _invariant2.default)(_Type.Type.isString(evtName), 'Unexpected type ' + _Type.Type.getType(evtName) + ', \'evtName\' should be string');
  return this.listeners(evtName).length;
}

/**
 * Add listener
 * @param {String} evtName 
 * @param {Function} callback 
 * @chainable
 */
function on(evtName, callback) {
  (0, _invariant2.default)(_Type.Type.isString(evtName), 'Unexpected type ' + _Type.Type.getType(evtName) + ', \'evtName\' should be string');
  (0, _invariant2.default)(_Type.Type.isFunction(callback), 'Unexpected type ' + _Type.Type.getType(callback) + ', \'callback\' should be function');

  if (!this[eventSymbol]) {
    this[eventSymbol] = {};
  }

  var queue = this.listeners(evtName);
  queue.push(callback);
  this[eventSymbol][evtName] = queue;
  return this;
}

/**
 * Remove listener
 * @param {String} evtName 
 * @param {Function} callback 
 * @chainable
 */
function off(evtName, callback) {
  (0, _invariant2.default)(_Type.Type.isString(evtName), 'Unexpected type ' + _Type.Type.getType(evtName) + ', \'evtName\' should be string');

  // no listener
  if (this.listenerCount(evtName) === 0) {
    return this;
  }

  // remove all when callback is undefined
  if (!callback) {
    this[eventSymbol][evtName] = [];
    return this;
  }

  // search and remove the specific callback
  var queue = this.listeners(evtName);
  var idx = queue.indexOf(callback);
  if (idx > -1) {
    queue.splice(idx, 1);
  }

  return this;
}

/**
 * Emit listener
 * @param {String} evtName 
 * @param {*} args 
 * @return {Boolean} if one listener return false, event dispatch will break and return false
 */
function emit(evtName) {
  (0, _invariant2.default)(_Type.Type.isString(evtName), 'Unexpected type ' + _Type.Type.getType(evtName) + ', \'evtName\' should be string');

  // no listener exist
  if (this.listenerCount(evtName) === 0) {
    return;
  }

  // clone queue
  // the original queue may change during the emitting
  // e.g. 
  //  target.one(evt, callback1);
  //  target.on(evt, callback2);
  //  target.emit(evt) // may lead to error
  var queue = this.listeners(evtName).slice(0);

  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  for (var i = 0, len = queue.length; i < len; i++) {
    if (queue[i].apply(this, args) === false) {
      return false;
    }
  }
}

/**
 * Add listener, which only runs once
 * @param {String} evtName 
 * @param {Function} callback 
 */
function one(evtName, callback) {
  var _this = this;

  (0, _invariant2.default)(_Type.Type.isString(evtName), 'Unexpected type ' + _Type.Type.getType(evtName) + ', \'evtName\' should be string');
  (0, _invariant2.default)(_Type.Type.isFunction(callback), 'Unexpected type ' + _Type.Type.getType(callback) + ', \'callback\' should be function');

  // callback wrap with auto off code
  var oneCallback = function oneCallback() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    callback.apply(_this, args);

    _this.off(evtName, oneCallback);
  };

  return this.on(evtName, oneCallback);
}

exports.default = {
  on: on,
  one: one,
  off: off,
  emit: emit,
  listeners: listeners,
  listenerCount: listenerCount
};
//# sourceMappingURL=index.js.map