'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = connectLocale;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _locale = require('../locale');

var _locale2 = _interopRequireDefault(_locale);

var _locale3 = require('./locale');

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function connectLocale(WrappedComponent) {
  var _class, _temp;

  return _temp = _class = function (_Component) {
    _inherits(ConnectLocale, _Component);

    function ConnectLocale(props, context) {
      _classCallCheck(this, ConnectLocale);

      var _this = _possibleConstructorReturn(this, (ConnectLocale.__proto__ || Object.getPrototypeOf(ConnectLocale)).call(this, props, context));

      _this.mounted = false;
      _this.shouldUpdateOnMount = false;


      if (context.boneLocale) {
        var _context$boneLocale = context.boneLocale,
            getMessage = _context$boneLocale.getMessage,
            subscribe = _context$boneLocale.subscribe;


        _this.state = {
          formatMessage: _util.formatMessage.bind(null, getMessage())
        };

        _this.unsubscribe = subscribe(function () {
          if (_this.mounted) {
            _this.setState({
              formatMessage: _util.formatMessage.bind(null, getMessage())
            });
          } else {
            _this.state.formatMessage = _util.formatMessage.bind(null, getMessage());
            _this.shouldUpdateOnMount = true;
          }
        });
      } else {
        _this.state = {
          formatMessage: _util.formatMessage.bind(null, _locale2.default.zh || {})
        };
      }
      return _this;
    }

    _createClass(ConnectLocale, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.mounted = true;
        if (this.shouldUpdateOnMount) {
          this.forceUpdate();
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unsubscribe && this.unsubscribe();
      }
    }, {
      key: 'render',
      value: function render() {
        var formatMessage = this.state.formatMessage;

        return _react2.default.createElement(WrappedComponent, _extends({}, this.props, { boneLocale: { formatMessage: formatMessage } }));
      }
    }]);

    return ConnectLocale;
  }(_react.Component), _class.displayName = WrappedComponent.displayName || WrappedComponent.name || 'Component', _class.WrappedComponent = WrappedComponent, _class.contextTypes = {
    boneLocale: _locale3.localeShape
  }, _temp;
}