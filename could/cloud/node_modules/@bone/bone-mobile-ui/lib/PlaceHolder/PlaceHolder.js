/**
 * @BoneUI BonePlaceholder
 * @aliplus.com
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _index = require('./lib/index.js');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import {omit} from 'lodash/object';


var BonePlaceHolder = function (_Component) {
    _inherits(BonePlaceHolder, _Component);

    function BonePlaceHolder() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, BonePlaceHolder);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = BonePlaceHolder.__proto__ || Object.getPrototypeOf(BonePlaceHolder)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            ready: _this.props.ready
            //
        }, _this.isReady = function () {
            return _this.props.firstLaunchOnly ? _this.state.ready : _this.props.ready;
        }, _this.getFiller = function () {
            var _this$props = _this.props,
                type = _this$props.type,
                customPlaceholder = _this$props.customPlaceholder;

            if (customPlaceholder) {
                return customPlaceholder;
            }

            if (!type || type === 'empty') {
                return null;
            }

            var Placeholder = _index2.default[type];
            // const props = omit(this.props, ['children', 'ready', 'firstLaunchOnly', 'type']);
            //
            return _react2.default.createElement(Placeholder, _this.props);

            // return (
            //     <View style={{this.props.style}}>
            //         <Placeholder {...this.props}/>
            //     </View>
            // );
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    //
    // static defaultProps = {
    //   type: 'text',
    //   color: '#CDCDCD'
    // }
    //

    //


    _createClass(BonePlaceHolder, [{
        key: 'render',

        //
        value: function render() {
            return this.isReady() ? this.props.children : this.getFiller();
        }
    }]);

    return BonePlaceHolder;
}(_react.Component);

BonePlaceHolder.propTypes = {
    children: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.element]).isRequired,
    ready: _react.PropTypes.bool.isRequired,
    firstLaunchOnly: _react.PropTypes.bool,
    type: _react.PropTypes.oneOf(['text', 'media', 'textRow', 'rect', 'round', 'empty']),
    rows: _react.PropTypes.number,
    color: _react.PropTypes.string,
    customPlaceholder: _react.PropTypes.oneOfType([_react.PropTypes.node, _react.PropTypes.element]) };
exports.default = BonePlaceHolder;