'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

var _index = require('./web/ReactPullLoad/index.js');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BoneTableView = function (_Component) {
    _inherits(BoneTableView, _Component);

    function BoneTableView(props) {
        _classCallCheck(this, BoneTableView);

        var _this = _possibleConstructorReturn(this, (BoneTableView.__proto__ || Object.getPrototypeOf(BoneTableView)).call(this, props));

        var ds = new _reactNative.ListView.DataSource({
            rowHasChanged: function rowHasChanged(r1, r2) {
                r1 !== r2;
            },
            sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
                return s1 !== s2;
            }
        });

        _this.state = {
            dataSource: ds.cloneWithRowsAndSections(_this.props.dataSource),
            hasMore: true,
            action: _index.STATS.init
        };
        return _this;
    }

    _createClass(BoneTableView, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var ds = new _reactNative.ListView.DataSource({
                rowHasChanged: function rowHasChanged(r1, r2) {
                    r1 !== r2;
                },
                sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
                    return s1 !== s2;
                }
            });
            this.setState({
                dataSource: ds.cloneWithRowsAndSections(nextProps.dataSource)
            });
        }
    }, {
        key: '_renderRow',
        value: function _renderRow(rowData, sectionID, rowID) {
            var _this2 = this;

            return _react2.default.createElement(
                _reactNative.TouchableWithoutFeedback,
                {
                    key: function (rowData) {
                        if (_this2.props.rowGuid) {
                            return _this2.props.rowGuid(rowData);
                        }
                        return '' + sectionID + rowID;
                    }(rowData),
                    onPress: function onPress() {
                        if (_this2.props.onClick) {
                            _this2.props.onClick(rowData);
                        }
                    } },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.item },
                    this.props.renderRow(rowData, sectionID, rowID)
                )
            );
        }
    }, {
        key: 'handleAction',
        value: function handleAction(action) {
            var _this3 = this;

            //console.info(action, this.state.action, action === this.state.action);
            //new action must do not equel to old action
            if (action === this.state.action || action === _index.STATS.refreshing && this.state.action === _index.STATS.loading || action === _index.STATS.loading && this.state.action === _index.STATS.refreshing) {
                //console.info("It's same action or on loading or on refreshing ", action, this.state.action, action === this.state.action);
                return false;
            }

            if (action === _index.STATS.refreshing) {
                //刷新
                setTimeout(function () {

                    if (!_this3.props.onRefresh) {
                        _this3.setState({
                            hasMore: true,
                            action: _index.STATS.refreshed
                        });
                    } else {
                        _this3.props.onRefresh(function (data) {
                            if ('no-more-data' == data) {}
                            _this3.setState({
                                hasMore: true,
                                action: _index.STATS.refreshed,
                                dataSource: data ? _this3.state.dataSource.cloneWithRowsAndSections(data) : _this3.state.dataSource
                            });
                        });
                    }
                }, 1000);
            } else if (action === _index.STATS.loading) {
                //加载更多      
                this.setState({
                    hasMore: true
                });
                setTimeout(function () {
                    if (!_this3.props.onInfinite) {
                        _this3.setState({
                            hasMore: true,
                            action: _index.STATS.reset
                        });
                    } else {
                        _this3.props.onInfinite(function (data) {
                            if ('no-more-data' == data) {
                                _this3.setState({
                                    action: _index.STATS.reset,
                                    hasMore: false
                                });
                            } else {
                                _this3.setState({
                                    action: _index.STATS.reset,
                                    hasMore: true,
                                    dataSource: data ? _this3.state.dataSource.cloneWithRowsAndSections(data) : _this3.state.dataSource
                                });
                            }
                        });
                    }
                }, 1000);
            }

            if (action === _index.STATS.loading && !this.state.hasMore) {
                return;
            }

            //DO NOT modify below code
            this.setState({
                action: action
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                _index2.default,
                {
                    downEnough: 100,
                    style: { paddingTop: 0 },
                    action: this.state.action,
                    hasMore: this.state.hasMore,
                    handleAction: this.handleAction.bind(this),
                    isBlockContainer: true //是否开启使用组件根 DOM 作为外部容器 contianer
                    , distanceBottom: 100 //距离底部距离触发加载更多
                },
                _react2.default.createElement(_reactNative.ListView, {
                    contentContainerStyle: styles.list,
                    dataSource: this.state.dataSource,
                    renderRow: this._renderRow.bind(this)
                })
            );
        }
    }]);

    return BoneTableView;
}(_react.Component);

BoneTableView.propTypes = {
    dataSource: _react2.default.PropTypes.array.isRequired,
    renderRow: _react2.default.PropTypes.func.isRequired,
    rowGuid: _react2.default.PropTypes.func,
    onClick: _react2.default.PropTypes.func,
    onRefresh: _react2.default.PropTypes.func,
    onInfinite: _react2.default.PropTypes.func,
    layout: _react2.default.PropTypes.shape({
        // type: React.PropTypes.string, //1.'grid',2.'waterfall'
        // cellHeight: React.PropTypes.number, //'waterfall'无此配置
        // cellWidth: React.PropTypes.number, //'waterfall'无此配置
        // minLineSpacing: React.PropTypes.number, //cell的上下最小间距
        // minItemSpacing: React.PropTypes.number, //cell的左右最小间距
        sectionInset: _react2.default.PropTypes.shape({
            top: _react2.default.PropTypes.number,
            left: _react2.default.PropTypes.number,
            right: _react2.default.PropTypes.number,
            bottom: _react2.default.PropTypes.number
        })
    })
};
exports.default = BoneTableView;


var styles = _reactNative.StyleSheet.create({
    list: {
        // flexDirection: 'row',
        // flexWrap: 'wrap'
    },
    item: {
        // backgroundColor: 'red',
        // margin: 3,
        // width: '30%'
    }
});