'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _BoneGridView_web = require('./web/BoneGridView_web.js');

var _BoneGridView_web2 = _interopRequireDefault(_BoneGridView_web);

var _BoneWaterfallView_web = require('./web/BoneWaterfallView_web.js');

var _BoneWaterfallView_web2 = _interopRequireDefault(_BoneWaterfallView_web);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //https://github.com/scarletsky/react-masonry-layout


var BoneCollectionView = function (_Component) {
    _inherits(BoneCollectionView, _Component);

    function BoneCollectionView() {
        _classCallCheck(this, BoneCollectionView);

        return _possibleConstructorReturn(this, (BoneCollectionView.__proto__ || Object.getPrototypeOf(BoneCollectionView)).apply(this, arguments));
    }

    _createClass(BoneCollectionView, [{
        key: 'render',
        value: function render() {
            if ('grid' == this.props.layout.type) {
                return _react2.default.createElement(_BoneGridView_web2.default, this.props);
            } else if ('waterfall' == this.props.layout.type) {
                return _react2.default.createElement(_BoneWaterfallView_web2.default, this.props);
            }
            return _react2.default.createElement(View, null);
        }
    }]);

    return BoneCollectionView;
}(_react.Component);

BoneCollectionView.defaultProps = {
    layout: {
        type: "grid"
    }
};
exports.default = BoneCollectionView;