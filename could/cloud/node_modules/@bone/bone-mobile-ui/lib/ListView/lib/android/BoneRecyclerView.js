/**
 * @akModule AKToast
 * @desciption
 * @aliplus.com
 * mode: list || grid || waterfall
 * orientation: vertical || horizontal
 * spanCount: 2
 * layout: {
    type: {mode} 等价于mode
    spanCount: 等价于spanCount
    lineSpacing: //设置Cell上下间隔
    columnSpacing: // 设置列间距
    sectionInset: {
        top:
        bottom:
        left:
        right:
    }
 }
 */
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

var _LocaleProvider = require('../../../LocaleProvider');

var _RecyclerView_Android = require('./RecyclerView_Android');

var _RecyclerView_Android2 = _interopRequireDefault(_RecyclerView_Android);

var _ActionSheet = require('../../../ActionSheet');

var _ActionSheet2 = _interopRequireDefault(_ActionSheet);

var _Alert = require('../../../Alert');

var _Alert2 = _interopRequireDefault(_Alert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var immutable = require('immutable');
var window = _reactNative.Dimensions.get('window');

// import ActionSheet from '../components/ActionSheet';
var SwipeRefresh = (0, _reactNative.requireNativeComponent)('BoneSwipeRefreshView');
var SwipeRefreshRef = "SwipeRefresh_Tag";
// const RecyclerViewRef = "RecyclerView_Tag";

var NOOP = function NOOP() {};

var BoneCollectionViewAndroid = function (_Component) {
    _inherits(BoneCollectionViewAndroid, _Component);

    function BoneCollectionViewAndroid(props) {
        _classCallCheck(this, BoneCollectionViewAndroid);

        var _this = _possibleConstructorReturn(this, (BoneCollectionViewAndroid.__proto__ || Object.getPrototypeOf(BoneCollectionViewAndroid)).call(this, props));

        var props = _this.props;
        _this.type = props.type || props.layout.type;
        var layout = props.layout;
        if (_this.type == 'table') {
            layout.spanCount = 1;
            layout.type = 'grid';
        } else {
            layout.spanCount = layout.columnCount || 2;
        }
        delete layout.columnCount;
        if (layout.minLineSpacing != undefined) {
            layout.lineSpacing = layout.minLineSpacing;
            delete layout.minLineSpacing;
        }
        if (layout.minColumnSpacing !== undefined) {
            layout.columnSpacing = layout.minColumnSpacing;
            delete layout.minColumnSpacing;
        }
        _this.layout = layout;
        _this.onLongClick = _this.onLongClick.bind(_this);
        return _this;
    }

    _createClass(BoneCollectionViewAndroid, [{
        key: 'onRefresh',
        value: function onRefresh(e) {
            var _this2 = this;

            var self = this;
            this.props.onRefresh && this.props.onRefresh(function () {
                _this2.refs[SwipeRefreshRef].setNativeProps({
                    "refreshing": false
                });
            }, e);
        }
    }, {
        key: 'onInfinite',
        value: function onInfinite(e) {
            var _this3 = this;

            var self = this;
            this.props.onInfinite && this.props.onInfinite(function (code) {
                if (code == 'no-more-data') {
                    if (_this3.canLoadMore !== undefined) {
                        _this3.canLoadMore = false;
                    }
                    _this3.refs[SwipeRefreshRef].setNativeProps({
                        "loadingMore": false,
                        "canLoadMore": false
                    });
                } else {
                    _this3.refs[SwipeRefreshRef].setNativeProps({
                        "loadingMore": false
                    });
                }
            }, e);
        }
    }, {
        key: 'onLongClick',
        value: function onLongClick(event, sectionIndex, rowIndex, editConfig, done) {
            if (this.type !== 'table') {
                return;
            }
            var editConfigOption = editConfig.options || null;
            var androidUI = editConfig.androidUI;
            var androidTitle = editConfig.androidTitle;
            if (androidUI && androidTitle && editConfigOption) {
                if (androidUI == 'actionsheet') {
                    this.showActionSheet(sectionIndex, rowIndex, editConfig, done);
                } else if (androidUI == 'alert') {
                    this.showAlert(sectionIndex, rowIndex, editConfig, done);
                }
            }
        }
    }, {
        key: 'showActionSheet',
        value: function showActionSheet(sectionIndex, rowIndex, editConfig, done) {
            var _this4 = this;

            var options = [];
            editConfig.options.forEach(function (config) {
                var autoClose = true;
                if (config.autoClose != undefined) {
                    autoClose = !!config.autoClose;
                }
                var style = {
                    textView: {},
                    text: {}
                };
                if (config.textColor) {
                    style.text.color = config.textColor;
                }
                if (config.bgColor) {
                    style.textView.backgroundColor = config.bgColor;
                }
                options.push({
                    text: config.text,
                    autoClose: autoClose,
                    style: style
                });
            });
            new _ActionSheet2.default({
                title: editConfig.androidTitle,
                onPress: function onPress(ctx, index) {
                    if (index == options.length) {
                        return;
                    }
                    if (_this4.props.onEditAction) {
                        var config = editConfig.options[index],
                            dataSource = _this4.props.dataSource;
                        dataSource = immutable.fromJS(dataSource).toJS();
                        _this4.props.onEditAction({
                            sectionIndex: sectionIndex, rowIndex: rowIndex, config: config, dataSource: dataSource
                        }, NOOP);
                    }
                },
                options: options
            });
        }
    }, {
        key: 'showAlert',
        value: function showAlert(sectionIndex, rowIndex, editConfig, done) {
            var options = [{ text: this.props.boneLocale.formatMessage('ListView', 'androidCancelButtonText'), autoClose: true }];
            var self = this;
            editConfig.options.forEach(function (config) {
                var autoClose = true;
                if (config.autoClose != undefined) {
                    autoClose = !!config.autoClose;
                }
                var style = { text: {}, textView: {} };
                if (config.textColor) {
                    style.text.color = config.textColor;
                }
                if (config.bgColor) {
                    style.textView.backgroundColor = config.bgColor;
                }
                options.push({
                    text: config.text,
                    autoClose: autoClose,
                    style: style,
                    onPress: function onPress(ctx) {
                        if (self.props.onEditAction) {
                            var dataSource = self.props.dataSource;
                            dataSource = immutable.fromJS(dataSource).toJS();
                            self.props.onEditAction({
                                sectionIndex: sectionIndex, rowIndex: rowIndex, config: config, dataSource: dataSource
                            }, NOOP);
                        }
                    }
                });
            });
            new _Alert2.default({
                title: editConfig.androidTitle,
                text: editConfig.androidText || '',
                buttons: options
            });
        }
    }, {
        key: 'renderRecycle',
        value: function renderRecycle() {
            return _react2.default.createElement(
                _reactNative.View,
                { style: { flex: 1 } },
                _react2.default.createElement(_RecyclerView_Android2.default, _extends({}, this.props, {
                    rowGuid: this.props.rowGuid,
                    renderRow: this.props.renderRow,
                    dataSource: this.props.dataSource,
                    layout: this.layout,
                    onTagHandle: this.props.onTagHandle,
                    onLongClick: this.onLongClick
                }))
            );
        }
    }, {
        key: 'render',
        value: function render() {
            var _this5 = this;

            if (this.props.onInfinite || this.props.onRefresh) {
                // ToastAndroid.show("SwipeRefresh loaded", ToastAndroid.SHORT);
                var canRefresh = !!this.props.onRefresh;
                var canLoadMore = !!this.props.onInfinite;
                return _react2.default.createElement(
                    _reactNative.View,
                    { style: this.props.style },
                    _react2.default.createElement(
                        SwipeRefresh,
                        {
                            ref: SwipeRefreshRef,
                            style: [this.props.refreshStyle, {
                                flex: 1,
                                flexDirection: 'row',
                                justifyContent: 'center',
                                alignItems: 'center'
                            }],
                            onSwipeRefresh: function onSwipeRefresh(evt) {
                                return _this5.onRefresh(evt);
                            },
                            onSwipeLoadMore: function onSwipeLoadMore(evt) {
                                return _this5.onInfinite(evt);
                            },
                            canRefresh: canRefresh,
                            canLoadMore: canLoadMore
                        },
                        this.renderRecycle()
                    )
                );
            } else {
                return _react2.default.createElement(
                    _reactNative.View,
                    { style: this.props.style },
                    this.renderRecycle()
                );
            }
        }
    }]);

    return BoneCollectionViewAndroid;
}(_react.Component);

BoneCollectionViewAndroid.propTypes = {
    style: _reactNative.View.propTypes.style,
    dataSource: _react2.default.PropTypes.array.isRequired,
    renderRow: _react2.default.PropTypes.func.isRequired,
    rowGuid: _react2.default.PropTypes.func,
    layout: _react2.default.PropTypes.shape({
        type: _react2.default.PropTypes.string,
        columnCount: _react2.default.PropTypes.number, // 列数
        cellHeight: _react2.default.PropTypes.number,
        cellWidth: _react2.default.PropTypes.number,
        minLineSpacing: _react2.default.PropTypes.number,
        minColumnSpacing: _react2.default.PropTypes.number,
        sectionInset: _react2.default.PropTypes.shape({
            top: _react2.default.PropTypes.number,
            left: _react2.default.PropTypes.number,
            right: _react2.default.PropTypes.number,
            bottom: _react2.default.PropTypes.number
        })
    })
};
BoneCollectionViewAndroid.defaultProps = {
    rowGuid: function rowGuid(rowDatam, sectionIndex, rowIndex) {
        return 'r_' + sectionIndex + '_' + rowIndex;
    },
    dataSource: [[]],
    layout: {
        type: 'grid',
        cellHeight: 80,
        cellWidth: window.width,
        minLineSpacing: 5,
        minColumnSpacing: 5,
        columnCount: 1,
        sectionInset: {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0

        }
    }
};
;
module.exports = (0, _LocaleProvider.connectLocale)(BoneCollectionViewAndroid);