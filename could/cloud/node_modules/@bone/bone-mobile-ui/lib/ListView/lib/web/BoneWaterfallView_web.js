'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

var _MasonryLayout = require('./MasonryLayout/MasonryLayout.js');

var _MasonryLayout2 = _interopRequireDefault(_MasonryLayout);

var _index = require('./ReactPullLoad/index.js');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //https://github.com/scarletsky/react-masonry-layout


var windowSize = _reactNative.Dimensions.get('window');

var RefreshMasonryLayout = function (_Component) {
    _inherits(RefreshMasonryLayout, _Component);

    function RefreshMasonryLayout() {
        _classCallCheck(this, RefreshMasonryLayout);

        return _possibleConstructorReturn(this, (RefreshMasonryLayout.__proto__ || Object.getPrototypeOf(RefreshMasonryLayout)).apply(this, arguments));
    }

    _createClass(RefreshMasonryLayout, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {
            if (nextProps.action == _index.STATS.init || nextProps.action == _index.STATS.reset || nextProps.action == _index.STATS.refreshed) {
                return true;
            }
            return false;
        }
    }, {
        key: 'render',
        value: function render() {
            var ele = _react2.default.createElement(
                _MasonryLayout2.default,
                this.props,
                this.props.children
            );
            return ele;
        }
    }]);

    return RefreshMasonryLayout;
}(_react.Component);

var BoneWaterfallView = function (_Component2) {
    _inherits(BoneWaterfallView, _Component2);

    function BoneWaterfallView(props) {
        _classCallCheck(this, BoneWaterfallView);

        var _this2 = _possibleConstructorReturn(this, (BoneWaterfallView.__proto__ || Object.getPrototypeOf(BoneWaterfallView)).call(this, props));

        _this2.state = {
            dataSource: _this2.props.dataSource,
            hasMore: true,
            action: _index.STATS.init,
            items: _this2.genItems(_this2.props.dataSource)
        };
        return _this2;
    }

    _createClass(BoneWaterfallView, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            this.setState({
                dataSource: nextProps.dataSource,
                items: this.genItems(nextProps.dataSource)
            });
        }
    }, {
        key: 'genItems',
        value: function genItems(dataSource) {
            var _this3 = this;

            var items = [];
            if (Array.isArray(dataSource)) {
                dataSource.map(function (value, index) {
                    var section = value;
                    if (Array.isArray(section)) {
                        section.map(function (innerValue, innerIndex) {
                            items.push(_this3._renderWaterfallRow(innerValue, index, innerIndex));
                        });
                    } else {
                        items.push(_this3._renderWaterfallRow(value, 0, index));
                    }
                });
            }
            return items;
        }
    }, {
        key: 'handleAction',
        value: function handleAction(action) {
            var _this4 = this;

            if (action === this.state.action || action === _index.STATS.refreshing && this.state.action === _index.STATS.loading || action === _index.STATS.loading && this.state.action === _index.STATS.refreshing) {
                return false;
            }

            if (action === _index.STATS.refreshing) {
                //刷新
                setTimeout(function () {

                    if (!_this4.props.onRefresh) {
                        _this4.setState({
                            hasMore: true,
                            action: _index.STATS.refreshed
                        });
                    } else {
                        _this4.props.onRefresh(function (data) {
                            if ('no-more-data' == data) {}
                            _this4.setState({
                                hasMore: true,
                                action: _index.STATS.refreshed,
                                dataSource: data,
                                items: _this4.genItems(data)
                            });
                        });
                    }
                }, 1000);
            } else if (action === _index.STATS.loading) {
                //加载更多      
                this.setState({
                    hasMore: true
                });
                setTimeout(function () {
                    if (!_this4.props.onInfinite) {
                        _this4.setState({
                            hasMore: true,
                            action: _index.STATS.reset
                        });
                    } else {
                        _this4.props.onInfinite(function (data) {
                            if ('no-more-data' == data) {
                                _this4.setState({
                                    action: _index.STATS.reset,
                                    hasMore: false
                                });
                            } else {
                                _this4.setState({
                                    action: _index.STATS.reset,
                                    hasMore: true,
                                    dataSource: data,
                                    items: _this4.genItems(data)
                                });
                            }
                        });
                    }
                }, 1000);
            }

            if (action === _index.STATS.loading && !this.state.hasMore) {
                return;
            }

            //DO NOT modify below code
            this.setState({
                action: action
            });
        }
    }, {
        key: '_renderWaterfallRow',
        value: function _renderWaterfallRow(rowData, sectionID, rowID) {
            var _this5 = this;

            return _react2.default.createElement(
                _reactNative.TouchableWithoutFeedback,
                {
                    key: function (rowData) {
                        if (_this5.props.rowGuid) {
                            return _this5.props.rowGuid(rowData);
                        }
                        return '' + sectionID + rowID;
                    }(rowData),
                    onPress: function onPress() {
                        if (_this5.props.onClick) {
                            _this5.props.onClick(rowData);
                        }
                    } },
                this.props.renderRow(rowData, sectionID, rowID)
            );
        }
    }, {
        key: 'render',
        value: function render() {

            var ele = _react2.default.createElement(
                _index2.default,
                {
                    downEnough: 100,
                    style: { paddingTop: 0, height: windowSize.height, width: windowSize.width },
                    action: this.state.action,
                    hasMore: this.state.hasMore,
                    handleAction: this.handleAction.bind(this),
                    isBlockContainer: true //是否开启使用组件根 DOM 作为外部容器 contianer
                    , distanceBottom: 100 //距离底部距离触发加载更多
                },
                _react2.default.createElement(
                    RefreshMasonryLayout,
                    {
                        action: this.state.action,
                        id: 'items',
                        sizes: [{
                            columns: this.props.layout.columns || 2,
                            gutter: this.props.layout.minLineSpacing || this.props.layout.minColumnSpacing || 4
                        }] },
                    this.state.items
                )
            );
            return ele;
        }
    }]);

    return BoneWaterfallView;
}(_react.Component);

BoneWaterfallView.propTypes = {
    dataSource: _react2.default.PropTypes.array.isRequired,
    renderRow: _react2.default.PropTypes.func.isRequired,
    rowGuid: _react2.default.PropTypes.func,
    onClick: _react2.default.PropTypes.func,
    onRefresh: _react2.default.PropTypes.func,
    onInfinite: _react2.default.PropTypes.func,

    contentInset: _react2.default.PropTypes.shape({
        top: _react2.default.PropTypes.number,
        left: _react2.default.PropTypes.number,
        right: _react2.default.PropTypes.number,
        bottom: _react2.default.PropTypes.number
    }),
    contentOffset: _react2.default.PropTypes.shape({
        x: _react2.default.PropTypes.number,
        y: _react2.default.PropTypes.number
    }),
    layout: _react2.default.PropTypes.shape({
        type: _react2.default.PropTypes.string, //1.'grid',2.'waterfall'
        cellHeight: _react2.default.PropTypes.number, // 仅grid有效
        cellWidth: _react2.default.PropTypes.number, // 仅grid有效
        minLineSpacing: _react2.default.PropTypes.number, // 仅grid有效
        minItemSpacing: _react2.default.PropTypes.number, // cell的左右最小间距
        minColumnSpacing: _react2.default.PropTypes.number, // 设定列的最小间距, 仅waterfall有效
        minContentHeight: _react2.default.PropTypes.number, // 设定每个cell内容区的最小高度, 仅waterfall有效
        columnCount: _react2.default.PropTypes.number, // type为waterfall时，一定要设置，仅waterfall有效
        sectionInset: _react2.default.PropTypes.shape({
            top: _react2.default.PropTypes.number,
            left: _react2.default.PropTypes.number,
            right: _react2.default.PropTypes.number,
            bottom: _react2.default.PropTypes.number
        })
    })
};
BoneWaterfallView.defaultProps = {
    layout: {
        type: "waterfall",
        sectionInset: {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0
        },
        columnCount: 1
    }
};
exports.default = BoneWaterfallView;