/**
 * @akModule AKToast
 * @desciption
 * @aliplus.com
 */
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _reactNative2 = _interopRequireDefault(_reactNative);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iosCommon = require('./ios/refresh');
var BoneCollectionViewManager = _reactNative.NativeModules.BoneCollectionViewManager;

var BoneCollectionViewConsts = _reactNative.NativeModules.UIManager.BoneCollectionView.Constants;
var BoneCollectionRefreshCellViewConsts = _reactNative.NativeModules.UIManager.BoneCollectionRefreshCellView.Constants;

var BoneCollectionViewCell = _react2.default.createClass({
    displayName: 'BoneCollectionViewCell',

    propTypes: {
        content: _react2.default.PropTypes.element.isRequired
    },
    getInitialState: function getInitialState() {
        return {
            visibility: true
        };
    },
    scrollTo: function scrollTo(x, y, animated) {},
    componentWillMount: function componentWillMount() {
        // Don't want to trigger a render pass, so we're putting the view property
        // data directly on the class
        this.viewProperties = {
            width: 0, // the view defaults to width of size 0
            height: 0 // the view defaults to height of size 0
        };
    },


    render: function render() {
        if (this.state.visibility === false) {
            return _react2.default.createElement(RCTBoneCollectionCellView, _extends({ size: this.props.content.props.size, style: { width: this.viewProperties.width, height: this.viewProperties.height } }, this.props));
        }
        return _react2.default.createElement(
            RCTBoneCollectionCellView,
            _extends({ onLayout: this.onLayout, size: this.props.content.props.size }, this.props),
            this.props.content
        );
    },

    onLayout: function onLayout(evt) {
        // When the cell has actually been layed out, record the rendered width & height
        this.viewProperties.width = evt.nativeEvent.layout.width;
        this.viewProperties.height = evt.nativeEvent.layout.height;
    },
    setVisibility: function setVisibility(visibility) {
        if (this.state.visibility == visibility) {
            return; // already have the passed in state, so return early
        }

        if (visibility == true) {
            this.setState({ visibility: true });
        } else {
            this.setState({ visibility: false });
        }
    }
});

var BoneRefresh = _react2.default.createClass({
    displayName: 'BoneRefresh',
    getInitialState: function getInitialState() {
        return { width: 0, height: 0 };
    },

    render: function render() {
        var _this = this;

        return _react2.default.createElement(RCTCollectionRefreshCellView, _extends({ onLayout: function onLayout(event) {
                _this.setState(event.nativeEvent.layout);
            } }, this.props));
    }
});
BoneRefresh.Consts = BoneCollectionRefreshCellViewConsts;

//native模块
var RCTBoneCollectionView = (0, _reactNative.requireNativeComponent)('BoneCollectionView', null);
var RCTBoneCollectionCellView = (0, _reactNative.requireNativeComponent)('BoneCollectionCellView', null);
var RCTCollectionRefreshCellView = (0, _reactNative.requireNativeComponent)('BoneCollectionRefreshCellView', null);

var window = _reactNative.Dimensions.get('window');

var BoneCollectionView = _react2.default.createClass({
    displayName: 'BoneCollectionView',

    propTypes: {
        dataSource: _react2.default.PropTypes.array.isRequired,
        renderRow: _react2.default.PropTypes.func.isRequired,
        rowGuid: _react2.default.PropTypes.func,
        onClick: _react2.default.PropTypes.func,
        onRefresh: _react2.default.PropTypes.func,
        onInfinite: _react2.default.PropTypes.func,

        contentInset: _react2.default.PropTypes.shape({
            top: _react2.default.PropTypes.number,
            left: _react2.default.PropTypes.number,
            right: _react2.default.PropTypes.number,
            bottom: _react2.default.PropTypes.number
        }),
        contentOffset: _react2.default.PropTypes.shape({
            x: _react2.default.PropTypes.number,
            y: _react2.default.PropTypes.number
        }),
        layout: _react2.default.PropTypes.shape({
            type: _react2.default.PropTypes.string, //1.'grid',2.'waterfall'
            cellHeight: _react2.default.PropTypes.number, // 仅grid有效
            cellWidth: _react2.default.PropTypes.number, // 仅grid有效
            minLineSpacing: _react2.default.PropTypes.number, // 仅grid有效
            minItemSpacing: _react2.default.PropTypes.number, // cell的左右最小间距
            minColumnSpacing: _react2.default.PropTypes.number, // 设定列的最小间距, 仅waterfall有效
            minContentHeight: _react2.default.PropTypes.number, // 设定每个cell内容区的最小高度, 仅waterfall有效
            columnCount: _react2.default.PropTypes.number, // type为waterfall时，一定要设置，仅waterfall有效
            sectionInset: _react2.default.PropTypes.shape({
                top: _react2.default.PropTypes.number,
                left: _react2.default.PropTypes.number,
                right: _react2.default.PropTypes.number,
                bottom: _react2.default.PropTypes.number
            })
        })
    },

    getDefaultProps: function getDefaultProps() {
        var def = iosCommon.getDefault(BoneRefresh);
        def.layout = {
            type: 'grid',
            cellHeight: 100,
            cellWidth: 180,
            minLineSpacing: 20,
            minItemSpacing: 5,
            sectionInset: {
                top: 0,
                left: 5,
                right: 5,
                bottom: 0
            }
        };
        return def;
    },
    getInitialState: function getInitialState() {
        return {
            refreshCells: this._refreshCells(this.props),
            rows: this._renderRows(this.props)
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var state = this._stateFromProps(nextProps);
        this.setState(state);
    },
    _stateFromProps: function _stateFromProps(props) {
        return {
            refreshCells: this._refreshCells(props),
            rows: this.props.dataSource === props.dataSource ? this.state.rows : this._renderRows(props)
        };
    },
    _refreshCells: function _refreshCells(props) {
        return iosCommon.getRefresh(props);
    },
    _renderRows: function _renderRows(props) {
        if (this.props.dataSource == null || this.props.dataSource.length == 0) {
            return null;
        }
        var dataSource = props.dataSource;
        var cellData = this.cellData = {};
        var rows = [];
        for (var sectionIndex = 0; sectionIndex < dataSource.length; sectionIndex++) {
            var section = dataSource[sectionIndex];
            for (var rowIndex = 0; rowIndex < section.length; rowIndex++) {
                var rowData = section[rowIndex];
                var content = this.props.renderRow(rowData, sectionIndex, rowIndex, this._onRowHighlighted);
                var rowGuid = this.props.rowGuid ? this.props.rowGuid(rowData, sectionIndex, rowIndex) : this._defaultRowGuid(rowData);
                var row = _react2.default.createElement(BoneCollectionViewCell, {
                    key: rowGuid,
                    indexPath: { section: sectionIndex, item: rowIndex },
                    style: {
                        height: content.props.size ? content.props.size.height : this.props.layout.cellHeight,
                        width: content.props.size ? content.props.size.width : this.props.layout.cellWidth
                    },
                    content: content,
                    ref: function ref(row) {
                        PrivateMethods.captureReferenceFor(cellData, row);
                    }
                });

                rows.push(row);
            }
        }
        return rows;
    },
    _defaultRowGuid: function _defaultRowGuid(rowData) {
        if (!this._generatedId) {
            this._generatedId = 0;
        }
        return (this._generatedId++).toString();
    },
    render: function render() {
        if (this.props.dataSource == null || this.props.dataSource.length == 0) {
            return null;
        }
        if (this.collectionview) {
            return _react2.default.cloneElement(this.collectionview, { cellCount: this.state.rows.length }, this.state.refreshCells, this.state.rows);
        } else {
            return this.collectionview = _react2.default.createElement(
                RCTBoneCollectionView,
                {
                    style: this.props.style,
                    layout: this.props.layout,
                    contentInset: this.props.contentInset // 内容的padding，业务方可定制
                    , scrollIndicatorInsets: this.props.contentInset // 滚动条的位置，和contentInset保持一致
                    , cellCount: this.state.rows.length // 总的cell数，计算结果
                    , onLoadCell: this._onLoadCell,
                    onUnloadCell: this._onUnloadCell,
                    onClick: this._onClick,
                    onRefresh: this._onRefresh,
                    onInfinite: this._onInfinite,
                    onBeginDrag: this._onBeginDrag,
                    onEndDrag: this._onEndDrag,
                    onStartShouldSetResponderCapture: this._onStartShouldSetResponderCapture,
                    onMoveShouldSetResponderCapture: this._onMoveShouldSetResponderCapture
                },
                this.state.refreshCells,
                this.state.rows
            );
        }
    },

    _onBeginDrag: function _onBeginDrag() {
        this.setDragging(true);
    },

    _onEndDrag: function _onEndDrag() {
        this.setDragging(false);
    },

    isDragging: function isDragging() {
        if (this._isDragging === null || this._isDragging === undefined) {
            this._isDragging = false;
        }
        return this._isDragging;
    },

    setDragging: function setDragging(isDragging) {
        this._isDragging = isDragging;
    },

    _onStartShouldSetResponderCapture: function _onStartShouldSetResponderCapture(evt) {
        return this.isDragging();
    },

    _onMoveShouldSetResponderCapture: function _onMoveShouldSetResponderCapture(evt) {
        return this.isDragging();
    },

    _onRefresh: function _onRefresh(event) {
        var reactTag = event.nativeEvent.target || _reactNative2.default.findNodeHandle(this);
        if (!this.props.onRefresh) {
            BoneCollectionViewManager.headerEndRefreshing(reactTag);
        } else {
            this.props.onRefresh(function (code) {
                if (code == 'no-more-data') {
                    BoneCollectionViewManager.headerEndRefreshing(reactTag);
                } else {
                    BoneCollectionViewManager.headerEndRefreshing(reactTag);
                }
            });
        }
    },
    _onInfinite: function _onInfinite(event) {
        var reactTag = event.nativeEvent.target || _reactNative2.default.findNodeHandle(this);
        if (!this.props.onInfinite) {
            BoneCollectionViewManager.footerEndRefreshing(reactTag);
        } else {
            this.props.onInfinite(function (code) {
                if (code == 'no-more-data') {
                    BoneCollectionViewManager.footerEndRefreshingNoMoreData(reactTag, 60);
                } else {
                    BoneCollectionViewManager.footerEndRefreshing(reactTag);
                }
            });
        }
    },

    _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
        this.setState({ highlightedRow: { sectionID: sectionID, rowID: rowID } });
    },

    _onClick: function _onClick(event) {
        console.log('原生event已经触发');
        var data = event.nativeEvent;

        if (this.props.onClick) {
            this.props.onClick(data);
        }
        event.stopPropagation();
    },
    _onLoadCell: function _onLoadCell(event) {
        var data = event.nativeEvent;
        var currentCell = this.cellData[data.section][data.item];
        currentCell.setVisibility(true);
        event.stopPropagation();
    },
    _onUnloadCell: function _onUnloadCell(event) {
        var data = event.nativeEvent;
        var currentCell = this.cellData[data.section][data.item];
        currentCell.setVisibility(false);
        event.stopPropagation();
    }
});

var PrivateMethods = {
    captureReferenceFor: function captureReferenceFor(cellData, row) {
        var sectionId = row && row.props.indexPath.section;
        var rowId = row && row.props.indexPath.item;
        if (cellData[sectionId] === undefined) {
            cellData[sectionId] = {};
        }

        cellData[sectionId][rowId] = row; // Capture the reference
    }

    //常量
};BoneCollectionView.Consts = BoneCollectionViewConsts;

module.exports = BoneCollectionView;