'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var distance = _reactNative.Dimensions.get('window').width - 16 * 2; // 百分比 bar 长度

var width = 2; // 百分比竖条宽度

// 竖条个数固定为 50 个，除非需求大改，这里不会发生变化
// 竖条间距
var interval = (distance - width * 50) / 49;

// 百分比数值占位长度
var percentageWidth = 52;

var PercentageBar = function (_Component) {
    _inherits(PercentageBar, _Component);

    function PercentageBar() {
        _classCallCheck(this, PercentageBar);

        return _possibleConstructorReturn(this, (PercentageBar.__proto__ || Object.getPrototypeOf(PercentageBar)).apply(this, arguments));
    }

    _createClass(PercentageBar, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps));
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                _props$style = _props.style,
                style = _props$style === undefined ? {} : _props$style,
                themeColor = _props.themeColor,
                maxValue = _props.maxValue,
                minValue = _props.minValue,
                value = _props.value;

            // 组件容器样式，只支持有限定制

            var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(style),
                _StyleSheet$flatten$m = _StyleSheet$flatten.marginTop,
                marginTop = _StyleSheet$flatten$m === undefined ? 0 : _StyleSheet$flatten$m,
                _StyleSheet$flatten$m2 = _StyleSheet$flatten.marginBottom,
                marginBottom = _StyleSheet$flatten$m2 === undefined ? 0 : _StyleSheet$flatten$m2,
                _StyleSheet$flatten$b = _StyleSheet$flatten.borderTopWidth,
                borderTopWidth = _StyleSheet$flatten$b === undefined ? 0 : _StyleSheet$flatten$b,
                _StyleSheet$flatten$b2 = _StyleSheet$flatten.borderBottomWidth,
                borderBottomWidth = _StyleSheet$flatten$b2 === undefined ? 0 : _StyleSheet$flatten$b2,
                borderColor = _StyleSheet$flatten.borderColor,
                borderTopColor = _StyleSheet$flatten.borderTopColor,
                borderBottomColor = _StyleSheet$flatten.borderBottomColor;

            // 百分比，做多显示一个小数点，.e.g 37.2%


            var percentage = Math.round((value - minValue) / (maxValue - minValue) * 1000) / 10;

            var i = 1,
                length = 50,
                position = i,
                stickEls = [];

            for (; i <= length; ++i) {

                if (percentage >= i * 2) {

                    position = i;
                }

                stickEls.push(_react2.default.createElement(_reactNative.View, {
                    key: i,
                    style: [styles.stick, i * 2 > percentage ? null : { backgroundColor: themeColor }]
                }));
            }

            var leftDistance = width * position + interval * (position - 1) - width / 2 - percentageWidth / 2;

            if (leftDistance < 0) {

                leftDistance = 0;
            } else if (leftDistance > distance - percentageWidth) {

                leftDistance = distance - percentageWidth;
            }

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, {
                        marginTop: marginTop, marginBottom: marginBottom,
                        borderTopWidth: borderTopWidth, borderBottomWidth: borderBottomWidth,
                        borderColor: borderColor, borderTopColor: borderTopColor, borderBottomColor: borderBottomColor
                    }] },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.bar },
                    stickEls
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.percentageContainer },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [styles.percentage, { left: leftDistance }] },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [styles.percentageText, { color: themeColor }] },
                            percentage + '%'
                        )
                    )
                )
            );
        }
    }]);

    return PercentageBar;
}(_react.Component);

PercentageBar.propTypes = {
    themeColor: _propTypes2.default.string, // 主题色
    // 百分比值取决于 maxValue，minValue & value
    maxValue: _propTypes2.default.number, // 最大值，默认 100
    minValue: _propTypes2.default.number, // 最小值, 默认 0
    value: _propTypes2.default.number // 当前值
};
PercentageBar.defaultProps = {
    themeColor: '#1fc8a2',
    maxValue: 100,
    minValue: 0,
    value: 0
};
exports.default = PercentageBar;


var styles = _reactNative.StyleSheet.create({
    body: {
        height: 65,
        paddingTop: 13,
        paddingRight: 16,
        paddingLeft: 16,
        backgroundColor: '#fff'
    },
    bar: {
        flexDirection: 'row',
        justifyContent: 'space-between'
    },
    stick: {
        width: width,
        height: 9,
        borderRadius: width,
        backgroundColor: '#ccc'
    },
    percentageContainer: {
        position: 'relative',
        height: 20,
        marginTop: 7
    },
    percentage: {
        position: 'absolute',
        top: 0,
        left: 0,
        width: percentageWidth,
        height: 20,
        alignItems: 'center',
        justifyContent: 'center'
    },
    percentageText: {
        fontSize: 14,
        fontWeight: 'bold',
        color: '#1fc8a2'
    }
});