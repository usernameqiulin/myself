'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _GridView2 = require('./GridView');

var _GridView3 = _interopRequireDefault(_GridView2);

var _IconFont = require('../../IconFont');

var _IconFont2 = _interopRequireDefault(_IconFont);

var _constant = require('./constant');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RectView = function (_GridView) {
    _inherits(RectView, _GridView);

    function RectView() {
        _classCallCheck(this, RectView);

        return _possibleConstructorReturn(this, (RectView.__proto__ || Object.getPrototypeOf(RectView)).apply(this, arguments));
    }

    _createClass(RectView, [{
        key: 'render',
        value: function render() {
            var pressing = this.state.pressing;
            var _props = this.props,
                _props$style = _props.style,
                style = _props$style === undefined ? {} : _props$style,
                data = _props.data,
                themeColor = _props.themeColor;


            var disabled = this.disabled;

            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                {
                    style: [style, styles.body],
                    activeOpacity: 1,
                    disabled: disabled,
                    onPressIn: this.onPressIn,
                    onPressOut: this.onPressOut,
                    onPress: this.onPress
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.container },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [styles.content, data.status === 1 ? {
                                borderWidth: 0,
                                backgroundColor: themeColor
                            } : null] },
                        data.icon ? _react2.default.createElement(_IconFont2.default, {
                            style: [styles.icon, data.status === 1 ? { color: '#fff' } : null],
                            iconFont: data.icon
                        }) : null,
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [styles.text, data.status === 1 ? { color: '#fff' } : null] },
                            data.text
                        )
                    ),
                    pressing || disabled ? _react2.default.createElement(_reactNative.View, { style: [styles.cover, pressing ? { backgroundColor: 'rgba(0, 0, 0, 0.1)' } : null, disabled ? { backgroundColor: 'rgba(255, 255, 255, 0.6)' } : null] }) : null
                )
            );

            return _react2.default.createElement(_reactNative.View, { style: [style, { height: 85, backgroundColor: '#f00' }] });
        }
    }]);

    return RectView;
}(_GridView3.default);

exports.default = RectView;


var styles = _reactNative.StyleSheet.create({
    body: {
        height: _constant.RECT_VIEW_HEIGHT
    },
    container: {
        position: 'relative',
        flex: 1
    },

    content: {
        flex: 1,
        borderWidth: 1,
        borderColor: '#ededed',
        borderRadius: 6,
        alignItems: 'center',
        justifyContent: 'center'
    },
    icon: {
        width: 28,
        height: 28,
        marginBottom: 8,
        fontSize: 28,
        color: '#999',
        backgroundColor: 'transparent',
        alignItems: 'center',
        justifyContent: 'center'
    },
    text: {
        height: 17,
        lineHeight: 17,
        fontSize: 12,
        color: '#333'
    },

    cover: {
        position: 'absolute',
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        borderRadius: 6
    }
});