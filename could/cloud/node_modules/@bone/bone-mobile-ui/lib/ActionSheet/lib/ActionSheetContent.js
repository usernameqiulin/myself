'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _LocaleProvider = require('../../LocaleProvider');

var _ActionSheetButton = require('./ActionSheetButton');

var _ActionSheetButton2 = _interopRequireDefault(_ActionSheetButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var ActionSheetContent = function (_Component) {
    _inherits(ActionSheetContent, _Component);

    function ActionSheetContent() {
        _classCallCheck(this, ActionSheetContent);

        return _possibleConstructorReturn(this, (ActionSheetContent.__proto__ || Object.getPrototypeOf(ActionSheetContent)).apply(this, arguments));
    }

    _createClass(ActionSheetContent, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps));
        }
    }, {
        key: '$renderOptionButtons',
        value: function $renderOptionButtons() {
            var _props = this.props,
                title = _props.title,
                optionTexts = _props.optionTexts,
                _onPress = _props.onPress;


            var length = optionTexts.length;

            return optionTexts.map(function (optionText, index) {

                // 修复安卓的兼容性问题...
                var borderStyle = index === length - 1 ? { borderBottomRightRadius: 8, borderBottomLeftRadius: 8 } : {};

                if (!title && index === 0) {

                    borderStyle.borderTopRightRadius = 8;

                    borderStyle.borderTopLeftRadius = 8;
                }

                return _react2.default.createElement(_ActionSheetButton2.default, {
                    key: index,
                    style: styles.button,
                    text: optionText,
                    onPress: function onPress() {
                        return _onPress(index);
                    },
                    hasBorder: index < length - 1,
                    borderStyle: borderStyle
                });
            });
        }
    }, {
        key: '$renderOptionPanel',
        value: function $renderOptionPanel() {
            var _props2 = this.props,
                title = _props2.title,
                optionTexts = _props2.optionTexts;


            var length = optionTexts.length;

            if (!title && !length) {

                return null;
            }

            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.optionPanel },
                title ? _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.title, length ? { borderBottomWidth: 1 } : null] },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: styles.titleText },
                        title
                    )
                ) : null,
                this.$renderOptionButtons()
            );
        }
    }, {
        key: '$renderCancelButton',
        value: function $renderCancelButton() {
            var _props3 = this.props,
                boneLocale = _props3.boneLocale,
                optionTexts = _props3.optionTexts,
                cancelButtonText = _props3.cancelButtonText,
                _onPress2 = _props3.onPress;


            var length = optionTexts.length;

            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.cancel },
                _react2.default.createElement(_ActionSheetButton2.default, {
                    style: styles.button,
                    text: cancelButtonText || boneLocale.formatMessage('ActionSheet', 'cancelButtonText'),
                    onPress: function onPress() {
                        return _onPress2(length);
                    },
                    hasBorder: false,
                    borderStyle: { borderRadius: 8 } // 修复安卓的兼容性问题...
                })
            );
        }
    }, {
        key: 'render',
        value: function render() {

            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.body },
                this.$renderOptionPanel(),
                this.$renderCancelButton()
            );
        }
    }]);

    return ActionSheetContent;
}(_react.Component);

ActionSheetContent.propTypes = {
    title: _propTypes2.default.string,
    optionTexts: _propTypes2.default.arrayOf(_propTypes2.default.string),
    cancelButtonText: _propTypes2.default.string,
    onPress: _propTypes2.default.func
};
ActionSheetContent.defaultProps = {
    title: '',
    optionTexts: [],
    cancelButtonText: '',
    onPress: noop
};
exports.default = (0, _LocaleProvider.connectLocale)(ActionSheetContent);


var styles = _reactNative.StyleSheet.create({
    body: {
        paddingRight: 16,
        paddingLeft: 16,
        backgroundColor: 'transparent'
    },
    optionPanel: {
        marginBottom: 12,
        borderRadius: 8,
        backgroundColor: '#fff',
        overflow: 'hidden'
    },
    title: {
        height: 56,
        borderColor: '#ededed',
        overflow: 'hidden',
        justifyContent: 'center'
    },
    titleText: {
        height: 17,
        lineHeight: 17,
        fontSize: 12,
        fontWeight: 'bold',
        color: '#999',
        textAlign: 'center'
    },
    cancel: {
        marginBottom: 12,
        borderRadius: 8,
        backgroundColor: '#fff',
        overflow: 'hidden'
    },
    button: {
        height: 56
    }
});