'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.createPanResponder = createPanResponder;

var _reactNative = require('react-native');

var fn = function fn() {
    return true;
};

var fn2 = function fn2() {
    return false;
};

function createPanResponder() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$onTouchStart = _ref.onTouchStart,
        onTouchStart = _ref$onTouchStart === undefined ? fn : _ref$onTouchStart,
        _ref$onTouchMove = _ref.onTouchMove,
        onTouchMove = _ref$onTouchMove === undefined ? fn : _ref$onTouchMove,
        _ref$onTouchEnd = _ref.onTouchEnd,
        onTouchEnd = _ref$onTouchEnd === undefined ? fn : _ref$onTouchEnd;

    return _reactNative.PanResponder.create({
        // touchstart 时，才成为响应者
        onStartShouldSetPanResponder: fn,
        // 捕获时，禁用子组件成为响应者
        onStartShouldSetPanResponderCapture: fn,
        // touchmove 时，不会成为响应者，只在 touchstart 时成为响应者
        onMoveShouldSetPanResponder: fn2,
        // 捕获时，禁用子组件成为响应者
        onMoveShouldSetPanResponderCapture: fn2,
        // 其它组件要求成为响应者时，不放权
        // 比如 Slider 嵌在 ScrollView 中，手势上下移动时触发滚动，此时 Slider 滑动不终止
        onPanResponderTerminationRequest: fn2,
        // touchstart 响应事件
        onPanResponderGrant: function onPanResponderGrant(evt, gestureState) {

            onTouchStart(gestureState);
        },

        // touchmove 响应事件
        onPanResponderMove: function onPanResponderMove(evt, gestureState) {

            onTouchMove(gestureState);
        },

        // touchend 响应事件
        onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {

            onTouchEnd(gestureState);
        },

        // 响应终止时触发，对外同样适用于 touchend
        // onPanResponderTerminationRequest 返回 false，应该不会触发
        onPanResponderTerminate: function onPanResponderTerminate(evt, gestureState) {

            onTouchEnd(gestureState);
        }
    });
}