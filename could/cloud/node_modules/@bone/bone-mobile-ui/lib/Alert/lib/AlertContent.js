'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _LocaleProvider = require('../../LocaleProvider');

var _AlertButton = require('./AlertButton');

var _AlertButton2 = _interopRequireDefault(_AlertButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

var AlertContent = function (_Component) {
    _inherits(AlertContent, _Component);

    function AlertContent() {
        _classCallCheck(this, AlertContent);

        return _possibleConstructorReturn(this, (AlertContent.__proto__ || Object.getPrototypeOf(AlertContent)).apply(this, arguments));
    }

    _createClass(AlertContent, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps));
        }
    }, {
        key: '$renderButtons',
        value: function $renderButtons() {
            var _props = this.props,
                themeColor = _props.themeColor,
                buttonTexts = _props.buttonTexts,
                _onPress = _props.onPress;


            var length = buttonTexts.length;

            return buttonTexts.map(function (buttonText, index) {

                // 修复安卓的兼容性问题...
                var borderRadiusStyle = {};

                if (length > 2 && index === length - 1) {

                    borderRadiusStyle.borderBottomRightRadius = 13, borderRadiusStyle.borderBottomLeftRadius = 13;
                } else if (length <= 2) {

                    if (index === 0) {

                        borderRadiusStyle.borderBottomLeftRadius = 13;
                    }

                    if (index === length - 1) {

                        borderRadiusStyle.borderBottomRightRadius = 13;
                    }
                }

                return _react2.default.createElement(_AlertButton2.default, {
                    key: index,
                    style: length > 2 ? { height: 44 } : { flex: 1 },
                    themeColor: themeColor,
                    text: buttonText,
                    onPress: function onPress() {
                        return _onPress(index);
                    },
                    borderStyle: length > 2 ? {
                        borderTopWidth: index !== 0 ? 1 : 0
                    } : {
                        borderLeftWidth: index !== 0 ? 1 : 0
                    },
                    borderRadiusStyle: borderRadiusStyle
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                boneLocale = _props2.boneLocale,
                title = _props2.title,
                text = _props2.text,
                buttonTexts = _props2.buttonTexts;


            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.body },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.header },
                    title ? _react2.default.createElement(
                        _reactNative.Text,
                        { style: styles.title },
                        title
                    ) : null,
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.text, { marginTop: title ? 10 : 0 }] },
                        text || boneLocale.formatMessage('Alert', 'text')
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: buttonTexts.length > 2 ? {
                            flexDirection: 'column'
                        } : {
                            height: 44,
                            flexDirection: 'row'
                        } },
                    this.$renderButtons()
                )
            );
        }
    }]);

    return AlertContent;
}(_react.Component);

AlertContent.propTypes = {
    themeColor: _propTypes2.default.string, // 主题色
    title: _propTypes2.default.string, // 标题
    text: _propTypes2.default.string, // 内容
    buttonTexts: _propTypes2.default.arrayOf(_propTypes2.default.string), // 按钮文字数组
    onPress: _propTypes2.default.func // 触摸其中一个按钮的回调
};
AlertContent.defaultProps = {
    themeColor: '#1fc8a2',
    title: '',
    text: '',
    buttonTexts: [],
    onPress: noop
};
exports.default = (0, _LocaleProvider.connectLocale)(AlertContent);


var styles = _reactNative.StyleSheet.create({
    body: {
        width: 270,
        borderRadius: 13,
        backgroundColor: '#fff',
        overflow: 'hidden'
    },
    header: {
        paddingTop: 20,
        paddingRight: 16,
        paddingBottom: 20,
        paddingLeft: 16,
        borderBottomWidth: 1,
        borderColor: '#ededed'
    },
    title: {
        height: 22,
        lineHeight: 22,
        fontSize: 17,
        fontWeight: 'bold',
        color: '#030303',
        textAlign: 'center'
    },
    text: {
        lineHeight: 16,
        fontSize: 12,
        color: '#030303'
    }
});