'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactNative = require('react-native');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};

// 长按时，数值每 100ms 变化一次
var changeIntervalOnLongPress = 100;

// 数值连续变化时，前后间隔大于 200ms 才会触发 onSendValueChange
var minimumChangeResponseInterval = 200;

// 由数字转成的字符串，一定会有小数点左边的数
var numberReg = /^\d+(?:\.\d+)?$/;

// 获取整数，范围不做限制
// 函数名 getUnsignedInteger -> getInteger
// const getUnsignedInteger = value => {
var getInteger = function getInteger(value) {

    value = Math.round(value);

    // 范围不再做限制
    // if (value < 0) {

    //     value = 0;
    // }
    // else if (value > 999) {

    //     value = 999;
    // }

    return value;
};

// 获取整数字符串, 0, 01 - 09, 10 - 999
var getFormatValue = function getFormatValue(value) {

    value = getInteger(value);

    // 经讨论，大于 0 小于 10 时，不再添加前缀 0
    // if (value > 0 && value < 10) {

    //     return `0${value}`;
    // }

    return value.toString();
};

var DataPanel = function (_Component) {
    _inherits(DataPanel, _Component);

    function DataPanel(props) {
        _classCallCheck(this, DataPanel);

        var _this = _possibleConstructorReturn(this, (DataPanel.__proto__ || Object.getPrototypeOf(DataPanel)).call(this, props));

        _this.$onMinus = function () {
            var _this$state$mainData = _this.state.mainData,
                mainData = _this$state$mainData === undefined ? {} : _this$state$mainData;


            _this.$onChangeMainValue(mainData, -mainData.step || -1);
        };

        _this.$minusIntervalIndicator = undefined;

        _this.$onMinusLongPress = function () {

            clearInterval(_this.$minusIntervalIndicator);

            _this.$minusIntervalIndicator = setInterval(_this.$onMinus, changeIntervalOnLongPress);

            _this.$onMinus();
        };

        _this.$onMinusPressOut = function () {

            clearInterval(_this.$minusIntervalIndicator);
        };

        _this.$onPlus = function () {
            var _this$state$mainData2 = _this.state.mainData,
                mainData = _this$state$mainData2 === undefined ? {} : _this$state$mainData2;


            _this.$onChangeMainValue(mainData, mainData.step || 1);
        };

        _this.$plusIntervalIndicator = undefined;

        _this.$onPlusLongPress = function () {

            clearInterval(_this.$plusIntervalIndicator);

            _this.$plusIntervalIndicator = setInterval(_this.$onPlus, changeIntervalOnLongPress);

            _this.$onPlus();
        };

        _this.$onPlusPressOut = function () {

            clearInterval(_this.$plusIntervalIndicator);
        };

        _this.$sendTimeoutIndicator = undefined;


        var state = {
            hasMainBlock: false, // 是否有中部
            hasStatusBlock: false // 是否有下部
        };

        if ('defaultMainData' in props) {

            state.hasMainBlock = true;

            state.mainData = _this.$getMainDataState(props.defaultMainData, props); // 中部数据
        }

        if ('defaultStatusData' in props) {

            state.statusData = _this.$getStatusDataState(props.defaultStatusData, props); // 下部数据

            state.hasStatusBlock = !!state.statusData.length;
        }

        _this.state = state;
        return _this;
    }

    _createClass(DataPanel, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var _state = this.state,
                hasMainBlock = _state.hasMainBlock,
                mainData = _state.mainData,
                hasStatusBlock = _state.hasStatusBlock,
                statusData = _state.statusData;


            if (hasMainBlock && ('mainValue' in nextProps || 'mainDesc' in nextProps || 'minimumMainValue' in nextProps || 'maximumMainValue' in nextProps || 'mainStep' in nextProps)) {

                this.setState({
                    mainData: this.$getMainDataState(mainData, nextProps)
                });
            }

            if (hasStatusBlock && 'statusValue' in nextProps) {

                this.setState({
                    statusData: this.$getStatusDataState(statusData, nextProps)
                });
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps, nextState) {

            return !_immutable2.default.is(_immutable2.default.fromJS(this.props), _immutable2.default.fromJS(nextProps)) || !_immutable2.default.is(_immutable2.default.fromJS(this.state), _immutable2.default.fromJS(nextState));
        }
    }, {
        key: '$getMainDataState',
        value: function $getMainDataState(mainData, props) {

            var data = _extends({}, mainData);

            if ('mainValue' in props) {

                data.value = props.mainValue;
            }

            if ('mainDesc' in props) {

                data.desc = props.mainDesc;
            }

            if ('minimumMainValue' in props) {

                data.minValue = props.minimumMainValue;
            }

            if ('maximumMainValue' in props) {

                data.maxValue = props.maximumMainValue;
            }

            if ('mainStep' in props) {

                data.step = props.mainStep;
            }

            // 步长默认为 1
            data.step = getInteger(data.step || 1) || 1;

            // 最小值默认 -99
            data.minValue = getInteger(data.minValue === undefined ? -99 : data.minValue);

            // 最大值默认 999
            data.maxValue = getInteger(data.maxValue === undefined ? 999 : data.maxValue);

            data.value = getInteger(data.value || 0);

            // value 超出边界则修正
            if (data.value < data.minValue) {

                data.value = data.minValue;
            } else if (data.value > data.maxValue) {

                data.value = data.maxValue;
            }

            return data;
        }
    }, {
        key: '$getStatusDataState',
        value: function $getStatusDataState(statusData, props) {
            var _props$statusValue = props.statusValue,
                statusValue = _props$statusValue === undefined ? [] : _props$statusValue;


            return statusData.map(function (item, index) {

                var data = _extends({}, item),
                    value = statusValue[index];

                if (value !== undefined) {

                    data.value = value;
                }

                data.value = data.value || 0; // 默认是数字 0

                return data;
            });
        }
    }, {
        key: '$renderTitle',
        value: function $renderTitle() {
            var title = this.props.title;


            if (!title) {

                return null;
            }

            var _state2 = this.state,
                hasMainBlock = _state2.hasMainBlock,
                hasStatusBlock = _state2.hasStatusBlock;


            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.title, hasMainBlock && hasStatusBlock ? { marginTop: 0 } : null] },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.titleText },
                    title
                )
            );
        }
    }, {
        key: '$renderMainBlock',
        value: function $renderMainBlock() {
            var disabled = this.props.disabled;
            var _state3 = this.state,
                hasMainBlock = _state3.hasMainBlock,
                hasStatusBlock = _state3.hasStatusBlock,
                mainData = _state3.mainData;


            if (!hasMainBlock) {

                return null;
            }

            // disabled，则全局 disable
            // value === minValue，则减号 disable
            // value === maxValue，则加号 disable
            var value = mainData.value,
                minValue = mainData.minValue,
                maxValue = mainData.maxValue,
                step = mainData.step,
                _mainData$unit = mainData.unit,
                unit = _mainData$unit === undefined ? '' : _mainData$unit,
                controllable = mainData.controllable,
                _mainData$desc = mainData.desc,
                desc = _mainData$desc === undefined ? '' : _mainData$desc,
                descOutstanding = mainData.descOutstanding;


            return _react2.default.createElement(
                _reactNative.View,
                { style: { marginTop: hasStatusBlock ? 28 : 34 } },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.main },
                    _react2.default.createElement(_reactNative.View, null),
                    controllable === true ? _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: styles.control,
                            activeOpacity: 0.6,
                            disabled: disabled || value - step < minValue,
                            onPress: this.$onMinus,
                            onLongPress: this.$onMinusLongPress,
                            onPressOut: this.$onMinusPressOut
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [styles.controlIcon, disabled || value - step < minValue ? {
                                    opacity: 0.6
                                } : null] },
                            '-'
                        )
                    ) : null,
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.mainValue },
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.mainValueBox },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.mainValueText },
                                getFormatValue(value)
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.mainValueUnit },
                                unit
                            )
                        )
                    ),
                    controllable === true ? _react2.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: styles.control,
                            activeOpacity: 0.6,
                            disabled: disabled || value + step > maxValue,
                            onPress: this.$onPlus,
                            onLongPress: this.$onPlusLongPress,
                            onPressOut: this.$onPlusPressOut
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [styles.controlIcon, disabled || value + step > maxValue ? {
                                    opacity: 0.6
                                } : null] },
                            '+'
                        )
                    ) : null,
                    _react2.default.createElement(_reactNative.View, null)
                ),
                desc ? _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.mainDesc, { marginTop: hasStatusBlock ? 8 : 20 }] },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [styles.mainDescBackground, descOutstanding === true ? {
                                backgroundColor: 'rgba(255, 255, 255, 0.2)'
                            } : null] },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: styles.mainDescText },
                            desc
                        )
                    )
                ) : null
            );
        }
    }, {
        key: '$renderStatusBlock',
        value: function $renderStatusBlock() {
            var _state4 = this.state,
                hasMainBlock = _state4.hasMainBlock,
                hasStatusBlock = _state4.hasStatusBlock,
                statusData = _state4.statusData;


            if (!hasStatusBlock) {

                return null;
            }

            var statusDataHasString = this.$statusDataHasString;

            var statusItemEls = [];

            statusData.forEach(function (item, index) {
                var value = item.value,
                    _item$unit = item.unit,
                    unit = _item$unit === undefined ? '' : _item$unit,
                    _item$desc = item.desc,
                    desc = _item$desc === undefined ? '' : _item$desc;


                statusItemEls.push(_react2.default.createElement(
                    _reactNative.View,
                    { key: index, style: styles.statusItem },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [styles.statusValue, hasMainBlock ? null : { height: statusDataHasString ? 42 : 56 }] },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [styles.statusValueText, hasMainBlock ? null : { fontSize: statusDataHasString ? 30 : 48, fontWeight: '100' }] },
                            value
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [styles.statusUnitText, hasMainBlock ? null : { marginBottom: statusDataHasString ? 4 : 9 }] },
                            unit
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.statusDesc, hasMainBlock ? null : { height: 17, lineHeight: 17, fontSize: 12 }] },
                        desc
                    )
                ));
            });

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.status, hasMainBlock ? null : {
                        bottom: statusDataHasString ? 36 : 30,
                        height: statusDataHasString ? 61 : 72
                    }] },
                statusItemEls
            );
        }

        // 减号长按，interval 记录者


        // long press 与 press 冲突关系，只会触发其一


        // 长按结束后，停止 interval change


        // 加号长按，interval 记录者


        // long press 与 press 冲突关系，只会触发其一


        // 长按结束后，停止 interval change

    }, {
        key: '$onChangeMainValue',
        value: function $onChangeMainValue(data, delta) {
            var _props = this.props,
                disabled = _props.disabled,
                onBeforeChangeValue = _props.onBeforeChangeValue,
                onChangeValue = _props.onChangeValue;

            // 禁用，直接返回（加一次判断，减少耦合）

            if (disabled) {

                return;
            }

            var _data$value = data.value,
                value = _data$value === undefined ? 0 : _data$value,
                _data$minValue = data.minValue,
                minValue = _data$minValue === undefined ? -99 : _data$minValue,
                _data$maxValue = data.maxValue,
                maxValue = _data$maxValue === undefined ? 999 : _data$maxValue;


            value += delta;

            // value 超出边界，直接返回（实际上这个时候已经 disable 了，不会触发，这样只是为了减少耦合）
            if (value < minValue || value > maxValue) {

                return;
            }

            // 开发者可能在某些时候禁止数据变化
            if (onBeforeChangeValue && onBeforeChangeValue(value) === false) {

                return;
            }

            // 开发者未指定 mainValue 属性，则内部自己设置状态
            if (!('mainValue' in this.props)) {

                this.setState({
                    mainData: this.$getMainDataState(this.state.mainData, { mainValue: value })
                });
            }

            // 开发者如果指定了 mainValue 属性，则必须在外部触发 onChangeValue 时，改变这个属性值
            // 这里设计参考的是 AntDesign，强制开发者保持组件内外数据一致
            onChangeValue(value);

            // 此函数决定是否要触发 onSendValueChange
            this.$onSendValueChange(value);
        }

        // onSendValueChange，timeout 记录者

    }, {
        key: '$onSendValueChange',


        // 数值连续变化，间隔大于 200ms 则触发 onSendValueChange
        value: function $onSendValueChange(value) {
            var onSendValueChange = this.props.onSendValueChange;


            clearTimeout(this.$sendTimeoutIndicator);

            this.$sendTimeoutIndicator = setTimeout(onSendValueChange, minimumChangeResponseInterval, value);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                themeColor = _props2.themeColor,
                _props2$style = _props2.style,
                style = _props2$style === undefined ? {} : _props2$style;
            var hasMainBlock = this.state.hasMainBlock;

            // 组件容器，只支持定制部分样式属性

            var _StyleSheet$flatten = _reactNative.StyleSheet.flatten(style),
                _StyleSheet$flatten$m = _StyleSheet$flatten.marginBottom,
                marginBottom = _StyleSheet$flatten$m === undefined ? 0 : _StyleSheet$flatten$m;

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.body, {
                        height: hasMainBlock ? 236 : 160,
                        backgroundColor: themeColor,
                        marginBottom: marginBottom
                    }] },
                this.$renderTitle(),
                this.$renderMainBlock(),
                this.$renderStatusBlock()
            );
        }
    }, {
        key: '$statusDataHasString',
        get: function get() {

            return this.state.statusData.some(function (item) {

                // 其中一项发现不是数字
                if (!numberReg.test(item.value.toString())) {

                    return true;
                }

                return false;
            });
        }
    }]);

    return DataPanel;
}(_react.Component);

DataPanel.propTypes = {
    // 组件上部相关属性
    // 一直响应属性变化
    title: _propTypes2.default.string, // 只有指定了 title 属性，才会渲染上部

    // 组件中部相关属性
    // 只作为初始化属性
    defaultMainData: _propTypes2.default.shape({ // 只有指定了 defaultMainData 属性，才会渲染中部
        value: _propTypes2.default.number, // 默认值
        unit: _propTypes2.default.string, // 默认单位
        controllable: _propTypes2.default.bool, // 是否可控制（加减号可长按，加快变化速度）
        desc: _propTypes2.default.string, // 默认描述
        descOutstanding: _propTypes2.default.bool // 描述是否美化背景，更加突出
    }),
    // 一直响应属性变化
    // 这些属性不会在 defaultProps 中指定默认值，而是生成 state 的时候指定
    mainValue: _propTypes2.default.number, // 通过此属性可修改值
    minimumMainValue: _propTypes2.default.number, // 最小值，不再在组件内做限制，但是为了视觉效果，最好不要小于 -99
    maximumMainValue: _propTypes2.default.number, // 最大值，不再在组件内做限制，但是为了视觉效果，最好不要大于 999
    mainDesc: _propTypes2.default.string, // 通过此属性可修改描述
    mainStep: _propTypes2.default.number, // 主数据变化步长，默认为 1

    // 组件下部相关属性
    // 只作为初始化属性
    // 只有指定了 defaultStatusData 属性，并且不是空数组，才会渲染下部
    defaultStatusData: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        value: _propTypes2.default.oneOfType([// 默认值，支持数字或者文字
        _propTypes2.default.number, _propTypes2.default.string]),
        unit: _propTypes2.default.string, // 默认单位
        desc: _propTypes2.default.string.isRequired // 默认描述，必传
    })),
    // 一直响应属性变化
    statusValue: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])), // 通过此属性可修改值

    // 其它属性
    // 一直响应属性变化
    themeColor: _propTypes2.default.string, // 主题色
    disabled: _propTypes2.default.bool, // 是否禁用加减号
    onBeforeChangeValue: _propTypes2.default.func, // 返回 false，则不触发 mainValue 变化
    onChangeValue: _propTypes2.default.func, // 点击加减号主动触发 mainValue 变化时的回调
    onSendValueChange: _propTypes2.default.func // 连续变化数值时，只会触发一次；前后触发间隔必然大于 200ms
};
DataPanel.defaultProps = {
    themeColor: '#1fc8a2',
    disabled: false,
    onChangeValue: noop, // onBeforeChangeValue 不提供默认值，需要用来判断开发者的一些行为
    onSendValueChange: noop
};
exports.default = DataPanel;


var styles = _reactNative.StyleSheet.create({
    body: {
        position: 'relative',
        height: 236,
        backgroundColor: '#1fc8a2'
    },

    title: {
        height: 17,
        marginTop: 8,
        justifyContent: 'center'
    },
    titleText: {
        fontSize: 12,
        color: '#fff',
        textAlign: 'center'
    },

    main: {
        height: 90,
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between'
    },
    control: {
        width: 48,
        height: 67,
        alignItems: 'center',
        justifyContent: 'center'
    },
    controlIcon: {
        fontSize: 48,
        color: '#fff',
        fontWeight: '100'
    },
    mainValue: {
        width: 185,
        height: 90,
        alignItems: 'center',
        justifyContent: 'center'
    },
    mainValueBox: {
        position: 'relative'
    },
    mainValueText: {
        fontSize: 96,
        color: '#fff',
        fontWeight: '100'
    },
    mainValueUnit: {
        position: 'absolute',
        width: 72,
        bottom: 20,
        right: -72, // 让单位紧贴数字
        fontSize: 12,
        color: '#fff',
        overflow: 'hidden'
    },
    mainDesc: {
        alignItems: 'center'
    },
    mainDescBackground: {
        height: 22,
        paddingLeft: 24,
        paddingRight: 24,
        borderRadius: 11,
        alignItems: 'center',
        justifyContent: 'center'
    },
    mainDescText: {
        fontSize: 12,
        color: '#fff'
    },

    status: {
        position: 'absolute',
        right: 0,
        bottom: 20,
        left: 0,
        height: 40,
        flexDirection: 'row'
    },
    statusItem: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'space-between'
    },
    statusValue: {
        height: 25,
        flexDirection: 'row',
        alignItems: 'flex-end'
    },
    statusValueText: {
        fontSize: 18,
        color: '#fff'
    },
    statusUnitText: {
        marginBottom: 2,
        fontSize: 10,
        color: '#fff'
    },
    statusDesc: {
        height: 14,
        lineHeight: 14,
        fontSize: 10,
        color: '#fff',
        opacity: 0.8
    }
});